name: JDBC Tests
on:
  workflow_call:

jobs:
  run-babelfish-jdbc-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        id: checkout
      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies
        
      - name: Download binaries
        id: download-binaries
        # See https://github.com/marketplace/actions/download-workflow-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: base.yml
          name: binaries
          path: binaries

      - name: Unzip bins
        id: unzip-bins
        run: |
          unzip -d ./temp/ binaries/binaries.zip 
          mv ./temp/home/runner/postgres /home/runner/postgres 
          rm -rf /home/runner/postgres/data
          chown -R runner /home/runner/postgres
               
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

      - name: Install Extensions
        id: install-extensions
        if: always() && steps.download-binaries.outcome == 'success'
        uses: ./.github/composite-actions/install-extensions

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3

      - name: Run JDBC Tests
        id: jdbc
        if: always() && steps.install-extensions.outcome == 'success'
        timeout-minutes: 60
        run: |
          cd test/JDBC/
          mvn test

      - name: Cleanup babelfish database
        id: cleanup
        if: always() && steps.install-extensions.outcome == 'success'
        run: |
          sudo ~/postgres/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -f .github/scripts/cleanup_babelfish_database.sql

      - name: Upload Log
        if: always() && steps.jdbc.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: postgres-log
          path: ~/postgres/data/logfile
      
      # The test summary files contain paths with ':' characters, which is not allowed with the upload-artifact actions
      - name: Rename Test Summary Files
        id: test-file-rename
        if: always() && steps.jdbc.outcome == 'failure'
        run: |
          cd test/JDBC/Info
          timestamp=`ls -Art | tail -n 1`
          cd $timestamp
          mv $timestamp.diff ../output-diff.diff
          mv "$timestamp"_runSummary.log ../run-summary.log
      
      - name: Upload Run Summary 
        if: always() && steps.test-file-rename == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: run-summary.log
          path: test/JDBC/Info/run-summary.log
      
      - name: Upload Output Diff
        if: always() && steps.jdbc.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: output-diff.diff
          path: test/JDBC/Info/output-diff.diff
