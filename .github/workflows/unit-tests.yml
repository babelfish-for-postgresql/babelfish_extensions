name: Unit Tests
on: [push, pull_request]

jobs:
  run-babelfish-unit-tests:
    env:
      INSTALL_DIR: psql
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        id: checkout

      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies

      - name: Build Modified Postgres
        id: build-modified-postgres
        if: always() && steps.install-dependencies.outcome == 'success'
        uses: ./.github/composite-actions/build-modified-postgres
      
      - name: Compile ANTLR
        id: compile-antlr
        if: always() && steps.build-modified-postgres.outcome == 'success'
        uses: ./.github/composite-actions/compile-antlr
      
      - name: Build Extensions
        id: build-extensions
        if: always() && steps.compile-antlr.outcome == 'success'
        uses: ./.github/composite-actions/build-extensions

      - name: Build tds_fdw Extension
        id: build-tds_fdw-extension
        if: always() && steps.build-extensions.outcome == 'success'
        uses: ./.github/composite-actions/build-tds_fdw-extension

      - name: Install Extensions
        id: install-extensions
        if: always() && steps.build-extensions.outcome == 'success'
        uses: ./.github/composite-actions/install-extensions

      - name: Build babelfishpg_unit
        id: build-babelfishpg_unit
        if: always() && steps.install-extensions.outcome == 'success'
        uses: ./.github/composite-actions/build-babelfishpg_unit

      - name: Run Unit Tests
        id: unit
        if: always() && steps.build-babelfishpg_unit.outcome == 'success'
        timeout-minutes: 60
        run: |
          ulimit -c unlimited 
          sudo ~/psql/bin/psql -d jdbc_testdb -U jdbc_user -c "create extension babelfishpg_unit; select * from babelfishpg_unit_run_tests();"

      - name: Check core dumps existence
        if: always()
        id: check_core_dumps
        uses: andstor/file-existence-action@v2
        with:
          files: "/var/coredumps/*"

      - name: Setup upterm session
        if: always() && steps.check_core_dumps.outputs.files_exists == 'true'
        uses: lhotari/action-upterm@v1
        timeout-minutes: 60
        with:
          limit-access-to-actor: true

      - name: Fail workflow to prevent accidental check-in
        if: always()
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('This commit should NEVER be checked in')

      - name: Upload Log
        if: always() && steps.unit.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: postgres-log
          path: ~/psql/data/logfile
      
      - name: Upload Output Diff
        if: always() && steps.unit.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: output-diff.diff
          path: contrib/babelfishpg_unit/log_files/*.log
