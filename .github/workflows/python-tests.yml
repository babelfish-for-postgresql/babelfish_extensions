name: Python Tests
on: [workflow_call]

jobs:
  run-babelfish-python-tests:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        id: checkout

      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies

      - name: Build Modified Postgres
        id: build-modified-postgres
        if: always() && steps.install-dependencies.outcome == 'success'
        uses: ./.github/composite-actions/build-modified-postgres
        with:
          install_dir: 'psql'
          code_coverage: 'yes'
      
      - name: Compile ANTLR
        id: compile-antlr
        if: always() && steps.build-modified-postgres.outcome == 'success'
        uses: ./.github/composite-actions/compile-antlr
      
      - name: Build Extensions
        id: build-extensions
        if: always() && steps.compile-antlr.outcome == 'success'
        uses: ./.github/composite-actions/build-extensions

      - name: Build PostGIS Extension
        id: build-postgis-extension
        if: always() && steps.build-extensions.outcome == 'success'
        uses: ./.github/composite-actions/build-postgis-extension
      
      - name: Install Extensions
        id: install-extensions
        if: always() && steps.build-postgis-extension.outcome == 'success'
        uses: ./.github/composite-actions/install-extensions

      - name: Run Python Tests
        id: run-python-tests
        if: always() && steps.install-extensions.outcome == 'success'
        uses: ./.github/composite-actions/install-and-run-python

      - name: Generate Code Coverage
        id: generate-code-coverage
        if: always() && steps.run-python-tests.outcome == 'success'
        run: |
          export PG_CONFIG=~/psql/bin/pg_config
          export PG_SRC=~/work/postgresql_modified_for_babelfish
          export cmake=$(which cmake)
          cd contrib
          for ext in babelfishpg_common babelfishpg_money babelfishpg_tds babelfishpg_tsql  
          do
            cd $ext
            /usr/bin/lcov --gcov-tool /usr/bin/gcov -q --no-external -c -d . -d ./ -o lcov_test.info
            cd ..
          done
        shell: bash

      - name: Summarize code coverage
        id: code-coverage-summary
        if: always() && steps.generate-code-coverage.outcome == 'success'
        run: |
          cd contrib/
          lcov -a babelfishpg_tsql/lcov_test.info -a babelfishpg_tds/lcov_test.info -a babelfishpg_common/lcov_test.info -a babelfishpg_money/lcov_test.info -o python-lcov.info
          lcov --list python-lcov.info

      - name: Upload Coverage Report for Babelfish Extensions
        if: always() && steps.code-coverage-summary.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-babelfish-extensions-python
          path: contrib/python-lcov.info
          retention-days: 1
