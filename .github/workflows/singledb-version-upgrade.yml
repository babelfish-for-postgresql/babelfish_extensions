name: Major Version Upgrade Tests for singledb mode
on: [push, pull_request]

jobs:
  run-babelfish-mvu-tests-singledb:
    env:
      env:
      OLD_INSTALL_DIR: postgres13
      NEW_INSTALL_DIR: postgres14
      ENGINE_BRANCH_FROM: BABEL_1_X_DEV__PG_13_6
      EXTENSION_BRANCH_FROM: BABEL_1_X_DEV

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies

      - name: Setup Base version ${{ env.ENGINE_BRANCH_FROM }} and run prepare tests
        id: setup-base-version
        if: always() && steps.install-dependencies.outcome =='success'
        uses: ./.github/composite-actions/setup-base-version
        with:
          engine_branch: ${{ env.ENGINE_BRANCH_FROM }}
          extension_branch: ${{ env.EXTENSION_BRANCH_FROM }}
          install_dir: ${{ env.OLD_INSTALL_DIR }}
          migration_mode: 'single-db'

      - name: Build Modified Postgres using latest version
        id: build-modified-postgres-new
        if: always() && steps.setup-base-version.outcome == 'success'
        uses: ./.github/composite-actions/build-modified-postgres
        with:
          install_dir: ${{env.NEW_INSTALL_DIR}}

      - name: Copy ANTLR
        run: cp "/usr/local/lib/libantlr4-runtime.so.4.9.3" ~/${{env.NEW_INSTALL_DIR}}/lib/

      - name: Build Extensions using latest version
        id: build-extensions-new
        if: always() && steps.build-modified-postgres-new.outcome == 'success'
        uses: ./.github/composite-actions/build-extensions
        with:
          install_dir: ${{env.NEW_INSTALL_DIR}}

      - name: Setup new data directory
        id: setup-new-datadir
        if: always() && steps.build-extensions-new.outcome == 'success'
        run: |
          cd ~
          ~/${{env.NEW_INSTALL_DIR}}/bin/initdb -D ~/${{env.NEW_INSTALL_DIR}}/data
          cd ~/${{env.NEW_INSTALL_DIR}}/data
          sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
          sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds'/g" postgresql.conf
          ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
          sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
        shell: bash
      
      - name: Run pg_upgrade
        id: run-pg_upgrade
        if: always() && steps.setup-new-datadir.outcome == 'success'
        uses: ./.github/composite-actions/run-pg-upgrade

      - uses: actions/checkout@v2

      - name: Run JDBC Upgrade Tests (Verify-Cleanup)
        id: jdbc-upgrade-tests-verify
        if: always() && steps.run-pg_upgrade.outcome == 'success'
        run: |
          cd test/JDBC/
          touch dummy_schedule
          echo "all" > dummy_schedule
          export scheduleFile=dummy_schedule
          export isUpgradeTestMode=false
          export inputFilesPath=upgrade/singledb/verification_cleanup
          mvn test

          for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/singledb/schedule); do
            if [[ ! ($(find input/ -name $filename"-vu-prepare.*") || $(find input/ -name $filename"-vu-verify.*")) ]]; then 
              printf '%s\n' "ERROR: Cannot find Test file "$filename"-vu-prepare or "$filename"-vu-verify in input directory !!" >&2
              exit 1
            fi
          done
          export inputFilesPath=input
          for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/singledb/schedule); do
            sed -i "s/$filename[ ]*$/$filename-vu-verify\\n$filename-vu-cleanup/g" upgrade/singledb/schedule
          done
          export scheduleFile=upgrade/singledb/schedule
          mvn test
        shell: bash
      
      - name: Upload New Postgres log
        if: always() && steps.jdbc-upgrade-tests-verify.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
         name: postgres-log-new
         path: ~/${{env.NEW_INSTALL_DIR}}/data/logfile14

      - name: Upload upgrade Log
        if: always() && steps.run-pg_upgrade.outcome == 'failure'
        uses: actions/upload-artifact@v2
        with:
          name: upgrade-logs
          path: ~/upgrade/*.log

      - name: Rename Test Summary Files
        id: test-file-rename
        if: always() && ( steps.jdbc-upgrade-tests-verify.outcome == 'failure' || steps.setup-base-version.outcome == 'failure' )
        run: |
          cd test/JDBC/Info
          timestamp=`ls -Art | tail -n 1`
          cd $timestamp
          cp $timestamp.diff ~/upgrade/output-diff.diff
          cp "$timestamp"_runSummary.log ~/upgrade/run-summary.log
          mkdir -p ~/failed-testscript-outputs

          for f in $(grep "[A-Za-z_\-]*:[ ]*Failed" $timestamp"_runSummary.log" | cut -d ":" -f 1); 
          do 
            if [[ -f ../../output/$f".out" ]]; then
              cp ../../output/$f".out" ~/failed-testscript-outputs/$f".out"
            elif [[ -f ../../output/"singledb__preparation__"$f".out" ]]; then
              cp ../../output/"singledb__preparation__"$f".out" ~/failed-testscript-outputs/"singledb__preparation__"$f".out"
            else
              cp ../../output/"singledb__verification_cleanup__"$f".out" ~/failed-testscript-outputs/"singledb__verification_cleanup__"$f".out"
            fi
          done

      - name: Upload Run Summary
        if: always() && steps.test-file-rename.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: Test Run Artificats
          path: |
            ~/upgrade/*.log
            ~/upgrade/*.diff
            test/JDBC/output/*.out
            ~/failed-testscript-outputs
