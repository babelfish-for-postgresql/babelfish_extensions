name: Major Version Upgrade Tests for singledb mode
on: [push, pull_request]

jobs:
  run-babelfish-mvu-tests-singledb:
    env:
      env:
      OLD_INSTALL_DIR: postgres13
      NEW_INSTALL_DIR: postgres14
      ENGINE_BRANCH_FROM: BABEL_1_X_DEV__PG_13_6
      EXTENSION_BRANCH_FROM: BABEL_1_X_DEV

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Dependencies
        id: install-dependencies
        if: always()
        uses: ./.github/composite-actions/install-dependencies

      - name: Build Modified Postgres using ${{env.ENGINE_BRANCH_FROM}}
        id: build-modified-postgres-old
        if: always() && steps.install-dependencies.outcome == 'success'
        run: |
          cd ..
          git clone --branch ${{env.ENGINE_BRANCH_FROM}} https://github.com/babelfish-for-postgresql/postgresql_modified_for_babelfish.git
          cd postgresql_modified_for_babelfish
          ./configure --prefix=$HOME/${{env.OLD_INSTALL_DIR}} --with-python PYTHON=/usr/bin/python2.7 --enable-debug CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu
          make clean
          make -j 4 2>error.txt
          make install
          make check
          cd contrib && make && sudo make install
        shell: bash
      
      - name: Compile ANTLR
        id: compile-antlr
        if: always() && steps.build-modified-postgres-old.outcome == 'success'
        uses: ./.github/composite-actions/compile-antlr
        with:
          install_dir: ${{env.OLD_INSTALL_DIR}}

      - uses: actions/checkout@v2
        with:
          repository: babelfish-for-postgresql/babelfish_extensions
          ref: ${{env.EXTENSION_BRANCH_FROM}}
      
      - name: Build Extensions using ${{env.EXTENSION_BRANCH_FROM}}
        id: build-extensions-old
        if: always() && steps.compile-antlr.outcome == 'success'
        run: |
          export PG_CONFIG=~/${{env.OLD_INSTALL_DIR}}/bin/pg_config
          export PG_SRC=~/work/babelfish_extensions/postgresql_modified_for_babelfish
          export cmake=$(which cmake)
          cd contrib/babelfishpg_money
          make && make install
          cd ../babelfishpg_common
          make && make install
          cd ../babelfishpg_tds
          make && make install
          cd ../babelfishpg_tsql
          make && make install
      
      - name: Install Extensions using ${{env.EXTENSION_BRANCH_FROM}}
        id: install-extensions-old
        if: always() && steps.build-extensions-old.outcome == 'success'
        run: |
          cd ~
          export PATH=/opt/mssql-tools/bin:$PATH
          ~/${{env.OLD_INSTALL_DIR}}/bin/initdb -D ~/${{env.OLD_INSTALL_DIR}}/data
          ~/${{env.OLD_INSTALL_DIR}}/bin/pg_ctl -D ~/${{env.OLD_INSTALL_DIR}}/data -l logfile13 start
          cd ${{env.OLD_INSTALL_DIR}}/data
          sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
          sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds'/g" postgresql.conf
          ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
          sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
          ~/${{env.OLD_INSTALL_DIR}}/bin/pg_ctl -D ~/${{env.OLD_INSTALL_DIR}}/data -l logfile13 restart
          cd ~/work/babelfish_extensions/babelfish_extensions/
          sudo ~/${{env.OLD_INSTALL_DIR}}/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -f .github/scripts/create_extension.sql
          sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
        shell: bash

      - uses: actions/checkout@v2
      
      - name: Run JDBC Upgrade Tests
        id: jdbc-upgrade-tests
        run: |
          cd test/JDBC/
          export isUpgradeTestMode=false
          export inputFilesPath=input
          for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/$base_dir/schedule); do
            sed -i "s/$filename[ ]*$/$filename-vu-prepare/g" upgrade/singledb/schedule
          done
          export scheduleFile=upgrade/singledb/schedule
          mvn test
        shell: bash


      