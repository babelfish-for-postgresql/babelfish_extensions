name: 'Dump Restore Utility'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  is_final_ver:
    description: "Is this the final version"
    required: true
  pg_old_dir: 
    description: "Previous version was installed in this directory"
    required: true
  pg_new_dir:
    description: "Install new version in this directory"
    required: true
  migration_mode:
    description: "Database migration mode for Babelfish"
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup latest version
      id: setup-new-version
      if: always()
      uses: ./.github/composite-actions/setup-new-version
      with:
        engine_branch: ${{ inputs.engine_branch }}
        extension_branch: ${{ inputs.extension_branch }}
        pg_new_dir: ${{ inputs.pg_new_dir }}

    - name: Dump and restore database
      id: run-pg_dump-restore
      if: always() && steps.setup-new-version.outcome == 'success'
      run: |
        echo 'Starting dump...'
        cd ~
        mkdir -p upgrade
        cd upgrade
        echo 'Runinng pg_dumpall and pg_dump'
        ~/${{ inputs.pg_new_dir }}/bin/pg_dumpall --username jdbc_user --globals-only --quote-all-identifiers --verbose -f pg_dump_globals.sql 2>>error.log
        ~/${{ inputs.pg_new_dir }}/bin/pg_dump --username jdbc_user --column-inserts --quote-all-identifiers --verbose --file="pg_dump.sql" --dbname=jdbc_testdb 2>>error.log
        ~/${{ inputs.pg_old_dir }}/bin/pg_ctl -D ~/${{ inputs.pg_old_dir }}/data stop
        echo 'Done dumping the database, proceeding to restore dumped SQL script on new server.'
        echo 'Restoring from pg_dumpall'
        ~/${{ inputs.pg_new_dir }}/bin/pg_ctl -D ~/${{ inputs.pg_new_dir }}/data -l ~/${{ inputs.pg_new_dir }}/data/logfile start
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -f pg_dump_globals.sql 2>>error.log
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -c "CREATE DATABASE jdbc_testdb OWNER jdbc_user;"
        echo 'Restoring from pg_dump'
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -f pg_dump.sql 2>>error.log
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "GRANT ALL ON SCHEMA sys to jdbc_user;"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "GRANT CREATE, CONNECT, TEMPORARY ON DATABASE jdbc_testdb TO sysadmin WITH GRANT OPTION;"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER USER jdbc_user CREATEDB;"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER SYSTEM SET babelfishpg_tsql.database_name = 'jdbc_testdb';"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = '${{inputs.migration_mode}}';"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "SELECT pg_reload_conf();"
        cd ~/work/babelfish_extensions/babelfish_extensions/
        export PATH=/opt/mssql-tools/bin:$PATH
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    # Temporary step
    - name: Temporarily disable failing tests
      if: always() && steps.run-pg_dump-restore.outcome == 'success' && inputs.is_final_ver == 'true'
      env:
        migr_mode: ${{ inputs.migration_mode }}
      run: |
        if [[ "$migr_mode" == "multi-db" ]];then
          base_dir=${{ matrix.upgrade-path.path[0] }}
          if [[ "$base_dir" == *"latest"* ]]; then
            base_dir="latest"
          fi
        else
          base_dir="singledb"
        fi

        # Temporarily disable certain tests until fixed
        sed -i "/BABEL-3513/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/BABEL_OBJECT_ID/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/ISC-Views/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/TestNotNull/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/TestSQLVariant/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/babel_datatype_sqlvariant/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/schema_resolution_proc/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/sp_tablecollations/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/sys-sql_modules/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/sys-system_sql_modules/d" test/JDBC/upgrade/$base_dir/schedule
      shell: bash

    - name: Run Verify Tests
      if: always() && steps.run-pg_dump-restore.outcome == 'success' && inputs.is_final_ver == 'true'
      uses: ./.github/composite-actions/run-verify-tests
      with:
        is_final_ver: ${{ inputs.is_final_ver }}
        pg_new_dir: ${{ inputs.pg_new_dir }}
        migration_mode: ${{ inputs.migration_mode }}