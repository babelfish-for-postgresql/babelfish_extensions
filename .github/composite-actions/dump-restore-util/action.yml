name: 'Dump Restore Utility'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  is_final_ver:
    description: "Is this the final version"
    required: true
  pg_old_dir: 
    description: "Previous version was installed in this directory"
    required: true
  pg_new_dir:
    description: "Install new version in this directory"
    required: true
  migration_mode:
    description: "Database migration mode for Babelfish"
    required: true
  logical_database:
    description: "Logical Babelfish database to dump and restore"
    required: false
    default: 'null'

runs:
  using: "composite"
  steps:
    - name: Setup latest version
      id: setup-new-version
      if: always()
      uses: ./.github/composite-actions/setup-new-version
      with:
        engine_branch: ${{ inputs.engine_branch }}
        extension_branch: ${{ inputs.extension_branch }}
        pg_new_dir: ${{ inputs.pg_new_dir }}

    - name: Dump and restore database
      id: run-pg_dump-restore
      if: always() && steps.setup-new-version.outcome == 'success'
      run: |
        echo 'Starting dump...'
        cd ~
        mkdir -p upgrade
        cd upgrade
        if [[ '${{ inputs.logical_database }}' == 'null' ]];then
          echo 'Starting to dump whole Babelfish physical database'
          ~/${{ inputs.pg_new_dir }}/bin/pg_dumpall --database jdbc_testdb --username jdbc_user --globals-only --quote-all-identifiers --verbose -f pg_dump_globals.sql 2>>error.log
          ~/${{ inputs.pg_new_dir }}/bin/pg_dump --create --username jdbc_user --column-inserts --quote-all-identifiers --verbose --file="pg_dump.sql" --dbname=jdbc_testdb 2>>error.log
        else
          echo "Starting to dump Babelfish logical database ${{ inputs.logical_database }}"
          ~/${{ inputs.pg_new_dir }}/bin/pg_dumpall --database jdbc_testdb --username jdbc_user --globals-only --quote-all-identifiers --verbose --bbf-database-name='${{ inputs.logical_database }}' -f pg_dump_globals.sql 2>>error.log
          ~/${{ inputs.pg_new_dir }}/bin/pg_dump --username jdbc_user --column-inserts --quote-all-identifiers --verbose --bbf-database-name='${{ inputs.logical_database }}' --file="pg_dump.sql" --dbname=jdbc_testdb 2>>error.log
        fi

        # Stop old server and start the new.
        ~/${{ inputs.pg_old_dir }}/bin/pg_ctl -D ~/${{ inputs.pg_old_dir }}/data stop
        ~/${{ inputs.pg_new_dir }}/bin/pg_ctl -D ~/${{ inputs.pg_new_dir }}/data -l ~/${{ inputs.pg_new_dir }}/data/logfile start
        cd ~/work/babelfish_extensions/babelfish_extensions/
        echo 'Database dump complete.'

        if [[ '${{ inputs.logical_database }}' == 'null' ]];then
          echo 'Restoring from pg_dumpall'
          sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -f ~/upgrade/pg_dump_globals.sql 2>> ~/upgrade/error.log
          echo 'Restoring from pg_dump'
          sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U jdbc_user -f ~/upgrade/pg_dump.sql 2>> ~/upgrade/error.log
        else
          # Create and initialise Babelfish extensions in the new server if we are restoring a logical database.
          sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -v migration_mode=${{inputs.migration_mode}} -f .github/scripts/create_extension.sql
          echo 'Restoring from pg_dumpall'
          sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -f ~/upgrade/pg_dump_globals.sql 2>> ~/upgrade/error.log
          echo 'Restoring from pg_dump'
          sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -f ~/upgrade/pg_dump.sql 2>> ~/upgrade/error.log
        fi

        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER SYSTEM SET babelfishpg_tsql.database_name = 'jdbc_testdb';"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = '${{inputs.migration_mode}}';"
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d jdbc_testdb -U jdbc_user -c "SELECT pg_reload_conf();"
        export PATH=/opt/mssql-tools/bin:$PATH
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    # Temporary step
    - name: Temporarily disable failing tests
      if: always() && steps.run-pg_dump-restore.outcome == 'success' && inputs.is_final_ver == 'true'
      env:
        migr_mode: ${{ inputs.migration_mode }}
      run: |
        if [[ "$migr_mode" == "multi-db" ]];then
          base_dir=${{ matrix.upgrade-path.path[0] }}
          if [[ "$base_dir" == *"latest"* ]]; then
            base_dir="latest"
          fi
        else
          base_dir="singledb"
        fi

        if [[ '${{ inputs.logical_database }}' != 'null' ]];then
          base_dir="${{ inputs.logical_database }}"
        fi

        # Temporarily disable certain tests until fixed
        sed -i "/BABEL-3513/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/BABEL_OBJECT_ID/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/ISC-Views/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/TestNotNull/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/TestSQLVariant/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/babel_datatype_sqlvariant/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/sp_tablecollations/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/sys-sql_modules/d" test/JDBC/upgrade/$base_dir/schedule
        sed -i "/sys-system_sql_modules/d" test/JDBC/upgrade/$base_dir/schedule
      shell: bash

    - name: Run Verify Tests
      if: always() && steps.run-pg_dump-restore.outcome == 'success' && inputs.is_final_ver == 'true'
      uses: ./.github/composite-actions/run-verify-tests
      with:
        is_final_ver: ${{ inputs.is_final_ver }}
        pg_new_dir: ${{ inputs.pg_new_dir }}
        migration_mode: ${{ inputs.migration_mode }}
        logical_database: ${{ inputs.logical_database }}