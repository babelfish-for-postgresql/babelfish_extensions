name: 'Dump Restore Utility'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  is_final_ver:
    description: "Is this the final version"
    required: true
  pg_old_dir: 
    description: "Previous version was installed in this directory"
    required: true
  pg_new_dir:
    description: "Install new version in this directory"
    required: true
  migration_mode:
    description: "Database migration mode for Babelfish"
    required: true
  logical_database:
    description: "Logical Babelfish database to dump and restore"
    required: false
    default: 'null'
  dump_data_as:
    description: "Dump table data using COPY or INSERT"
    required: false
    default: 'copy'
  dump_format:
    description: "Dump format (plain/custom/tar/directory)"
    required: true
  type:
    description: "Dump type full or combination of schema-only and data-only"
    required: false
    default: 'full'

runs:
  using: "composite"
  steps:
    - name: Setup latest version
      id: setup-new-version
      if: always()
      uses: ./.github/composite-actions/setup-new-version
      with:
        engine_branch: ${{ inputs.engine_branch }}
        extension_branch: ${{ inputs.extension_branch }}
        pg_new_dir: ${{ inputs.pg_new_dir }}

    - name: Dump and restore database
      id: run-pg_dump-restore
      if: always() && steps.setup-new-version.outcome == 'success'
      run: |
        ulimit -c unlimited
        echo 'Starting dump...'
        cd ~
        mkdir -p upgrade
        cd upgrade
        export PGPASSWORD=12345678

        if [[ '${{ inputs.dump_data_as }}' == 'inserts' ]];then
          export DUMP_OPTS='--column-inserts'
        else
          export DUMP_OPTS=''
        fi
        export DUMP_OPTS="$DUMP_OPTS --format=${{ inputs.dump_format }}"
        export DUMPALL_OPTS=""

        if [[ '${{ inputs.logical_database }}' != 'null' ]];then
          export DUMP_OPTS="$DUMP_OPTS --bbf-database-name=${{ inputs.logical_database }}"
          export DUMPALL_OPTS="$DUMPALL_OPTS --bbf-database-name=${{ inputs.logical_database }}"
        fi

        echo 'Starting to dump the Babelfish database'
        if [[ '${{ inputs.type }}' == 'full' ]];then
          # Perform the complete dump
          ~/${{ inputs.pg_new_dir }}/bin/pg_dumpall -h localhost --database jdbc_testdb --username jdbc_user $DUMPALL_OPTS --roles-only --quote-all-identifiers --verbose --no-role-passwords -f pg_dump_globals.sql 2>>error.log
          ~/${{ inputs.pg_new_dir }}/bin/pg_dump -h localhost --username jdbc_user $DUMP_OPTS --quote-all-identifiers --verbose --file="pg_dump.archive" --dbname=jdbc_testdb 2>>error.log
        else
          # First perform the schema-only dump and then perform the data-only dump to produce a complete dump
          ~/${{ inputs.pg_new_dir }}/bin/pg_dumpall -h localhost --database jdbc_testdb --username jdbc_user $DUMPALL_OPTS --roles-only --quote-all-identifiers --schema-only --verbose --no-role-passwords -f pg_dump_globals_so.sql 2>>error.log
          ~/${{ inputs.pg_new_dir }}/bin/pg_dump -h localhost --username jdbc_user $DUMP_OPTS --quote-all-identifiers --schema-only --verbose --file="pg_dump_so.archive" --dbname=jdbc_testdb 2>>error.log

          ~/${{ inputs.pg_new_dir }}/bin/pg_dump -h localhost --username jdbc_user $DUMP_OPTS --quote-all-identifiers --data-only --verbose --file="pg_dump_do.archive" --dbname=jdbc_testdb 2>>error.log
        fi

        # Stop old server and start the new.
        ~/${{ inputs.pg_old_dir }}/bin/pg_ctl -c -D ~/${{ inputs.pg_old_dir }}/data stop
        ~/${{ inputs.pg_new_dir }}/bin/pg_ctl -c -D ~/${{ inputs.pg_new_dir }}/data -l ~/${{ inputs.pg_new_dir }}/data/logfile start
        cd ~/work/babelfish_extensions/babelfish_extensions/
        echo 'Database dump complete.'

        # Create and initialise Babelfish extensions in the new server to perform restore.
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -v ON_ERROR_STOP=1 -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -v migration_mode=${{inputs.migration_mode}} -v tsql_port="1433" -f .github/scripts/create_extension.sql

        echo 'Starting to restore the Babelfish database'
        if [[ '${{ inputs.type }}' == 'full' ]];then
          echo 'Restoring from pg_dumpall'
          sudo PGPASSWORD=12345678 ~/${{ inputs.pg_new_dir }}/bin/psql -v ON_ERROR_STOP=1 -h localhost -d jdbc_testdb -U jdbc_user --single-transaction -f ~/upgrade/pg_dump_globals.sql 2>> ~/upgrade/error.log
          echo 'Restoring from pg_dump'
          if [[ '${{ inputs.dump_format }}' == 'plain' ]];then
            sudo PGPASSWORD=12345678 ~/${{ inputs.pg_new_dir }}/bin/psql -v ON_ERROR_STOP=1 -h localhost -d jdbc_testdb -U jdbc_user --single-transaction -f ~/upgrade/pg_dump.archive 2>> ~/upgrade/error.log
          else
            ~/${{ inputs.pg_new_dir }}/bin/pg_restore -h localhost -d jdbc_testdb -U jdbc_user --single-transaction ~/upgrade/pg_dump.archive 2>> ~/upgrade/error.log
          fi
        else
          echo 'Restoring from pg_dumpall'
          sudo PGPASSWORD=12345678 ~/${{ inputs.pg_new_dir }}/bin/psql -v ON_ERROR_STOP=1 -h localhost -d jdbc_testdb -U jdbc_user --single-transaction -f ~/upgrade/pg_dump_globals_so.sql 2>> ~/upgrade/error.log
          echo 'Restoring from pg_dump'
          if [[ '${{ inputs.dump_format }}' == 'plain' ]];then
            sudo PGPASSWORD=12345678 ~/${{ inputs.pg_new_dir }}/bin/psql -v ON_ERROR_STOP=1 -h localhost -d jdbc_testdb -U jdbc_user --single-transaction -f ~/upgrade/pg_dump_so.archive 2>> ~/upgrade/error.log
            sudo PGPASSWORD=12345678 ~/${{ inputs.pg_new_dir }}/bin/psql -v ON_ERROR_STOP=1 -h localhost -d jdbc_testdb -U jdbc_user --single-transaction -f ~/upgrade/pg_dump_do.archive 2>> ~/upgrade/error.log
          else
            ~/${{ inputs.pg_new_dir }}/bin/pg_restore -h localhost -d jdbc_testdb -U jdbc_user --single-transaction ~/upgrade/pg_dump_so.archive 2>> ~/upgrade/error.log
            ~/${{ inputs.pg_new_dir }}/bin/pg_restore -h localhost -d jdbc_testdb -U jdbc_user --single-transaction ~/upgrade/pg_dump_do.archive 2>> ~/upgrade/error.log
          fi
        fi
        echo 'Database restore complete.'

        export PATH=/opt/mssql-tools/bin:$PATH
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    - name: Run Verify Tests
      if: always() && steps.run-pg_dump-restore.outcome == 'success' && inputs.is_final_ver == 'true'
      uses: ./.github/composite-actions/run-verify-tests
      with:
        is_final_ver: ${{ inputs.is_final_ver }}
        pg_new_dir: ${{ inputs.pg_new_dir }}
        migration_mode: ${{ inputs.migration_mode }}
        logical_database: ${{ inputs.logical_database }}
