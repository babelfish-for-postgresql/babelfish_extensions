name: 'Minor Version Upgrade Utility'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  is_final_ver:
    description: "Is this the final version"
    required: true
  install_dir:
    description: "Install new version in this directory"
    required: true
  server_collation_name:
    description: "Server collation name"
    required: false
    default: "default"

runs:
  using: "composite"
  steps:    
    - name: Build and run tests for Postgres engine using ${{ inputs.engine_branch }}
      uses: ./.github/composite-actions/build-modified-postgres
      with:
        engine_branch: ${{ inputs.engine_branch }}
        install_dir: ${{ inputs.install_dir }}

    - name: Set env variables and build extensions using ${{ inputs.extension_branch }}
      id: build-extensions-newer
      uses: ./.github/composite-actions/build-extensions
      with: 
        install_dir: ${{ inputs.install_dir }}
        extension_branch: ${{ inputs.extension_branch }}

    # Not created and used composite action update-extensions here since, in the previous step it has 
    # checked out a branch/tag which may not have the updated update-extension composite action
    - name: Update extensions
      if: always() && steps.build-extensions-newer.outcome == 'success'
      run: |
        ulimit -c unlimited
        cd ~
        ~/${{ inputs.install_dir }}/bin/pg_ctl -c -D ~/${{ inputs.install_dir }}/data/ -l logfile restart
        sudo ~/${{ inputs.install_dir }}/bin/psql -v ON_ERROR_STOP=1 -d jdbc_testdb -U runner -c "\dx"
        sudo ~/${{ inputs.install_dir }}/bin/psql -v ON_ERROR_STOP=1 -d jdbc_testdb -U runner -c "ALTER EXTENSION "babelfishpg_common" UPDATE;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -v ON_ERROR_STOP=1 -d jdbc_testdb -U runner -c "ALTER EXTENSION "babelfishpg_tsql" UPDATE;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -v ON_ERROR_STOP=1 -d jdbc_testdb -U runner -c "\dx"
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    - uses: actions/checkout@v2
  
    - name: Change migration mode to multi-db
      id: change-migration-mode
      if: always() && inputs.is_final_ver == 'true'
      run: |
        sudo ~/${{ inputs.install_dir}}/bin/psql -v ON_ERROR_STOP=1 -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = 'multi-db';"
        sudo ~/${{ inputs.install_dir}}/bin/psql -v ON_ERROR_STOP=1 -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
      shell: bash

    - name: Run JDBC Verify Tests
      id: jdbc-verify-tests
      if: always() && steps.change-migration-mode.outcome == 'success' && inputs.is_final_ver == 'true'
      env:
        base_dir: ${{ matrix.upgrade-path.path[0] }}
        tar_dir: ${{ matrix.upgrade-path.last_version }}
      run: |
        cd test/JDBC/
        export isUpgradeTestMode=false
        if [[ ${{ inputs.server_collation_name }} != "default" ]]; then
          export serverCollationName=${{ inputs.server_collation_name }}
        fi
        base_dir=${{ matrix.upgrade-path.path[0] }}
        tar_dir=${{ matrix.upgrade-path.last_version }}
        if [[ "$base_dir" == *"latest"* ]]; then
          base_dir="latest"
        fi
        if [[ "$tar_dir" == *"latest"* ]]; then
          tar_dir="latest"
        fi
        export inputFilesPath=upgrade/$tar_dir/verification_cleanup/$base_dir
        mvn test
        export inputFilesPath=input
        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/$base_dir/schedule); do
          sed -i "s/$filename[ ]*$/$filename-vu-verify\\n$filename-vu-cleanup/g" upgrade/$base_dir/schedule
        done
        export scheduleFile=upgrade/$base_dir/schedule
        mvn test
      shell: bash      
