name: 'Run verify & cleanup scripts'
inputs:
  is_final_ver:
    description: "Is this the final version"
    required: true
  pg_new_dir:
    description: "Install new version in this directory"
    required: true
  migration_mode:
    description: "Database migration mode for Babelfish"
    required: true
  server_collation_name:
    description: "Server collation name"
    required: false
    default: "default"
  extension_branch:
    description: "Extension Branch"
    required: false
    default: 'latest'
  dump_restore:
    description: "Whether it is version upgrade or dump/restore"
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - if: ${{ inputs.extension_branch != 'latest' && inputs.dump_restore == 'true' }}
      uses: actions/checkout@v2
      with:
        repository: babelfish-for-postgresql/babelfish_extensions
        ref: ${{ inputs.extension_branch }}

    - name: Run JDBC Verify Tests
      if: always()
      id: jdbc-verify-tests
      env:
        migr_mode: ${{ inputs.migration_mode }}
      run: |
        cd test/JDBC/
        touch dummy_schedule
        echo "all" > dummy_schedule
        export scheduleFile=dummy_schedule
        export isUpgradeTestMode=false
        if [[ ${{ inputs.server_collation_name }} != "default" ]]; then
          export serverCollationName=${{ inputs.server_collation_name }}
        fi

        if [[ "$migr_mode" == "multi-db" ]];then
          base_dir=${{ matrix.upgrade-path.path[0] }}
          tar_dir=${{ matrix.upgrade-path.last_version }}
          if [[ "$base_dir" == *"latest"* || ${{ inputs.dump_restore }} == 'true' ]]; then
            base_dir="latest"
          fi
          if [[ "$tar_dir" == *"latest"* || ${{ inputs.dump_restore }} == 'true' ]]; then
            tar_dir="latest"
          fi
          export inputFilesPath=upgrade/$tar_dir/verification_cleanup/$base_dir
        else
          base_dir="singledb"
          export inputFilesPath=upgrade/singledb/verification_cleanup
        fi

        mvn test
        export inputFilesPath=input

        # Skip test BABEL-404 for previous versions while testing dump/restore since it specifies
        # contraint column ordering which is expected to fail after fix for BABEL-4888
        if [[ "${{ inputs.dump_restore }}" == 'true' && "${{ inputs.extension_branch }}" != 'latest' ]];then
          sed -i "/BABEL-404\>/d" upgrade/$base_dir/schedule
        fi

        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/$base_dir/schedule); do
          sed -i "s/\b$filename[ ]*\b$/$filename-vu-verify\\n$filename-vu-cleanup/g" upgrade/$base_dir/schedule
        done
        export scheduleFile=upgrade/$base_dir/schedule
        mvn test
      shell: bash

    - name: Cleanup babelfish database
      id: cleanup
      if: always() && steps.jdbc-verify-tests.outcome == 'success' && inputs.is_final_ver == 'true'
      run: |
        sudo ~/${{ inputs.pg_new_dir }}/bin/psql -d postgres -U runner -v user="jdbc_user" -v db="jdbc_testdb" -f .github/scripts/cleanup_babelfish_database.sql
      shell: bash