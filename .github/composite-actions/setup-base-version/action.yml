name: 'Setup Base Version and Run Tests'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  install_dir:
    description: "Install base version in this directory"
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone, build, and run tests for Postgres engine using ${{ inputs.engine_branch }}
      id: build-modified-postgres
      uses: ./.github/composite-actions/build-modified-postgres
      with:
        engine_branch: ${{ inputs.engine_branch }}
        install_dir: ${{ inputs.install_dir }}

    - name: Compile ANTLR
      id: compile-antlr
      if: always() && steps.build-modified-postgres.outcome == 'success'
      uses: ./.github/composite-actions/compile-antlr
      with:
        install_dir: ${{ inputs.install_dir }}

    - name: Set env variables and build extensions using ${{ inputs.extension_branch }}
      if: always() && steps.compile-antlr.outcome == 'success'
      uses: ./.github/composite-actions/build-extensions
      with: 
        install_dir: ${{ inputs.install_dir }}
        extension_branch: ${{ inputs.extension_branch }}

    # Not used composite action install-extension here since, in the previous step it has 
    # checked out a branch/tag which may not have the updated install-extension composite action
    - name: Install extensions
      run: |
        cd ~
        export PATH=/opt/mssql-tools/bin:$PATH
        ~/${{ inputs.install_dir }}/bin/initdb -D ~/${{ inputs.install_dir }}/data/
        ~/${{ inputs.install_dir }}/bin/pg_ctl -D ~/${{ inputs.install_dir }}/data/ -l logfile start
        cd ${{ inputs.install_dir }}/data
        sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
        sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds'/g" postgresql.conf
        ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
        sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
        ~/${{ inputs.install_dir }}/bin/pg_ctl -D ~/${{ inputs.install_dir }}/data/ -l logfile restart
        sudo ~/${{ inputs.install_dir }}/bin/psql -d postgres -U runner -c "CREATE USER jdbc_user WITH SUPERUSER CREATEDB CREATEROLE PASSWORD '12345678' INHERIT;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d postgres -U runner -c "DROP DATABASE IF EXISTS jdbc_testdb;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d postgres -U runner -c "CREATE DATABASE jdbc_testdb OWNER jdbc_user;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "set allow_system_table_mods = on;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "CREATE EXTENSION "babelfishpg_tds" CASCADE;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "GRANT ALL ON SCHEMA sys to jdbc_user;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "ALTER USER jdbc_user CREATEDB;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.database_name = 'jdbc_testdb';"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "CALL sys.initialize_babelfish('jdbc_user');"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "\dx"
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    - uses: actions/checkout@v2

    - name: Change migration mode to multi-db
      id: change-migration-mode
      run: |
        sudo ~/${{ inputs.install_dir}}/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = 'multi-db';"
        sudo ~/${{ inputs.install_dir}}/bin/psql -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
      shell: bash

    - name: Run JDBC Upgrade Tests
      id: jdbc-upgrade-tests
      run: |
        cd test/JDBC/
        export isUpgradeTestMode=true
        export inputFilesPath=upgrade/${{ matrix.upgrade-path.path[0] }}/preparation
        mvn test
        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/${{ matrix.upgrade-path.path[0] }}/schedule); do
          if [[ ! ($(find input/ -name $filename"-vu-prepare.*") || $(find input/ -name $filename"-vu-verify.*")) ]]; then 
            printf '%s\n' "ERROR: Cannot find Test file "$filename"-vu-prepare or "$filename"-vu-verify in input directory !!" >&2
            exit 1
          fi
        done
        export isUpgradeTestMode=false
        export inputFilesPath=input
        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/${{ matrix.upgrade-path.path[0] }}/schedule); do
          sed -i "s/$filename[ ]*$/$filename-vu-prepare/g" upgrade/${{ matrix.upgrade-path.path[0] }}/schedule
        done
        export scheduleFile=upgrade/${{ matrix.upgrade-path.path[0] }}/schedule
        mvn test
      shell: bash