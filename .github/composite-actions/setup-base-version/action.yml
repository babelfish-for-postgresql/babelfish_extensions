name: 'Setup Base Version and Run Tests'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  install_dir:
    description: "Install base version in this directory"
    required: true
  migration_mode:
    description: "Database migration mode for Babelfish"
    required: true
  logical_database:
    description: "Logical Babelfish database to dump and restore"
    required: false
    default: 'null'

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      id: install-dependencies
      if: always()
      uses: ./.github/composite-actions/install-dependencies

    - name: Clone, build, and run tests for Postgres engine using ${{ inputs.engine_branch }}
      id: build-modified-postgres
      uses: ./.github/composite-actions/build-modified-postgres
      if: always() && steps.install-dependencies.outcome == 'success'
      with:
        engine_branch: ${{ inputs.engine_branch }}
        install_dir: ${{ inputs.install_dir }}

    - name: Compile ANTLR
      id: compile-antlr
      if: always() && steps.build-modified-postgres.outcome == 'success'
      uses: ./.github/composite-actions/compile-antlr
      with:
        install_dir: ${{ inputs.install_dir }}

    - name: Set env variables and build extensions
      if: always() && steps.compile-antlr.outcome == 'success'
      uses: ./.github/composite-actions/build-extensions
      with: 
        install_dir: ${{ inputs.install_dir }}
        extension_branch: ${{ inputs.extension_branch }}

    - name: Build tds_fdw Extension
      run: |
        cd ..
        export TDS_FDW_VERSION="2.0.3"
        sudo apt-get install wget
        wget https://github.com/tds-fdw/tds_fdw/archive/v${TDS_FDW_VERSION}.tar.gz
        tar -xvzf v${TDS_FDW_VERSION}.tar.gz
        cd tds_fdw-${TDS_FDW_VERSION}/
        make USE_PGXS=1 PG_CONFIG=~/${{ inputs.install_dir }}/bin/pg_config
        sudo make USE_PGXS=1 PG_CONFIG=~/${{ inputs.install_dir }}/bin/pg_config install
      shell: bash

    # Not used composite action install-extension here since, in the previous step it has 
    # checked out a branch/tag which may not have the updated install-extension composite action
    - name: Install extensions
      run: |
        cd ~
        export PATH=/opt/mssql-tools/bin:$PATH
        ~/${{ inputs.install_dir }}/bin/initdb -D ~/${{ inputs.install_dir }}/data/
        ~/${{ inputs.install_dir }}/bin/pg_ctl -D ~/${{ inputs.install_dir }}/data/ -l logfile start
        cd ${{ inputs.install_dir }}/data
        sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
        sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds,  pg_stat_statements'/g" postgresql.conf
        ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
        sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
        ~/${{ inputs.install_dir }}/bin/pg_ctl -D ~/${{ inputs.install_dir }}/data/ -l logfile restart
        sudo ~/${{ inputs.install_dir }}/bin/psql -d postgres -U runner -c "CREATE USER jdbc_user WITH SUPERUSER CREATEDB CREATEROLE PASSWORD '12345678' INHERIT;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d postgres -U runner -c "DROP DATABASE IF EXISTS jdbc_testdb;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d postgres -U runner -c "CREATE DATABASE jdbc_testdb OWNER jdbc_user;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "set allow_system_table_mods = on;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "CREATE EXTENSION "babelfishpg_tds" CASCADE;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "GRANT ALL ON SCHEMA sys to jdbc_user;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "ALTER USER jdbc_user CREATEDB;"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.database_name = 'jdbc_testdb';"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "CALL sys.initialize_babelfish('jdbc_user');"
        sudo ~/${{ inputs.install_dir }}/bin/psql -d jdbc_testdb -U runner -c "\dx"
        sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      shell: bash

    - uses: actions/checkout@v2

    - name: Change migration mode to multi-db
      id: change-migration-mode
      if: ${{ inputs.migration_mode == 'multi-db' }} && always()
      run: |
        sudo ~/${{ inputs.install_dir}}/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = 'multi-db';"
        sudo ~/${{ inputs.install_dir}}/bin/psql -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
      shell: bash

    - name: Run JDBC Upgrade Tests
      id: jdbc-upgrade-tests
      env:
        base_dir: ${{ matrix.upgrade-path.path[0] }}
        migr_mode: ${{ inputs.migration_mode }}
      run: |
        cd test/JDBC/
        echo "all" > dummy_schedule
        export scheduleFile=dummy_schedule
        if [[ "$migr_mode" == "multi-db" ]];then
          export isUpgradeTestMode=true
          base_dir=${{ matrix.upgrade-path.path[0] }}
          if [[ "$base_dir" == *"latest"* ]]; then
            base_dir="latest"
          fi
        else
          base_dir="singledb"
        fi

        if [[ '${{ inputs.logical_database }}' != 'null' ]];then
          base_dir="${{ inputs.logical_database }}"
        fi

        export inputFilesPath=upgrade/$base_dir/preparation
        mvn test
        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/$base_dir/schedule); do
          if [[ ! ($(find input/ -name $filename"-vu-prepare.*") || $(find input/ -name $filename"-vu-verify.*")) ]]; then 
            printf '%s\n' "ERROR: Cannot find Test file "$filename"-vu-prepare or "$filename"-vu-verify in input directory !!" >&2
            exit 1
          fi
        done
        export isUpgradeTestMode=false
        export inputFilesPath=input
        for filename in $(grep -v "^ignore.*\|^#.*\|^cmd.*\|^all.*\|^$" upgrade/$base_dir/schedule); do
          sed -i "s/$filename[ ]*$/$filename-vu-prepare/g" upgrade/$base_dir/schedule
        done
        export scheduleFile=upgrade/$base_dir/schedule
        mvn test
      shell: bash

    - name: Install Python
      id: install-python
      if: ${{ matrix.upgrade-path.path[0] == 'source_latest' && steps.jdbc-upgrade-tests.outcome == 'success' && inputs.logical_database == 'null' }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Configure Python Environment
      id: configure-python-environment
      if: always() && steps.install-python.outcome == 'success'
      run: |
        cd ~
        sudo apt-get install odbc-postgresql
        pip3 install pyodbc==4.0.35 pymssql
      shell: bash

    - name: Run dependency check
      id: run-dependency-check
      if: always() && steps.configure-python-environment.outcome == 'success'
      run: |
        cd test/python
        provider="PostgreSQL Unicode" \
        fileGenerator_URL=localhost \
        fileGenerator_port=5432 \
        fileGenerator_databaseName=jdbc_testdb \
        fileGenerator_user=jdbc_user \
        fileGenerator_password=12345678 \
        LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/odbc/ \
        python3 upgrade_validation.py
      shell: bash

    - name: Upload artifacts
      if: always() && steps.run-dependency-check.outcome == 'failure'
      run: |
        mkdir -p ~/upgrade
        cp test/python/output/upgrade_validation/* ~/upgrade
      shell: bash
