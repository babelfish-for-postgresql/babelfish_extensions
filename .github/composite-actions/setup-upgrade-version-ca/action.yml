name: 'Setup Upgrade Version Composite Action'
inputs:
  base_version: 
    description: "Base version"
    required: true

runs:
  using: "composite"
  steps:
    - name: setup upgrade version composite action
      run: |
        upgrade_version_dir_path=${{ github.workspace }}/.github/composite-actions/upgrade-version/

        # Creating the upgrade-version composite action and printing some initial content in it
        mkdir $upgrade_version_dir_path
        touch $upgrade_version_dir_path/action.yml
        printf 'name: "Upgrade till final version and run verify tests"\nruns:\n  using: "composite"\n  steps:\n' > $upgrade_version_dir_path/action.yml

        # Length of the upgrade path
        LEN=$(yq '."upgrade-version"[${{ matrix.upgrade-path.id }}] | length' ${{ github.workspace }}/.github/configuration/upgrade-test-configuration.yml)
        if [[ $LEN -le 1 ]]
        then
            echo "ERROR: Upgrade path length less than 2" 1>&2
            exit 1
        fi
        
        # For major version upgrade, we will also need to pass the previous installed version of pg, hence keeping track of previous installed version
        # For the first upgrade the previous installed version will be the base version
        previous_installed_version=${{ inputs.base_version }}
        
        # For every next upgrade in the upgrade path, below 'For' loop will add a step in upgrade-version composite action which will upgrade the current version to next upgrade version
        for (( i=1 ; i<$LEN ; i++ )); 
        do
          # Computing input parameters that need to pass
          version_var=".\"upgrade-version\"[${{ matrix.upgrade-path.id }}][$i].version"
          upgrade_version=$(yq $version_var ${{ github.workspace }}/.github/configuration/upgrade-test-configuration.yml)
          upgrade_version_engb=".\""${upgrade_version}"\".engine_branch"
          engine_branch=$(yq $upgrade_version_engb ${{ github.workspace }}/.github/template/version-branch-template.yml)
          upgrade_version_extb=".\""${upgrade_version}"\".extension_branch"
          extension_branch=$(yq $upgrade_version_extb ${{ github.workspace }}/.github/template/version-branch-template.yml)
          is_final_ver=false; [[ i -eq $LEN-1 ]] && is_final_ver=true
          pg_old_dir=$(echo postgres$(awk -F. '{print $1}' <<< $previous_installed_version))
          pg_new_dir=$(echo postgres$(awk -F. '{print $1}' <<< $upgrade_version))
          
          upgrade_type_var=".\"upgrade-version\"[${{ matrix.upgrade-path.id }}][$i].\"upgrade-type\"" 
          upgrade_type=$(yq $upgrade_type_var ${{ github.workspace }}/.github/configuration/upgrade-test-configuration.yml)
          uses_file=./.github/composite-actions/$upgrade_type-version-upgrade-util

          temp="&& steps.upgrade-version-$(($i-1)).outcome == 'success'"; [[ i -eq 1 ]] && temp=""
          # As we are not creating a new directory for minor version upgrade, pg_old_dir and pg_new_dir must be same
          if [[ $upgrade_type == 'minor' ]]
          then
            pg_new_dir=$pg_old_dir
          fi

          # Appending upgrade step in upgrade-version composite action based on upgrade type
          if [[ $upgrade_type == 'major' ]]
          then
            printf "    - name: Upgrade Version to $upgrade_version\n      id: upgrade-version-$i\n      if: always() $temp\n      uses: ${uses_file}\n      with: \n        engine_branch: ${engine_branch}\n        extension_branch: ${extension_branch}\n        is_final_ver: ${is_final_ver}\n        pg_old_dir: ${pg_old_dir}\n        pg_new_dir: ${pg_new_dir}\n\n"   >> $upgrade_version_dir_path/action.yml
          else
            printf "    - name: Upgrade Version to $upgrade_version\n      id: upgrade-version-$i\n      if: always() $temp\n      uses: ${uses_file}\n      with: \n        engine_branch: ${engine_branch}\n        extension_branch: ${extension_branch}\n        is_final_ver: ${is_final_ver}\n        install_dir: ${pg_new_dir}\n\n"   >> $upgrade_version_dir_path/action.yml
          fi

          previous_installed_version=$upgrade_version
        done
      shell: bash
          
          
