name: 'Major Version Upgrade Utility'
inputs:
  engine_branch: 
    description: "Engine Branch"
    required: true
  extension_branch: 
    description: "Extension Branch"
    required: true
  is_final_ver:
    description: "Is this the final version"
    required: true
  install_dir:
    description: "Install new version in this directory"
    required: true

runs:
  using: "composite"
  steps:    
    - name: Build Modified Postgres using latest version
      id: build-modified-postgres-new
      if: always()
      run: |
        cd ../postgresql_modified_for_babelfish
        git checkout ${{ inputs.engine_branch }}
        ./configure --prefix=$HOME/${{ inputs.install_dir }}/ --with-python PYTHON=/usr/bin/python2.7 --enable-debug CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu
        make clean
        make -j 4 2>error.txt
        make install
        make check
        cd contrib && make && sudo make install
      shell: bash

    - name: Copy ANTLR
      id: copy-antlr
      if: always() && steps.build-modified-postgres-new.outcome == 'success'
      run: cp "/usr/local/lib/libantlr4-runtime.so.4.9.3" ~/${{ inputs.install_dir }}/lib/
      shell: bash

    - name: Build Extensions using latest version
      id: build-extensions-new
      if: always() && steps.copy-antlr.outcome == 'success'
      uses: ./.github/composite-actions/build-extensions
      with:
        install_dir: ${{ inputs.install_dir }}

    - name: Setup new data directory
      id: setup-new-datadir
      if: always() && steps.build-extensions-new.outcome == 'success'
      run: |
        cd ~
        ~/${{ inputs.install_dir }}/bin/initdb -D ~/${{ inputs.install_dir }}/data
        cd ~/${{ inputs.install_dir }}/data
        sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
        sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds'/g" postgresql.conf
        ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
        sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
      shell: bash

    - name: Run pg_upgrade
      id: run-pg_upgrade
      if: always() && steps.setup-new-datadir.outcome == 'success'
      uses: ./.github/composite-actions/run-pg-upgrade
      with:
        migration_mode: 'multi-db'

    - name: Change migration mode to multi-db
      id: change-migration-mode
      run: |
        sudo ~/${{ inputs.install_dir}}/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.migration_mode = 'multi-db';"
        sudo ~/${{ inputs.install_dir}}/bin/psql -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
      shell: bash

    # - name: Run JDBC Standard Tests
    #   id: jdbc-standard-tests
    #   if: always() && steps.run-pg_upgrade.outcome == 'success' && inputs.is_final_ver
    #   run: |
    #     cd test/JDBC/
    #     mvn test
    #   shell: bash

    - uses: actions/checkout@v2

    - name: Run JDBC Upgrade Tests
      if: always() && steps.change-migration-mode.outcome == 'success' && inputs.is_final_ver
      id: jdbc-upgrade-tests
      run: |
        cd test/JDBC/
        sudo sed -i 's/inputFilesPath = input/inputFilesPath = upgrade\/verification/g' src/main/resources/config.txt
        mvn test
        sudo sed -i 's/inputFilesPath = upgrade\/verification/inputFilesPath = input/g' src/main/resources/config.txt
      shell: bash
    
    - name: Run JDBC Cleanup Tests
      id: jdbc-cleanup-tests
      if: always() && steps.jdbc-upgrade-tests.outcome == 'success' && inputs.is_final_ver
      run: |
        cd test/JDBC
        sudo sed -i 's/inputFilesPath = input/inputFilesPath = upgrade\/cleanup/g' src/main/resources/config.txt
        mvn test
        sudo sed -i 's/inputFilesPath = upgrade\/cleanup/inputFilesPath = input/g' src/main/resources/config.txt
      shell: bash