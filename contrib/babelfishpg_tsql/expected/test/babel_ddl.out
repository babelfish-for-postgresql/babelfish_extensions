-- CLUSTERED INDEX / NONCLUSTERED IDNEX
create table t1 ( a int, b int);
create nonclustered index t1_idx1 on t1 (a);
ERROR:  syntax error at or near "nonclustered"
LINE 1: create nonclustered index t1_idx1 on t1 (a);
               ^
create clustered index t1_idx2 on t1(a);
ERROR:  syntax error at or near "clustered"
LINE 1: create clustered index t1_idx2 on t1(a);
               ^
create table t2 ( a int, b int, primary key nonclustered (a));
ERROR:  syntax error at or near "nonclustered"
LINE 1: create table t2 ( a int, b int, primary key nonclustered (a)...
                                                    ^
create table t3 ( a int, b int, primary key clustered (a));
ERROR:  syntax error at or near "clustered"
LINE 1: create table t3 ( a int, b int, primary key clustered (a));
                                                    ^
create table t4 ( a int, b int, unique nonclustered (a));
ERROR:  syntax error at or near "nonclustered"
LINE 1: create table t4 ( a int, b int, unique nonclustered (a));
                                               ^
create table t5 ( a int, b int, unique clustered (a));
ERROR:  syntax error at or near "clustered"
LINE 1: create table t5 ( a int, b int, unique clustered (a));
                                               ^
create table t6 ( a int primary key nonclustered, b int);
ERROR:  syntax error at or near "nonclustered"
LINE 1: create table t6 ( a int primary key nonclustered, b int);
                                            ^
create table t7 ( a int primary key clustered, b int);
ERROR:  syntax error at or near "clustered"
LINE 1: create table t7 ( a int primary key clustered, b int);
                                            ^
create table t8 ( a int unique nonclustered, b int);
ERROR:  syntax error at or near "nonclustered"
LINE 1: create table t8 ( a int unique nonclustered, b int);
                                       ^
create table t9 ( a int unique clustered, b int);
ERROR:  syntax error at or near "clustered"
LINE 1: create table t9 ( a int unique clustered, b int);
                                       ^
set babelfishpg_tsql.sql_dialect = "tsql";
create index t1_idx1 on t1 (a);
create index t1_idx2 on t1(a);
create table t2 ( a int, b int, primary key (a));
create table t3 ( a int, b int, primary key (a));
create table t4 ( a int, b int, unique (a));
create table t5 ( a int, b int, unique (a));
create table t6 ( a int primary key, b int);
create table t7 ( a int primary key, b int);
create table t8 ( a int unique not null, b int);
create table t9 ( a int unique not null, b int);
-- CREATE INDEX ... ON <filegroup> syntax
create index t1_idx3 on t1 (a) on [primary];
create index t1_idx4 on t1 (a) on "default";
-- CREATE TABLE WITH (<table_option> [,...n]) syntax
create table t10 (a int) 
with (fillfactor = 90, FILETABLE_COLLATE_FILENAME = database_default);
create table t11 (a int) 
with (data_compression = row on partitions (2, 4, 6 to 8));
create table t12 (a int)
with (system_versioning = on (history_table = aaa.bbb, data_consistency_check = off));
create table t13 (a int)
with (remote_data_archive = on (filter_predicate = null, migration_state = outbound));
create table t14 (a int)
with (data_deletion = on (filter_column = a, retention_period = 14 day));
-- CREATE INDEX WHERE... WITH (<index_option> [,...n]) syntax
create index t1_idx5 on t1(a) where a is not null 
with (pad_index = off, fillfactor = 90, maxdop = 1, sort_in_tempdb = off, max_duration = 2 minutes);
create index t1_idx6 on t1(a)
with (data_compression = page on partitions (2, 4, 6 to 8));
-- CREATE COLUMNSTORE INDEX
create columnstore index t1_idx7 on t1 (a) with (drop_existing = on);
NOTICE:  The COLUMNSTORE option is currently ignored
create clustered columnstore index t1_idx8 on t1 (a) on [primary];
NOTICE:  The COLUMNSTORE option is currently ignored
-- CREATE TABLE... WITH FILLFACTOR = num
create table t15 (a int primary key with fillfactor=50);
-- ALTER TABLE... WITH FILLFACTOR = num
create table t16 (a int not null);
alter table t16 add primary key (a) with fillfactor=50;
-- check property of the index
select indexname, indexdef from pg_indexes where tablename like 't_' order by indexname;
                 indexname                 |                                                                                             indexdef                                                                                              
-------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 t1_idx1t18e881e6977bd6b8cbb78725b3a8ac988 | CREATE INDEX t1_idx1t18e881e6977bd6b8cbb78725b3a8ac988 ON public.t1 USING btree (a)
 t1_idx2t117dbbb74ced1fe936cdf7cd7baeff266 | CREATE INDEX t1_idx2t117dbbb74ced1fe936cdf7cd7baeff266 ON public.t1 USING btree (a)
 t1_idx3t19eceb46c036c3c1bd6895a34ec3c93f1 | CREATE INDEX t1_idx3t19eceb46c036c3c1bd6895a34ec3c93f1 ON public.t1 USING btree (a)
 t1_idx4t1fb4b953a652720bfa47919dff09b172e | CREATE INDEX t1_idx4t1fb4b953a652720bfa47919dff09b172e ON public.t1 USING btree (a)
 t1_idx5t1b35d191ff61a4ba407b80329c7ac459a | CREATE INDEX t1_idx5t1b35d191ff61a4ba407b80329c7ac459a ON public.t1 USING btree (a) WITH (pad_index=off, fillfactor='90', maxdop='1', sort_in_tempdb=off, max_duration='2') WHERE (a IS NOT NULL)
 t1_idx6t144818325f74bdb1fd5bca880a0aef84c | CREATE INDEX t1_idx6t144818325f74bdb1fd5bca880a0aef84c ON public.t1 USING btree (a) WITH (data_compression=page)
 t1_idx7t1a053e704a0d67d6d079dd35cca63a489 | CREATE INDEX t1_idx7t1a053e704a0d67d6d079dd35cca63a489 ON public.t1 USING btree (a) WITH (drop_existing='on')
 t1_idx8t171284af2ea6a5a7032b931c5725d1fc4 | CREATE INDEX t1_idx8t171284af2ea6a5a7032b931c5725d1fc4 ON public.t1 USING btree (a)
 t2_pkey                                   | CREATE UNIQUE INDEX t2_pkey ON public.t2 USING btree (a)
 t3_pkey                                   | CREATE UNIQUE INDEX t3_pkey ON public.t3 USING btree (a)
 t4_a_key                                  | CREATE UNIQUE INDEX t4_a_key ON public.t4 USING btree (a)
 t5_a_key                                  | CREATE UNIQUE INDEX t5_a_key ON public.t5 USING btree (a)
 t6_pkey                                   | CREATE UNIQUE INDEX t6_pkey ON public.t6 USING btree (a)
 t7_pkey                                   | CREATE UNIQUE INDEX t7_pkey ON public.t7 USING btree (a)
 t8_a_key                                  | CREATE UNIQUE INDEX t8_a_key ON public.t8 USING btree (a)
 t9_a_key                                  | CREATE UNIQUE INDEX t9_a_key ON public.t9 USING btree (a)
(16 rows)

-- CREATE TABLE(..., { PRIMARY KEY | UNIQUE } ...
--                   ON { partition_scheme | filegroup | "default" }) syntax
--                   ^
create table t17(a int, primary key clustered (a) on [PRIMARY]);
create table t18(a int, primary key clustered (a) on [PRIMARY]);
create table t19(a int, unique clustered (a) on [PRIMARY]);
create table t20(a int, unique clustered (a) on [PRIMARY]);
-- ALTER TABLE ... ADD [CONSTRAINT ...] DEFAULT ... FOR ...
create table t21 (a int, b int);
alter table t21 add default 99 for a;
NOTICE:  DEFAULT added. To drop the default, use ALTER TABLE...ALTER COLUMN...DROP DEFAULT; it cannot be dropped by name
insert into t21(b) values (10);
select * from t21;
 a  | b  
----+----
 99 | 10
(1 row)

alter table t21 alter a drop default;
alter table t21 add constraint dflt11 default 11 for a;
NOTICE:  DEFAULT added. To drop the default, use ALTER TABLE...ALTER COLUMN...DROP DEFAULT; it cannot be dropped by name
insert into t21(b) values (20);
select * from t21;
 a  | b  
----+----
 99 | 10
 11 | 20
(2 rows)

-- Invalid default value
alter table t21 add default 'test' for a;
NOTICE:  DEFAULT added. To drop the default, use ALTER TABLE...ALTER COLUMN...DROP DEFAULT; it cannot be dropped by name
ERROR:  invalid input syntax for type integer: "test"
-- Invalid column
alter table t21 add default 99 for c;
NOTICE:  DEFAULT added. To drop the default, use ALTER TABLE...ALTER COLUMN...DROP DEFAULT; it cannot be dropped by name
ERROR:  column "c" of relation "t21" does not exist
-- Invalid table
alter table t_invalid add default 99 for a;
NOTICE:  DEFAULT added. To drop the default, use ALTER TABLE...ALTER COLUMN...DROP DEFAULT; it cannot be dropped by name
ERROR:  relation "t_invalid" does not exist
-- ALTER TABLE ... WITH [NO]CHECK ADD CONSTRAINT ...
alter table t21 with check add constraint chk1 check (a > 0);  -- add chk1 and enable it
NOTICE:  The WITH CHECK/NOCHECK option is currently ignored
alter table t21 with nocheck add constraint chk2 check (b > 0);  -- add chk2 and disable it
NOTICE:  The WITH CHECK/NOCHECK option is currently ignored
insert into t21 values (1, 1);
-- error, not fulfilling constraint chk1
insert into t21 values (0, 1);
ERROR:  new row for relation "t21" violates check constraint "chk1t21848ea8bb1121ee393ad72ae0d412d8d2"
DETAIL:  Failing row contains (0, 1).
-- should pass after CHECK/NOCHECK is fully supported
insert into t21 values (1, 0);
ERROR:  new row for relation "t21" violates check constraint "chk2t21e79a26fb83f057113598e77ab0b1983d"
DETAIL:  Failing row contains (1, 0).
select * from t21;
 a  | b  
----+----
 99 | 10
 11 | 20
  1 |  1
(3 rows)

-- ALTER TABLE ... [NO]CHECK CONSTRAINT ...
-- should pass after CHECK/NOCHECK is fully supported
alter table t21 nocheck constraint chk1;  -- disable chk1
NOTICE:  The CHECK/NOCHECK option is currently ignored
alter table t21 check constraint chk2;  -- enable chk2
NOTICE:  The CHECK/NOCHECK option is currently ignored
-- CREATE TABLE ... ( a int identity(...) NOT FOR REPLICATION)
create table t22 (a int identity(1,1) NOT FOR REPLICATION);
create table t23 (a int identity(1,1) NOT FOR REPLICATION NOT NULL);
-- ROWGUIDCOL syntax support
create table t24 (a uniqueidentifier ROWGUIDCOL);
create table t25 (a int);
alter table t25 add b uniqueidentifier ROWGUIDCOL;
-- computed columns
-- CREATE TABLE(..., <column_name> AS <computed_column_expression>
--								   ^	[ PERSISTED ] <column constraints>)
create table computed_column_t1 (a nvarchar(10), b  AS substring(a,1,3) UNIQUE NOT NULL);
insert into computed_column_t1 values('abcd');
select * from computed_column_t1;
  a   |  b  
------+-----
 abcd | abc
(1 row)

-- test whether other constraints are working with computed columns
insert into computed_column_t1 values('abcd'); -- throws error
ERROR:  duplicate key value violates unique constraint "computed_column_t1_b_key"
DETAIL:  Key (b)=(abc) already exists.
-- check PERSISTED keyword
-- should be able to use columns from left and right in the expression
create table computed_column_t2 (a int, b  AS (a + c) / 4 PERSISTED, c int);
insert into computed_column_t2 (a,c) values (12, 12);
select * from computed_column_t2;
 a  | b | c  
----+---+----
 12 | 6 | 12
(1 row)

-- should throw error - order matters
create table computed_column_error (a int, b  AS a/4 NOT NULL PERSISTED);
ERROR:  syntax error at or near "PERSISTED"
LINE 1: ... computed_column_error (a int, b  AS a/4 NOT NULL PERSISTED)...
                                                             ^
-- should throw error if postgres syntax is used in TSQL dialect
create table computed_column_error (a int, b numeric generated always as (a/4) stored);
ERROR:  This syntax is only valid when babelfishpg_tsql.sql_dialect is postgres
LINE 1: ...computed_column_error (a int, b numeric generated always as ...
                                                             ^
-- should throw error if there is any error in computed column expression
create table computed_column_error (a nvarchar(10), b  AS non_existant_function(a,1,3) UNIQUE NOT NULL);
ERROR:  function non_existant_function(nvarchar, integer, integer) does not exist
LINE 1: ...able computed_column_error (a nvarchar(10), b  AS non_exista...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- should throw error in case of nested computed columns
create table computed_column_error (a int, b as c, c as a);
ERROR:  computed column "c" in table "computed_column_error" is not allowed to be used in another computed-column definition
LINE 1: create table computed_column_error (a int, b as c, c as a);
                                                        ^
create table computed_column_error (a int, b as b + 1);
ERROR:  computed column "b" in table "computed_column_error" is not allowed to be used in another computed-column definition
LINE 1: create table computed_column_error (a int, b as b + 1);
                                                        ^
-- in case of multiple computed column, the entire statement should be rolled
-- back even when the last one throws error
create table computed_column_error (a int, b as a, c as b);
ERROR:  computed column "b" in table "computed_column_error" is not allowed to be used in another computed-column definition
LINE 1: create table computed_column_error (a int, b as a, c as b);
                                                                ^
select * from computed_column_error;
ERROR:  relation "computed_column_error" does not exist
LINE 1: select * from computed_column_error;
                      ^
-- ALTER TABLE... ADD <column_name> AS <computed_column_expression>
--							  	    ^	[ PERSISTED ] <column constraints>)
alter table computed_column_t1 add c int;
alter table computed_column_t1 add d as c / 4;
insert into computed_column_t1(a, c) VALUES ('efgh', 12);
select * from computed_column_t1;
  a   |  b  | c  | d 
------+-----+----+---
 abcd | abc |    |  
 efgh | efg | 12 | 3
(2 rows)

--should thow error in case of nested computed columns
 alter table computed_column_t1 add e as d;
ERROR:  cannot use generated column "d" in column generation expression
DETAIL:  A generated column cannot reference another generated column.
 alter table computed_column_t1 add e as e + 1;
ERROR:  computed column "e" in table "computed_column_t1" is not allowed to be used in another computed-column definition
-- should throw error if any of the dependant columns is modified or dropped.
alter table computed_column_t1 drop column a;
ERROR:  cannot drop a column used by a generated column
DETAIL:  Column "a" is used by generated column "b".
alter table computed_column_t1 alter column a varchar;
ERROR:  cannot alter type of a column used by a generated column
DETAIL:  Column "a" is used by generated column "b".
-- should throw error as rand is non-deterministic
alter table computed_column_t1 add e as rand() persisted;
ERROR:  generation expression is not immutable
-- but rand[seed] should succeed
alter table computed_column_t1 add e as rand(1) persisted;
-- should throw error in postgres dialect
select set_config('babelfishpg_tsql.sql_dialect', 'postgres', null);
 set_config 
------------
 postgres
(1 row)

create table computed_column_error (a int, b  AS (a/4) PERSISTED NOT NULL);
ERROR:  syntax error at or near "AS"
LINE 1: create table computed_column_error (a int, b  AS (a/4) PERSI...
                                                      ^
-- since we're in postgres dialect, also check the table definition whether
-- the computed column got resolved to correct datatype
\d computed_column_t1
                                    Table "public.computed_column_t1"
 Column |       Type       | Collation | Nullable |                        Default                        
--------+------------------+-----------+----------+-------------------------------------------------------
 a      | sys.nvarchar(10) |           |          | 
 b      | sys.nvarchar     |           | not null | generated always as (sys."substring"(a, 1, 3)) stored
 c      | integer          |           |          | 
 d      | integer          |           |          | generated always as (c / 4) stored
 e      | double precision |           |          | generated always as (sys.rand(1)) stored
Indexes:
    "computed_column_t1_b_key" UNIQUE CONSTRAINT, btree (b)

set babelfishpg_tsql.sql_dialect = "tsql";
drop table t1;
drop table t2;
drop table t3;
drop table t4;
drop table t5;
drop table t6;
drop table t7;
drop table t8;
drop table t9;
drop table t10;
drop table t11;
drop table t12;
drop table t13;
drop table t14;
drop table t15;
drop table t16;
drop table t17;
drop table t18;
drop table t19;
drop table t20;
drop table t21;
drop table t22;
drop table t23;
drop table t24;
drop table t25;
drop table computed_column_t1;
drop table computed_column_t2;
