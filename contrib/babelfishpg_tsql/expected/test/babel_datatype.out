CREATE EXTENSION IF NOT EXISTS "babelfishpg_tsql" CASCADE;
NOTICE:  extension "babelfishpg_tsql" already exists, skipping
-- The default scale is 2 in PG.
select CAST('$100,123.4567' AS money);
    money    
-------------
 $100,123.46
(1 row)

-- Currency symbol followed by number without being quoted is not recognized
-- as Money in postgres dialect.
select CAST($100123.4567 AS money);
ERROR:  syntax error at or near ".4567"
LINE 1: select CAST($100123.4567 AS money);
                           ^
-- Scale changes to the sql server default 4 in tsql dialect
-- Currency symbol followed by number without being quoted is recognized
-- as Money type in tsql dialect.
set babelfishpg_tsql.sql_dialect = "tsql";
select CAST($100123.4567 AS money);
    money    
-------------
 100123.4567
(1 row)

select CAST($100123. AS money);
    money    
-------------
 100123.0000
(1 row)

select CAST($.4567 AS money);
 money  
--------
 0.4567
(1 row)

select CAST('$100,123.4567' AS money);
    money    
-------------
 100123.4567
(1 row)

-- Test numeric types with brackets
create table testing1 (a [tinyint]);
drop table testing1;
create table testing1 (a [smallint]);
drop table testing1;
create table testing1 (a [int]);
drop table testing1;
create table testing1 (a [bigint]);
drop table testing1;
create table testing1 (a [real]);
drop table testing1;
create table testing1 (a [float]);
drop table testing1;
-- Comma separated format without quote is not allowed in sql server
select CAST($100,123.4567 AS money);
ERROR:  syntax error at or near ","
LINE 1: select CAST($100,123.4567 AS money);
                        ^
-- Smallmoney in tsql dialect
select CAST($100123.4567 AS smallmoney);
 smallmoney  
-------------
 100123.4567
(1 row)

select CAST('$100,123.4567' AS smallmoney);
 smallmoney  
-------------
 100123.4567
(1 row)

-- Comma separated format without quote is not allowed in sql server
select CAST($100,123.4567 AS smallmoney);
ERROR:  syntax error at or near ","
LINE 1: select CAST($100,123.4567 AS smallmoney);
                        ^
create table testing1(mon money, smon smallmoney);
insert into testing1 (mon, smon) values ('$100,123.4567', '$123.9999');
insert into testing1 (mon, smon) values ($100123.4567, $123.9999);
select * from testing1;
     mon     |   smon   
-------------+----------
 100123.4567 | 123.9999
 100123.4567 | 123.9999
(2 rows)

select avg(CAST(mon AS numeric(38,4))), avg(CAST(smon AS numeric(38,4))) from testing1;
         avg         |         avg          
---------------------+----------------------
 100123.456700000000 | 123.9999000000000000
(1 row)

select mon+smon as total from testing1;
    total    
-------------
 100247.4566
 100247.4566
(2 rows)

-- Comma separated format without quote is not allowed in sql server
insert into testing1 (mon, smon) values ($100,123.4567, $123.9999);
ERROR:  INSERT has more expressions than target columns
LINE 1: ... into testing1 (mon, smon) values ($100,123.4567, $123.9999)...
                                                             ^
-- Test other allowed currency symbols with/without quote
select CAST(€100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST('€100.123' AS money);
  money   
----------
 100.1230
(1 row)

select CAST(¢100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(£100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST('£100.123' AS money);
  money   
----------
 100.1230
(1 row)

select CAST(¤100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(¥100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(৲100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(৳100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(฿100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(៛100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₠100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₡100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₢100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₣100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₤100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₥100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₦100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₧100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₨100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₩100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₪100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₫100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₭100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₮100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₯100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₰100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(₱100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(﷼100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(﹩100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(＄100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(￠100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(￡100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST(￥100.123 AS money);
  money   
----------
 100.1230
(1 row)

select CAST('￥100.123' AS money);
  money   
----------
 100.1230
(1 row)

select CAST(￦100.123 AS money);
  money   
----------
 100.1230
(1 row)

-- Test unsupoorted currency symbol
select CAST(￩100.123 AS money);
ERROR:  syntax error at or near ".123"
LINE 1: select CAST(￩100.123 AS money);
                        ^
select CAST('￩100.123' AS money);
  money   
----------
 100.1230
(1 row)

-- Test that space is allowed between currency symbol and number, this is
-- a TSQL behavior
select CAST($   123.5 AS money);
  money   
----------
 123.5000
(1 row)

select CAST('$    123.5' AS money);
  money   
----------
 123.5000
(1 row)

-- Test inexact result mutliply/divide money with money, to match
-- SQL Server behavior
select CAST(100 AS money)/CAST(339 AS money)*CAST(10000 AS money);
 ?column?  
-----------
 2949.0000
(1 row)

-- Test postgres dialect
-- Test currency symbol without quote is not allowed in postgres dialect
reset babelfishpg_tsql.sql_dialect;
select CAST(€100.123 AS money);
ERROR:  syntax error at or near ".123"
LINE 1: select CAST(€100.123 AS money);
                        ^
-- Test exact result multiply/divide money with money in postgres dialect
select CAST(100 AS money)/CAST(339 AS money)*CAST(10000 AS money);
 ?column?  
-----------
 $2,949.85
(1 row)

-- Clean up
drop table testing1;
-- BABEL-109 test no more not unique operator error caused by fixeddeciaml
select CAST(2 AS numeric) > 1;
 ?column? 
----------
 t
(1 row)

select CAST(2 AS decimal) > 1;
 ?column? 
----------
 t
(1 row)

-- Test that numeric > int and fixeddecimal > int is different
select CAST(2.00001 AS numeric) > 2;
 ?column? 
----------
 t
(1 row)

select CAST(2.00001 AS sys.fixeddecimal) > 2;
 ?column? 
----------
 f
(1 row)

-- test TSQL Money (based on fixeddecimal) cross datatype operators
set babelfishpg_tsql.sql_dialect = "tsql";
select CAST(2 AS money) > 1;
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) > CAST(1 AS int);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) > CAST(1 AS int2);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) > CAST(1 AS int4);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) > CAST(1 AS numeric);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) > CAST(1 AS decimal);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) >= 1;
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) >= CAST(1 AS int);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) >= CAST(1 AS int2);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) >= CAST(1 AS int4);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) >= CAST(1 AS numeric);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) >= CAST(1 AS decimal);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) < 1;
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) < CAST(1 AS int);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) < CAST(1 AS int2);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) < CAST(1 AS int4);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) < CAST(1 AS numeric);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) < CAST(1 AS decimal);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <= 1;
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <= CAST(1 AS int);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <= CAST(1 AS int2);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <= CAST(1 AS int4);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <= CAST(1 AS numeric);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <= CAST(1 AS decimal);
 ?column? 
----------
 f
(1 row)

select CAST(2 AS money) <> 1;
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) <> CAST(1 AS int);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) <> CAST(1 AS int2);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) <> CAST(1 AS int4);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) <> CAST(1 AS numeric);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) <> CAST(1 AS decimal);
 ?column? 
----------
 t
(1 row)

select CAST(2 AS money) + 1;
 ?column? 
----------
 3.0000
(1 row)

select CAST(2 AS money) + CAST(1 AS int);
 ?column? 
----------
 3.0000
(1 row)

select CAST(2 AS money) + CAST(1 AS int2);
 ?column? 
----------
 3.0000
(1 row)

select CAST(2 AS money) + CAST(1 AS int4);
 ?column? 
----------
 3.0000
(1 row)

select CAST(2 AS money) + CAST(1 AS numeric);
 ?column? 
----------
   3.0000
(1 row)

select CAST(2 AS money) + CAST(1 AS decimal);
 ?column? 
----------
   3.0000
(1 row)

select CAST(2 AS money) - 1;
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) - CAST(1 AS int);
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) - CAST(1 AS int2);
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) - CAST(1 AS int4);
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) - CAST(1 AS numeric);
 ?column? 
----------
   1.0000
(1 row)

select CAST(2 AS money) - CAST(1 AS decimal);
 ?column? 
----------
   1.0000
(1 row)

select CAST(2 AS money) * 2;
 ?column? 
----------
 4.0000
(1 row)

select CAST(2 AS money) * CAST(2 AS int);
 ?column? 
----------
 4.0000
(1 row)

select CAST(2 AS money) * CAST(2 AS int2);
 ?column? 
----------
 4.0000
(1 row)

select CAST(2 AS money) * CAST(2 AS int4);
 ?column? 
----------
 4.0000
(1 row)

select CAST(2 AS money) * CAST(2 AS numeric);
 ?column? 
----------
   4.0000
(1 row)

select CAST(2 AS money) * CAST(2 AS decimal);
 ?column? 
----------
   4.0000
(1 row)

select CAST(2 AS money) / 0.5;
      ?column?      
--------------------
 4.0000000000000000
(1 row)

select CAST(2 AS money) / CAST(2 AS int);
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) / CAST(2 AS int2);
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) / CAST(2 AS int4);
 ?column? 
----------
 1.0000
(1 row)

select CAST(2 AS money) / CAST(0.5 AS numeric(4,2));
      ?column?      
--------------------
 4.0000000000000000
(1 row)

select CAST(2 AS money) / CAST(0.5 AS decimal(4,2));
      ?column?      
--------------------
 4.0000000000000000
(1 row)

reset babelfishpg_tsql.sql_dialect;
-- Test DATE, DATETIME, DATETIMEOFFSET, DATETIME2
set babelfishpg_tsql.sql_dialect = "tsql";
-- DATE DATETIME, DATETIMEOFFSET, DATETIME2 and SMALLDATETIME are defined in tsql dialect
select CAST('2020-03-15' AS date);
    date    
------------
 03-15-2020
(1 row)

select CAST('2020-03-15 09:00:00+8' AS datetimeoffset);
         datetimeoffset          
---------------------------------
 Sun Mar 15 09:00:00 2020 +08:00
(1 row)

select CAST('2020-03-15 09:00:00' AS datetime2);
        datetime2         
--------------------------
 Sun Mar 15 09:00:00 2020
(1 row)

select CAST('2020-03-15 09:00:00' AS smalldatetime);
      smalldatetime       
--------------------------
 Sun Mar 15 09:00:00 2020
(1 row)

-- test the range of date
select CAST('0001-01-01' AS date);
    date    
------------
 01-01-0001
(1 row)

select CAST('9999-12-31' AS date);
    date    
------------
 12-31-9999
(1 row)

-- test the range of datetime2
select CAST('0001-01-01 12:00:00.12345' AS datetime2);
           datetime2            
--------------------------------
 Mon Jan 01 12:00:00.12345 0001
(1 row)

select CAST('9999-12-31 12:00:00.12345' AS datetime2);
           datetime2            
--------------------------------
 Fri Dec 31 12:00:00.12345 9999
(1 row)

-- precision
select CAST('2020-03-15 09:00:00+8' AS datetimeoffset(7)) ;
WARNING:  TIMESTAMP(7) WITH TIME ZONE precision reduced to maximum allowed, 6
LINE 1: select CAST('2020-03-15 09:00:00+8' AS datetimeoffset(7)) ;
                                               ^
         datetimeoffset          
---------------------------------
 Sun Mar 15 09:00:00 2020 +08:00
(1 row)

create table testing1(ts DATETIME, tstz DATETIMEOFFSET(7));
WARNING:  TIMESTAMP(7) WITH TIME ZONE precision reduced to maximum allowed, 6
LINE 1: create table testing1(ts DATETIME, tstz DATETIMEOFFSET(7));
                                                ^
WARNING:  TIMESTAMP(7) WITH TIME ZONE precision reduced to maximum allowed, 6
LINE 1: create table testing1(ts DATETIME, tstz DATETIMEOFFSET(7));
                                                ^
WARNING:  TIMESTAMP(7) WITH TIME ZONE precision reduced to maximum allowed, 6
insert into testing1 (ts, tstz) values ('2020-03-15 09:00:00', '2020-03-15 09:00:00+8');
select * from testing1;
            ts            |              tstz               
--------------------------+---------------------------------
 Sun Mar 15 09:00:00 2020 | Sun Mar 15 09:00:00 2020 +08:00
(1 row)

drop table testing1;
select CAST('2020-03-15 09:00:00' AS datetime2(7));
WARNING:  TIMESTAMP(7) precision reduced to maximum allowed, 6
LINE 1: select CAST('2020-03-15 09:00:00' AS datetime2(7));
                                             ^
        datetime2         
--------------------------
 Sun Mar 15 09:00:00 2020
(1 row)

select CAST('2020-03-15 09:00:00.123456' AS datetime2(3));
          datetime2           
------------------------------
 Sun Mar 15 09:00:00.123 2020
(1 row)

select CAST('2020-03-15 09:00:00.123456' AS datetime2(0));
        datetime2         
--------------------------
 Sun Mar 15 09:00:00 2020
(1 row)

select CAST('2020-03-15 09:00:00.123456' AS datetime2(-1));
ERROR:  Specified scale -1 is invalid. 'datetime2' datatype must have scale between 0 and 7
create table testing1(ts DATETIME, tstz DATETIME2(7));
WARNING:  TIMESTAMP(7) precision reduced to maximum allowed, 6
LINE 1: create table testing1(ts DATETIME, tstz DATETIME2(7));
                                                ^
WARNING:  TIMESTAMP(7) precision reduced to maximum allowed, 6
LINE 1: create table testing1(ts DATETIME, tstz DATETIME2(7));
                                                ^
WARNING:  TIMESTAMP(7) precision reduced to maximum allowed, 6
insert into testing1 (ts, tstz) values ('2020-03-15 09:00:00', '2020-03-15 09:00:00');
select * from testing1;
            ts            |           tstz           
--------------------------+--------------------------
 Sun Mar 15 09:00:00 2020 | Sun Mar 15 09:00:00 2020
(1 row)

drop table testing1;
-- DATETIME, DATETIMEOFFSET, DATETIME2 and SMALLDATETIME are not defined in
-- postgres dialect
SELECT set_config('babelfishpg_tsql.sql_dialect', 'postgres', false);
 set_config 
------------
 postgres
(1 row)

select CAST('2020-03-15 09:00:00+8' AS datetimeoffset);
ERROR:  type "datetimeoffset" does not exist
LINE 1: select CAST('2020-03-15 09:00:00+8' AS datetimeoffset);
                                               ^
create table testing1(ts DATETIME);
ERROR:  type "datetime" does not exist
LINE 1: create table testing1(ts DATETIME);
                                 ^
create table testing1(tstz DATETIMEOFFSET);
ERROR:  type "datetimeoffset" does not exist
LINE 1: create table testing1(tstz DATETIMEOFFSET);
                                   ^
select CAST('2020-03-15 09:00:00' AS datetime2);
ERROR:  type "datetime2" does not exist
LINE 1: select CAST('2020-03-15 09:00:00' AS datetime2);
                                             ^
create table testing1(ts SMALLDATETIME);
ERROR:  type "smalldatetime" does not exist
LINE 1: create table testing1(ts SMALLDATETIME);
                                 ^
create table testing1(tstz DATETIME2);
ERROR:  type "datetime2" does not exist
LINE 1: create table testing1(tstz DATETIME2);
                                   ^
-- Test DATETIME, DATETIMEOFFSET, DATETIME2 and SMALLDATETIME can be used as identifier
create table testing1(DATETIME int);
insert into testing1 (DATETIME) values (1);
select * from testing1;
 datetime 
----------
        1
(1 row)

drop table testing1;
create table testing1(DATETIMEOFFSET int);
insert into testing1 (DATETIMEOFFSET) values (1);
select * from testing1;
 datetimeoffset 
----------------
              1
(1 row)

drop table testing1;
create table testing1(DATETIME2 int);
insert into testing1 (DATETIME2) values (1);
select * from testing1;
 datetime2 
-----------
         1
(1 row)

drop table testing1;
create table testing1(SMALLDATETIME int);
insert into testing1 (SMALLDATETIME) values (1);
select * from testing1;
 smalldatetime 
---------------
             1
(1 row)

set babelfishpg_tsql.sql_dialect = 'tsql';
insert into testing1 (SMALLDATETIME) values (2);
select * from testing1;
 smalldatetime 
---------------
             1
             2
(2 rows)

-- Test conversion between DATE and other date/time types
select CAST(CAST('2020-03-15' AS date) AS datetime);
         datetime         
--------------------------
 Sun Mar 15 00:00:00 2020
(1 row)

select CAST(CAST('2020-03-15' AS date) AS smalldatetime);
      smalldatetime       
--------------------------
 Sun Mar 15 00:00:00 2020
(1 row)

select CAST(CAST('2020-03-15' AS date) AS datetimeoffset(3));
         datetimeoffset          
---------------------------------
 Sun Mar 15 00:00:00 2020 +00:00
(1 row)

select CAST(CAST('2020-03-15' AS date) AS datetime2(3));
        datetime2         
--------------------------
 Sun Mar 15 00:00:00 2020
(1 row)

-- Clean up
reset babelfishpg_tsql.sql_dialect;
drop table testing1;
-- Test SYS.NCHAR, SYS.NVARCHAR and SYS.VARCHAR
-- nchar is already available in postgres dialect
select CAST('£' AS nchar(1));
 bpchar 
--------
 £
(1 row)

-- nvarchar is not available in postgres dialect
select CAST('£' AS nvarchar);
ERROR:  type "nvarchar" does not exist
LINE 1: select CAST('£' AS nvarchar);
                           ^
-- both are available in tsql dialect
set babelfishpg_tsql.sql_dialect = 'tsql';
select CAST('£' AS nchar(2));
 nchar 
-------
 £ 
(1 row)

select CAST('£' AS nvarchar(2));
 nvarchar 
----------
 £
(1 row)

-- multi-byte character doesn't fit in nchar(1) in tsql if it
-- would require a UTF16-surrogate-pair on output
select CAST('£' AS char(1));			-- allowed
 bpchar 
--------
 £
(1 row)

select CAST('£' AS sys.nchar(1));		-- allowed
 nchar 
-------
 £
(1 row)

select CAST('£' AS sys.nvarchar(1));	-- allowed
 nvarchar 
----------
 £
(1 row)

select CAST('£' AS sys.varchar(1));		-- allowed
 varchar 
---------
 £
(1 row)

-- Check that things work the same in postgres dialect
reset babelfishpg_tsql.sql_dialect;
select CAST('£' AS char(1));
 bpchar 
--------
 £
(1 row)

select CAST('£' AS sys.nchar(1));
 nchar 
-------
 £
(1 row)

select CAST('£' AS sys.nvarchar(1));
 nvarchar 
----------
 £
(1 row)

select CAST('£' AS sys.varchar(1));
 varchar 
---------
 £
(1 row)

set babelfishpg_tsql.sql_dialect = 'tsql';
-- truncate input on explicit cast
select CAST('ab' AS char(1));
 bpchar 
--------
 a
(1 row)

select CAST('ab' AS nchar(1));
 nchar 
-------
 a
(1 row)

select CAST('ab' AS nvarchar(1));
 nvarchar 
----------
 a
(1 row)

select CAST('ab' AS sys.varchar(1));
 varchar 
---------
 a
(1 row)

-- default length of nchar/char is 1 in tsql (and pg)
create table testing1(col nchar);
reset babelfishpg_tsql.sql_dialect;
\d testing1;
                 Table "public.testing1"
 Column |      Type      | Collation | Nullable | Default 
--------+----------------+-----------+----------+---------
 col    | sys."nchar"(1) |           |          | 

set babelfishpg_tsql.sql_dialect = "tsql";
-- check length at insert
insert into testing1 (col) select 'a';
insert into testing1 (col) select '£';
insert into testing1 (col) select 'ab';
ERROR:  value too long for type character(1)
-- space is automatically truncated
insert into testing1 (col) select 'c ';
select * from testing1;
 col 
-----
 a
 £
 c
(3 rows)

-- default length of nvarchar in tsql is 1
create table testing2(col nvarchar);
insert into testing2 (col) select 'a';
insert into testing2 (col) select '£';
insert into testing2 (col) select 'ab';
ERROR:  value too long for type character varying(1)
-- space is automatically truncated
insert into testing2 (col) select 'c ';
select * from testing2;
 col 
-----
 a
 £
 c
(3 rows)

-- default length of varchar in tsql is 1
create table testing4(col sys.varchar);
insert into testing4 (col) select 'a';
insert into testing4 (col) select '£';
insert into testing4 (col) select 'ab';
ERROR:  value too long for type character varying(1)
-- space is automatically truncated
insert into testing4 (col) select 'c ';
insert into testing2 (col) select '£ ';
select * from testing4;
 col 
-----
 a
 £
 c
(3 rows)

-- test sys.varchar(max) and sys.nvarchar(max) syntax is allowed in tsql dialect
select CAST('abcdefghijklmn' AS sys.varchar(max));
    varchar     
----------------
 abcdefghijklmn
(1 row)

select CAST('abcdefghijklmn' AS varchar(max));
    varchar     
----------------
 abcdefghijklmn
(1 row)

select CAST('abcdefghijklmn' AS sys.nvarchar(max));
    nvarchar    
----------------
 abcdefghijklmn
(1 row)

select CAST('abcdefghijklmn' AS nvarchar(max));
    nvarchar    
----------------
 abcdefghijklmn
(1 row)

-- test char(max), nchar(max) is invalid syntax in tsql dialect
select cast('abc' as char(max));
ERROR:  Incorrect syntax near the keyword 'bpchar'.
select cast('abc' as nchar(max));
ERROR:  Incorrect syntax near the keyword 'nchar'.
-- test max can still be used as an identifier
create table max (max int);
insert into max (max) select 100;
select * from max;
 max 
-----
 100
(1 row)

drop table max;
-- test sys.varchar(max) and nvarchar(max) syntax is not allowed in postgres dialect
reset babelfishpg_tsql.sql_dialect;
select CAST('abcdefghijklmn' AS sys.varchar(max));
ERROR:  invalid input syntax for type integer: "max"
LINE 1: select CAST('abcdefghijklmn' AS sys.varchar(max));
                                        ^
select CAST('abcdefghijklmn' AS varchar(max));
ERROR:  syntax error at or near "max"
LINE 1: select CAST('abcdefghijklmn' AS varchar(max));
                                                ^
select CAST('abcdefghijklmn' AS sys.nvarchar(max));
ERROR:  invalid input syntax for type integer: "max"
LINE 1: select CAST('abcdefghijklmn' AS sys.nvarchar(max));
                                        ^
select CAST('abcdefghijklmn' AS nvarchar(max));
ERROR:  type "nvarchar" does not exist
LINE 1: select CAST('abcdefghijklmn' AS nvarchar(max));
                                        ^
-- test max max character length is (10 * 1024 * 1024) = 10485760
select CAST('abc' AS varchar(10485761));
ERROR:  length for type varchar cannot exceed 10485760
LINE 1: select CAST('abc' AS varchar(10485761));
                             ^
select CAST('abc' AS varchar(10485760));
 varchar 
---------
 abc
(1 row)

-- test column type nvarchar(max)
set babelfishpg_tsql.sql_dialect = 'tsql';
create table testing5(col nvarchar(max));
reset babelfishpg_tsql.sql_dialect;
\d testing5
                Table "public.testing5"
 Column |     Type     | Collation | Nullable | Default 
--------+--------------+-----------+----------+---------
 col    | sys.nvarchar |           |          | 

set babelfishpg_tsql.sql_dialect = "tsql";
insert into testing5 (col) select 'ab';
insert into testing5 (col) select 'abcdefghijklmn';
select * from testing5;
      col       
----------------
 ab
 abcdefghijklmn
(2 rows)

--test COPY command works with sys.nvarchar
COPY public.testing5 (col) FROM stdin;
select * from testing5;
      col       
----------------
 ab
 abcdefghijklmn
 c
 ab
 abcdefghijk
(5 rows)

-- [BABEL-220] test varchar(max) as a column
drop table testing5;
create table testing5(col varchar(max));
reset babelfishpg_tsql.sql_dialect;
\d testing5
                 Table "public.testing5"
 Column |     Type      | Collation | Nullable | Default 
--------+---------------+-----------+----------+---------
 col    | sys."varchar" |           |          | 

set babelfishpg_tsql.sql_dialect = "tsql";
insert into testing5 (col) select 'ab';
insert into testing5 (col) select 'abcdefghijklmn';
select * from testing5;
      col       
----------------
 ab
 abcdefghijklmn
(2 rows)

-- test type modifer persist if babelfishpg_tsql.sql_dialect changes
create table testing3(col nvarchar(2));
insert into testing3 (col) select 'ab';
insert into testing3 (col) select 'a£';
insert into testing3 (col) select 'a😀';
ERROR:  value too long for type character varying(2) as UTF16 output
insert into testing3 (col) select 'abc';
ERROR:  value too long for type character varying(2)
reset babelfishpg_tsql.sql_dialect;
insert into testing3 (col) select 'ab';
insert into testing3 (col) select 'a£';
insert into testing3 (col) select 'a😀';
ERROR:  value too long for type character varying(2) as UTF16 output
insert into testing3 (col) select 'abc';
ERROR:  value too long for type character varying(2)
set babelfishpg_tsql.sql_dialect = 'tsql';
insert into testing3 (col) select 'ab';
insert into testing3 (col) select 'a£';
insert into testing3 (col) select 'a😀';
ERROR:  value too long for type character varying(2) as UTF16 output
insert into testing3 (col) select 'abc';
ERROR:  value too long for type character varying(2)
-- test normal create domain works when apg_enable_domain_typmod is enabled
set apg_enable_domain_typmod true;
create domain varchar3 as varchar(3);
select CAST('abc' AS varchar3);
 varchar3 
----------
 abc
(1 row)

select CAST('ab£' AS varchar3);
 varchar3 
----------
 ab£
(1 row)

select CAST('abcd' AS varchar3);
 varchar3 
----------
 abc
(1 row)

reset apg_enable_domain_typmod;
ERROR:  unrecognized configuration parameter "apg_enable_domain_typmod"
-- [BABEL-191] test typmod of sys.varchar/nvarchar engages when the input
-- is casted multiple times
select CAST(CAST('abc' AS text) AS sys.varchar(3));
 varchar 
---------
 abc
(1 row)

select CAST(CAST('abc' AS pg_catalog.varchar(3)) AS sys.varchar(3));
 varchar 
---------
 abc
(1 row)

select CAST(CAST('abc' AS text) AS sys.nvarchar(3));
 nvarchar 
----------
 abc
(1 row)

select CAST(CAST('abc' AS text) AS sys.nchar(3));
 nchar 
-------
 abc
(1 row)

select CAST(CAST(CAST(CAST('abc' AS text) AS sys.varchar(3)) AS sys.nvarchar(3)) AS sys.nchar(3));
 nchar 
-------
 abc
(1 row)

-- test truncation on explicit cast through multiple levels
select CAST(CAST(CAST(CAST('abcde' AS text) AS sys.varchar(5)) AS sys.nvarchar(4)) AS sys.nchar(3));
 nchar 
-------
 abc
(1 row)

select CAST(CAST(CAST(CAST('abcde' AS text) AS sys.varchar(3)) AS sys.nvarchar(4)) AS sys.nchar(5));
 nchar 
-------
 abc  
(1 row)

-- test sys.ntext is available
select CAST('abc£' AS sys.ntext);
 ntext 
-------
 abc£
(1 row)

-- pg_catalog.text
select CAST('abc£' AS text);
 text 
------
 abc£
(1 row)

-- [BABEL-218] test varchar defaults to sys.varchar in tsql dialect
-- test default length of sys.varchar is 30 in CAST/CONVERT
-- expect the last 'e' to be truncated
select cast('abcdefghijklmnopqrstuvwxyzabcde' as varchar);
            varchar             
--------------------------------
 abcdefghijklmnopqrstuvwxyzabcd
(1 row)

select cast('abcdefghijklmnopqrstuvwxyzabcde' as sys.varchar);
            varchar             
--------------------------------
 abcdefghijklmnopqrstuvwxyzabcd
(1 row)

select convert(varchar, 'abcdefghijklmnopqrstuvwxyzabcde');
 babelfish_conv_helper_to_varchar 
----------------------------------
 abcdefghijklmnopqrstuvwxyzabcd
(1 row)

select convert(sys.varchar, 'abcdefghijklmnopqrstuvwxyzabcde');
            varchar             
--------------------------------
 abcdefghijklmnopqrstuvwxyzabcd
(1 row)

-- default length of pg_catalog.varchar is unlimited, no truncation in output
select cast('abcdefghijklmnopqrstuvwxyzabcde' as pg_catalog.varchar);
             varchar             
---------------------------------
 abcdefghijklmnopqrstuvwxyzabcde
(1 row)

-- varchar defaults to pg_catalog.varchar in PG dialect
reset babelfishpg_tsql.sql_dialect;
select cast('abcdefghijklmnopqrstuvwxyzabcde' as pg_catalog.varchar); -- default length of pg_catalog.varchar is unlimited, no truncation
             varchar             
---------------------------------
 abcdefghijklmnopqrstuvwxyzabcde
(1 row)

set babelfishpg_tsql.sql_dialect = 'tsql';
-- [BABEL-255] test nchar defaults to sys.nchar in tsql dialect
create table test_nchar (col1 nchar);
reset babelfishpg_tsql.sql_dialect;
\d test_nchar
                Table "public.test_nchar"
 Column |      Type      | Collation | Nullable | Default 
--------+----------------+-----------+----------+---------
 col1   | sys."nchar"(1) |           |          | 

set babelfishpg_tsql.sql_dialect = "tsql";
drop table test_nchar;
-- test nchar defaults to bpchar in pg dialect
reset babelfishpg_tsql.sql_dialect;
create table test_nchar (col1 nchar);
\d test_nchar
               Table "public.test_nchar"
 Column |     Type     | Collation | Nullable | Default 
--------+--------------+-----------+----------+---------
 col1   | character(1) |           |          | 

drop table test_nchar;
set babelfishpg_tsql.sql_dialect = 'tsql';
-- [BABEL-257] test varchar defaults to sys.varchar in new
-- database and new schema
SELECT current_database();
  current_database  
--------------------
 contrib_regression
(1 row)

SELECT set_config('babelfishpg_tsql.sql_dialect', 'postgres', false);
 set_config 
------------
 postgres
(1 row)

CREATE DATABASE demo;
\c demo
CREATE EXTENSION IF NOT EXISTS "babelfishpg_tsql" CASCADE;
NOTICE:  installing required extension "uuid-ossp"
NOTICE:  installing required extension "babelfishpg_common"
-- Reconnect to make sure CLUSTER_COLLATION_OID is initialized
\c postgres
\c demo
set babelfishpg_tsql.sql_dialect = 'tsql';
-- Test varchar is mapped to sys.varchar
-- Expect truncated output because sys.varchar defaults to sys.varchar(30) in CAST function
select cast('abcdefghijklmnopqrstuvwxyzabcde' as varchar);
            varchar             
--------------------------------
 abcdefghijklmnopqrstuvwxyzabcd
(1 row)

-- Expect non-truncated output because pg_catalog.varchar has unlimited length
select cast('abcdefghijklmnopqrstuvwxyzabcde' as pg_catalog.varchar);
             varchar             
---------------------------------
 abcdefghijklmnopqrstuvwxyzabcde
(1 row)

-- Test bit is mapped to sys.bit
-- sys.bit allows numeric input
select CAST(1.5 AS bit);
 bit 
-----
 1
(1 row)

-- pg_catalog.bit doesn't allow numeric input
select CAST(1.5 AS pg_catalog.bit);
ERROR:  cannot cast type numeric to bit
LINE 1: select CAST(1.5 AS pg_catalog.bit);
               ^
-- Test varchar is mapped to sys.varchar in a new schema and a new table
CREATE SCHEMA s1;
create table s1.test1 (col varchar);
-- Test sys.varchar is created for test1.col, expect an error
-- because sys.varchar defaults to sys.varchar(1)
insert into s1.test1 values('abc');
ERROR:  value too long for type character varying(1)
insert into s1.test1 values('a');
select * from s1.test1;
 col 
-----
 a
(1 row)

drop schema s1 cascade;
NOTICE:  drop cascades to table s1.test1
SELECT set_config('babelfishpg_tsql.sql_dialect', 'postgres', false);
 set_config 
------------
 postgres
(1 row)

\c regression
\connect: connection to server on socket "/tmp/.s.PGSQL.5432" failed: FATAL:  database "regression" does not exist
