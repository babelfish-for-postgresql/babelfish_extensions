# Schedule file for JDBC Test Framework running with jTDS driver instead of
# mssql-jdbc driver. When 'useJTDSInsteadOfMSSQLJDBC' config option is set to
# 'true' this file is used instead of 'jdbc_schedule' file.

# About the test that were copied with "jtds-prefix":
#
# jTDS has different behaviour from mssql-jdbc when error happens in a batch with multiple statements.
# If a batch contains multiple DML statements and one of them is causing an error (like constraint violation),
# then with mssql-jdbc stmt.execute() returns successfully, number of updated rows can be read from
# stmt.getUpdateCount() and the Exception is thrown on stmt.getMoreResults() only after all successful
# update counts are read.
#
# With jTDS, if none of the statements return a result set (no selects in batch, only DML), then the Exception
# is thrown on stmt.execute(). If this exception is caught and handled, then update counts from successul
# DML statements can be read with stmt.getUpdateCount().
# And if the successful batch statements return one or more result sets, then stmt.execute() succeeds,
# and update counts and result sets can be read successfully up to the errored one. And the Exception
# is thrown on rs.next() after the last successfull result set is exhausted.
#
# This jTDS behaviour is the same with both Babelfish and MSSQL.

# datatypes
TestInt
TestSmallInt
# Failure: Message: Data truncation
# TestTinyInt
TestBigInt
TestBIT
# Failure: discrepancy in jTDS behaviour between MSSQL and Babelfish
# TestDecimal
TestNumeric
TestMoney
TestFloat
TestReal
# jTDS reports out of range error on stmt.execute() instead of rs.next()
# thus columns headers are not printed on error.
jtds-TestDatetime
# jTDS date handling differs with mssql-jdbc, behavior on MSSQL and Babelfish is the same
jtds-TestDate
# Failure: jTDS behaviour differs from mssql-jdbc on both MSSQL and Babelfish in different way
# TestDatetime2
TestSmallDatetime
# Failure: jTDS behaviour differs from mssql-jdbc on both MSSQL and Babelfish in different way
# TestTime
# Failure: FATAL:  UTF16 output of varchar/bpchar exceeds max length
# TestDatetimeoffset-vu-prepare
# TestDatetimeoffset-vu-verify
# TestDatetimeoffset-vu-cleanup
# java.lang.StringIndexOutOfBoundsException: offset 0, count -17238, length 255
# TestVarChar
# Failures: stmt.setCharacterStream() is not supported in jTDS
# TestText
TestChar
TestBinary
TestImage-vu-prepare
TestImage-vu-verify
TestImage-vu-cleanup
# Failure: Message: Data truncation
# TestSQLVariant-vu-prepare
# TestSQLVariant-vu-verify
# TestSQLVariant-vu-cleanup
# jTDS reports XML column as ntext in ResultSetMetaData, this behaviour is the same
# with both MSSQL and Babelfish
jtds-TestXML
jtds-TestTableType-vu-prepare
jtds-TestTableType-vu-verify
jtds-TestTableType-vu-cleanup
TestUniqueIdentifier

# sqlBatch
# jTDS reports column type as nvarchar instead of date, behavior on MSSQL and Babelfish is the same
jtds-TestSQLQueries

# errorHandling
jtds-TestSimpleErrors
jtds-TestErrorsWithTryCatch

# storedProcedures
# jTDS reports column type as nvarchar instead of date, behavior on MSSQL and Babelfish is the same
jtds-TestStoredProcedures

# cursors
# Failure:
# ERROR:  cursor fetch type 100 not supported
# jTDS calls sp_cursorfetch procedure with FETCH_INFO (100) option
# TestCursorFetchNext
# Failure:
# LOG:  Unmapped error found. Code: 1088, Message: 
#	 Tds SP_CURSORPREPARE not supported yet, File: tdsrpc.c, Line: 3367, Context: TDS
# jTDS calls sp_cursorprepare procedure with unsupported parameters
# TestCursorPrepExecFetchNext

# transactions
TestTransactionsSQLBatch
jtds-TestTransactionSupportForProcedure

# temporary
jtds-varchar-max-length-check
jtds-nvarchar-max-length-check
jtds-nvarchar-max-length-check2
