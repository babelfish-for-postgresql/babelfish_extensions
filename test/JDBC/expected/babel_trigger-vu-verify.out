
-- CARRYING OUT TEST WITH THE AFTER KEYWORD
-- a simple test
insert into babel_trigger_vu_prepare_t1 (col) select N'Muffler'
GO
~~START~~
varchar
trigger invoked
~~END~~

~~ROW COUNT: 1~~


drop trigger babel_trigger_vu_prepare_trg1
GO

-- test drop trigger if exists
create trigger babel_trigger_vu_prepare_trg1 on babel_trigger_vu_prepare_t1 after insert
as
begin
  SELECT 'trigger invoked'
end
GO

drop trigger if exists babel_trigger_vu_prepare_trg1
GO

drop trigger if exists babel_trigger_vu_prepare_trg1
GO


-- test comma separator
insert into babel_trigger_vu_prepare_t2 (col) select N'Apple'
GO
~~START~~
varchar
trigger invoked
~~END~~

~~ROW COUNT: 1~~


delete from babel_trigger_vu_prepare_t2 where col = N'Apple'
GO
~~START~~
varchar
trigger invoked
~~END~~

~~ROW COUNT: 1~~


-- test inserted and deleted transition tables
INSERT INTO babel_trigger_vu_prepare_products1(
	product_id,
    product_name, 
    brand_id, 
    category_id, 
    model_year, 
    list_price
)
VALUES (
	1,
    'Test product',
    1,
    1,
    2018,
    599
)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


SELECT * FROM babel_trigger_vu_prepare_product_audits1
GO
~~START~~
int#!#varchar#!#int#!#int#!#smallint#!#numeric#!#char
1#!#Test product#!#1#!#1#!#2018#!#599.00#!#INS
~~END~~




-- CARRY OUT THE SAME TESTS WITH THE FOR KEYWORD --
-- a simple test
insert into babel_trigger_vu_prepare_t3 (col) select N'Muffler'
GO
~~START~~
varchar
trigger invoked
~~END~~

~~ROW COUNT: 1~~


drop trigger babel_trigger_vu_prepare_trg3
GO

-- test drop trigger if exists
create trigger babel_trigger_vu_prepare_trg3 on babel_trigger_vu_prepare_t3 for insert
as
begin
  SELECT 'trigger invoked'
end
GO

drop trigger if exists babel_trigger_vu_prepare_trg3
GO

drop trigger if exists babel_trigger_vu_prepare_trg3
GO

-- test comma separator
insert into babel_trigger_vu_prepare_t4 (col) select N'Apple'
GO
~~START~~
varchar
trigger invoked
~~END~~

~~ROW COUNT: 1~~


delete from babel_trigger_vu_prepare_t4 where col = N'Apple'
GO
~~START~~
varchar
trigger invoked
~~END~~

~~ROW COUNT: 1~~





-- test inserted and deleted transition tables
INSERT INTO babel_trigger_vu_prepare_products2(
	product_id,
    product_name, 
    brand_id, 
    category_id, 
    model_year, 
    list_price
)
VALUES (
	1,
    'Test product',
    1,
    1,
    2018,
    599
)
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


SELECT * FROM babel_trigger_vu_prepare_product_audits2
GO
~~START~~
int#!#varchar#!#int#!#int#!#smallint#!#numeric#!#char
1#!#Test product#!#1#!#1#!#2018#!#599.00#!#INS
~~END~~



-- Test drop trigger without table name --
-- First, test that triggers must have unique names
create trigger babel_trigger_vu_prepare_trg5 on babel_trigger_vu_prepare_t6 after insert  --should throw error
as
begin
  SELECT 'trigger invoked'
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: trigger "babel_trigger_vu_prepare_trg5" already exists in the database)~~


-- Now, test that drop trigger works without tablename
drop trigger babel_trigger_vu_prepare_trg5
GO

-- Test that drop trigger statement on non-existent trigger throws error
drop trigger babel_trigger_vu_prepare_trg5
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: trigger "babel_trigger_vu_prepare_trg5" does not exist)~~

drop trigger if exists babel_trigger_vu_prepare_trg5
GO


-- Test that dropping a table with triggers defined on it succeeds
drop table babel_trigger_vu_prepare_testTbl
GO

-- Test 'NOT FOR REPLICATION' syntax
create trigger babel_trigger_vu_prepare_trg5 on babel_trigger_vu_prepare_t5 after insert
NOT FOR REPLICATION
as
begin
  SELECT 'trigger invoked'
end
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'NOT FOR REPLICATION' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_for_replication to ignore)~~


insert into babel_trigger_vu_prepare_t5 (col) select N'Muffler'
GO
~~ROW COUNT: 1~~


-- Test for trigger inside schema
insert into babel_trigger_vu_prepare_sch1.babel_trigger_vu_prepare_t1(col) select N'Muffler'
GO
~~START~~
varchar
trigger3 from sch1 invoked
~~END~~

~~ROW COUNT: 1~~


