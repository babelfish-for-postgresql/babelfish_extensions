exec alter_proc_p1
go
~~START~~
int#!#varchar#!#varchar#!#varchar
1#!#j#!#o#!#testemail
1#!#e#!#l#!#testemail2
~~END~~


-- Test Case: Expect error for procedure with same name
CREATE PROCEDURE alter_proc_p1 @param1 int
AS
    select * from alter_proc_orders
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: Function 'alter_proc_p1' already exists with the same name)~~


-- Test Case: Expect error for altering proc that does not exist
ALTER PROCEDURE alter_fake_proc @param1 int
AS
    select * from alter_proc_orders
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: No existing procedure found with the name for ALTER PROCEDURE)~~


-- Test Case: Modify the procedure body, and check information_schema updated with spaces
/* Leading comment not included: BABEL-5140 */ ALTER       -- test comment
    PROCEDURE alter_proc_p1
AS
    select * from alter_proc_orders
GO

exec alter_proc_p1
go
~~START~~
int#!#int#!#int#!#int#!#date
1#!#1#!#1#!#5#!#2023-06-25
2#!#1#!#1#!#6#!#2023-06-25
~~END~~


exec alter_proc_p2
go
~~START~~
int#!#int#!#int#!#int#!#date
1#!#1#!#1#!#5#!#2023-06-25
2#!#1#!#1#!#6#!#2023-06-25
~~END~~


-- Ensure information schema uses "CREATE" instead of "ALTER" with updated definition
select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p1';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p1#!#SQL#!#CREATE       -- test comment<newline>    PROCEDURE alter_proc_p1<newline>AS<newline>    select * from alter_proc_orders
~~END~~



-- Test Case: Modify the procedure body, add a parameter, use "proc"
--            instead of "procedure"
       ALTER /* TEST COMMENT */ 
            PROC alter_proc_p1
    @param INT
AS
    IF (@param = 1)
    BEGIN
        select * from alter_proc_users
    END
    ELSE
    BEGIN
        select * from alter_proc_orders
    END
GO

exec alter_proc_p1 @param = 1
GO
~~START~~
int#!#varchar#!#varchar#!#varchar
1#!#j#!#o#!#testemail
1#!#e#!#l#!#testemail2
~~END~~


exec alter_proc_p1 @param = 2
GO
~~START~~
int#!#int#!#int#!#int#!#date
1#!#1#!#1#!#5#!#2023-06-25
2#!#1#!#1#!#6#!#2023-06-25
~~END~~


-- Ensure information schema uses "CREATE" instead of "ALTER" with updated definition
select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p1';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p1#!#SQL#!#CREATE /* TEST COMMENT */ <newline>            PROC alter_proc_p1<newline>    @param INT<newline>AS<newline>    IF (@param = 1)<newline>    BEGIN<newline>        select * from alter_proc_users<newline>    END<newline>    ELSE<newline>    BEGIN<newline>        select * from alter_proc_orders<newline>    END
~~END~~


-- Test Case: Expect error because no parameter provided
exec alter_proc_p2
go
~~ERROR (Code: 201)~~

~~ERROR (Message: procedure alter_proc_p1 expects parameter "@param", which was not supplied.)~~



-- Test Case: Alter the parameter type and procedure body
ALTER PROCEDURE alter_proc_p1
    @param date
AS
    IF (@param = '2020-01-01')
    BEGIN
        select * from alter_proc_users
    END
    ELSE
    BEGIN
        select * from alter_proc_orders
    END
GO

exec alter_proc_p1 @param = '2020-01-01'
GO
~~START~~
int#!#varchar#!#varchar#!#varchar
1#!#j#!#o#!#testemail
1#!#e#!#l#!#testemail2
~~END~~


exec alter_proc_p1 @param = '2020-01-02'
GO
~~START~~
int#!#int#!#int#!#int#!#date
1#!#1#!#1#!#5#!#2023-06-25
2#!#1#!#1#!#6#!#2023-06-25
~~END~~


-- Ensure information schema uses "CREATE" instead of "ALTER" with updated definition
select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p1';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p1#!#SQL#!#CREATE PROCEDURE alter_proc_p1<newline>    @param date<newline>AS<newline>    IF (@param = '2020-01-01')<newline>    BEGIN<newline>        select * from alter_proc_users<newline>    END<newline>    ELSE<newline>    BEGIN<newline>        select * from alter_proc_orders<newline>    END
~~END~~


-- Test Case: Modify the procedure body to call another modified proc
alter procedure alter_proc_p2
AS
    exec alter_proc_p1 @param = '2020-01-01'
GO

exec alter_proc_p2
go
~~START~~
int#!#varchar#!#varchar#!#varchar
1#!#j#!#o#!#testemail
1#!#e#!#l#!#testemail2
~~END~~


-- Ensure information schema uses "CREATE" instead of "ALTER" with updated definition
select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p2';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p2#!#SQL#!#CREATE procedure alter_proc_p2<newline>AS<newline>    exec alter_proc_p1 @param = '2020-01-01'
~~END~~



-- Test Case: attempt to alter function, expect error for being unsupported
alter function alter_proc_f1()
returns int
as
BEGIN
    return 5
END
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER FUNCTION' is not currently supported in Babelfish)~~


-- Test Case: Transaction - begin, alter, rollback
--                        - expect alter to not go through
BEGIN TRANSACTION
go

alter procedure alter_proc_p3 as select 2
go

ROLLBACK
go

exec alter_proc_p3
go
~~START~~
int
1
~~END~~


-- Test Case: Transaction - begin, alter proc, modify row, commit
--                        - expect both changes to take place                          
BEGIN TRANSACTION
go

alter procedure alter_proc_p3 @z int as select 500 + @z
go

INSERT INTO alter_proc_users VALUES (3, 'newuser', 'lastname', 'testemail3')
go
~~ROW COUNT: 1~~


COMMIT
GO

exec alter_proc_p3 @z = 500
go
~~START~~
int
1000
~~END~~


select * from alter_proc_users
go
~~START~~
int#!#varchar#!#varchar#!#varchar
1#!#j#!#o#!#testemail
1#!#e#!#l#!#testemail2
3#!#newuser#!#lastname#!#testemail3
~~END~~


-- Ensure information schema uses "CREATE" instead of "ALTER" with updated definition
select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p3';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p3#!#SQL#!#CREATE procedure alter_proc_p3 @z int as select 500 + @z
~~END~~



-- Test Case: Transaction - begin, alter proc, modify row, commit
--                        - expect both changes to not go through 
BEGIN TRANSACTION
go

alter procedure alter_proc_p3 as select 1000
go

INSERT INTO alter_proc_users VALUES (4, 'newest_user', 'lastname3', 'testemail4')
go
~~ROW COUNT: 1~~


ROLLBACK
GO

-- Expect this to error with no param provided
exec alter_proc_p3
go
~~ERROR (Code: 201)~~

~~ERROR (Message: procedure alter_proc_p3 expects parameter "@z", which was not supplied.)~~


select * from alter_proc_users
go
~~START~~
int#!#varchar#!#varchar#!#varchar
1#!#j#!#o#!#testemail
1#!#e#!#l#!#testemail2
3#!#newuser#!#lastname#!#testemail3
~~END~~



-- Test Case: Transaction - alter procedure to select from table row that does not exist
--                          which would result in error if committed
BEGIN TRANSACTION
go

alter procedure alter_proc_p3 as 
    select fake_column from alter_proc_users
go

ROLLBACK
GO

-- Expect this to error with no param provided
exec alter_proc_p3
go
~~ERROR (Code: 201)~~

~~ERROR (Message: procedure alter_proc_p3 expects parameter "@z", which was not supplied.)~~






-- Test Case: confirm information_schema.routines is updated properly with comments
alter 
/*
 * test comment 1
 */
-- test comment 2
procedure alter_proc_p4 as select 3
go

exec alter_proc_p4
go
~~START~~
int
3
~~END~~


select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p4';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p4#!#SQL#!#CREATE <newline>/*<newline> * test comment 1<newline> */<newline>-- test comment 2<newline>procedure alter_proc_p4 as select 3
~~END~~




-- Test Case: confirm information_schema.routines is updated properly with comments
alter 
-- test comment 1
procedure alter_proc_p4 as select 4
go

exec alter_proc_p4
go
~~START~~
int
4
~~END~~


select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p4';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p4#!#SQL#!#CREATE <newline>-- test comment 1<newline>procedure alter_proc_p4 as select 4
~~END~~


-- Test Case: confirm procedure altered in 'alter-procedure-vu-prepare' is properly updated
exec alter_proc_p5 @dateParam = '2000-01-01'
go
~~START~~
date
2000-01-01
~~END~~


select ROUTINE_NAME, ROUTINE_BODY, ROUTINE_DEFINITION from information_schema.routines where SPECIFIC_NAME LIKE 'alter_proc_p4';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar
alter_proc_p4#!#SQL#!#CREATE <newline>-- test comment 1<newline>procedure alter_proc_p4 as select 4
~~END~~

