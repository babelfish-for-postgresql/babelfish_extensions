-- tsql
-- should throw error since vector is only allowed in sys
exec sp_execute_postgresql 'create extension vector';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'vector' extension creation is restricted to 'sys' schema)~~


exec sp_execute_postgresql 'create extension vector with schema sys';
go

create login vector_login with password='12345678'
go

Alter server role sysadmin add member vector_login
go

create database vector_db;
go

use vector_db
go

-- tsql user=vector_login password=12345678
use vector_db;
go

select set_config('babelfishpg_tsql.explain_costs', 'off', false);
go
~~START~~
text
off
~~END~~

select set_config('babelfishpg_tsql.explain_timing', 'off', false);
go
~~START~~
text
off
~~END~~

select set_config('babelfishpg_tsql.explain_summary', 'off', false);
go
~~START~~
text
off
~~END~~


SELECT CAST('[1,2,3]' as halfvec);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST('[-1,-2,-3]' as halfvec);
go
~~START~~
varchar
[-1,-2,-3]
~~END~~


SELECT CAST('[1.,2.,3.]' as halfvec);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST(' [ 1,  2 ,    3  ] ' as halfvec);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST('[1.23456]' as halfvec);
go
~~START~~
varchar
[1.234375]
~~END~~


SELECT CAST('[hello,1]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[hello,1]")~~


SELECT CAST('[NaN,1]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: NaN not allowed in halfvec)~~


SELECT CAST('[Infinity,1]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: infinite value not allowed in halfvec)~~


SELECT CAST('[-Infinity,1]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: infinite value not allowed in halfvec)~~


SELECT CAST('[65519,-65519]' as halfvec);
go
~~START~~
varchar
[65504,-65504]
~~END~~


SELECT CAST('[65520,-65520]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: "65520" is out of range for type halfvec)~~


SELECT CAST('[1e-8,-1e-8]' as halfvec);
go
~~START~~
varchar
[0,-0]
~~END~~


SELECT CAST('[4e38,1]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: "4e38" is out of range for type halfvec)~~


SELECT CAST('[1e-46,1]' as halfvec);
go
~~START~~
varchar
[0,1]
~~END~~


SELECT CAST('[1,2,3' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[1,2,3")~~


SELECT CAST('[1,2,3]9' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[1,2,3]9")~~


SELECT CAST('1,2,3' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "1,2,3")~~


SELECT CAST('' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "")~~


SELECT CAST('[' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[")~~


SELECT CAST('[ ' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[ ")~~


SELECT CAST('[,' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[,")~~


SELECT CAST('[]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: halfvec must have at least 1 dimension)~~


SELECT CAST('[ ]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: halfvec must have at least 1 dimension)~~


SELECT CAST('[,]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[,]")~~


SELECT CAST('[1,]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[1,]")~~


SELECT CAST('[1a]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[1a]")~~


SELECT CAST('[1,,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[1,,3]")~~


SELECT CAST('[1, ,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type halfvec: "[1, ,3]")~~


SELECT CAST('[1,2,3]' as halfvec(3));
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST('[1,2,3]' as halfvec(2));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: expected 2 dimensions, not 3)~~


SELECT CAST('[1,2,3]' as halfvec(3, 2));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid type modifier)~~


SELECT CAST('[1,2,3]' as halfvec('a'));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '(' at line 1 and character position 32)~~


SELECT CAST('[1,2,3]' as halfvec(0));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: dimensions for type halfvec must be at least 1)~~


SELECT CAST('[1,2,3]' as halfvec(16001));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: dimensions for type halfvec cannot exceed 16000)~~


SELECT CAST('{"[1,2,3]"}' as halfvec(2)[]);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '[]' at line 1 and character position 39)~~


SELECT CAST('[1,2,3]' as halfvec) + CAST('[4,5,6]' as halfvec);
go
~~START~~
varchar
[5,7,9]
~~END~~


SELECT CAST('[65519]' as halfvec) + CAST('[65519]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: overflow)~~


SELECT CAST('[1,2]' as halfvec) + CAST('[3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT CAST('[1,2,3]' as halfvec) - CAST('[4,5,6]' as halfvec);
go
~~START~~
varchar
[-3,-3,-3]
~~END~~


SELECT CAST('[-65519]' as halfvec) - CAST('[65519]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: overflow)~~


SELECT CAST('[1,2]' as halfvec) - CAST('[3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT CAST('[1,2,3]' as halfvec) * CAST('[4,5,6]' as halfvec);
go
~~START~~
varchar
[4,10,18]
~~END~~


SELECT CAST('[65519]' as halfvec) * CAST('[65519]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: overflow)~~


SELECT CAST('[1e-7]' as halfvec) * CAST('[1e-7]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: underflow)~~


SELECT CAST('[1,2]' as halfvec) * CAST('[3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT CAST('[1,2,3]' as halfvec) + CAST('[4,5]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 3 and 2)~~


SELECT CAST('[1,2,3]' as halfvec) < CAST('[1,2,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) < CAST('[1,2]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) <= CAST('[1,2,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) <= CAST('[1,2]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) = CAST('[1,2,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '=' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) = CAST('[1,2]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '=' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) != CAST('[1,2,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '!' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) != CAST('[1,2]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '!' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) >= CAST('[1,2,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '>' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) >= CAST('[1,2]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '>' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) > CAST('[1,2,3]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '>' at line 1 and character position 34)~~


SELECT CAST('[1,2,3]' as halfvec) > CAST('[1,2]' as halfvec);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '>' at line 1 and character position 34)~~


SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[1,2,3]' as halfvec));
go
~~START~~
int
0
~~END~~


SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[0,0,0]' as halfvec));
go
~~START~~
int
1
~~END~~


SELECT halfvec_cmp(CAST('[0,0,0]' as halfvec), CAST('[1,2,3]' as halfvec));
go
~~START~~
int
-1
~~END~~


SELECT halfvec_cmp(CAST('[1,2]' as halfvec), CAST('[1,2,3]' as halfvec));
go
~~START~~
int
-1
~~END~~


SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[1,2]' as halfvec));
go
~~START~~
int
1
~~END~~


SELECT halfvec_cmp(CAST('[1,2]' as halfvec), CAST('[2,3,4]' as halfvec));
go
~~START~~
int
-1
~~END~~


SELECT halfvec_cmp(CAST('[2,3]' as halfvec), CAST('[1,2,3]' as halfvec));
go
~~START~~
int
1
~~END~~


SELECT vector_dims(CAST('[1,2,3]' as halfvec));
go
~~START~~
int
3
~~END~~


SELECT ROUND(CAST(l2_norm(CAST('[1,1]' as halfvec)) as numeric), 5);
go
~~START~~
numeric
1.00000
~~END~~


SELECT l2_norm(CAST('[3,4]' as halfvec));
go
~~START~~
float
5.0
~~END~~


SELECT l2_norm(CAST('[0,1]' as halfvec));
go
~~START~~
float
1.0
~~END~~


SELECT l2_norm(CAST('[0,0]' as halfvec));
go
~~START~~
float
0.0
~~END~~


SELECT l2_norm(CAST('[2]' as halfvec));
go
~~START~~
float
2.0
~~END~~


SELECT l2_distance(CAST('[0,0]' as halfvec), CAST('[3,4]' as halfvec));
go
~~START~~
float
5.0
~~END~~


SELECT l2_distance(CAST('[0,0]' as halfvec), CAST('[0,1]' as halfvec));
go
~~START~~
float
1.0
~~END~~


SELECT l2_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT l2_distance(CAST('[1,1,1,1,1,1,1,1,1]' as halfvec), CAST('[1,1,1,1,1,1,1,4,5]' as halfvec));
go
~~START~~
float
5.0
~~END~~


SELECT CAST('[0,0]' as halfvec) <-> CAST('[3,4]' as halfvec);
go
~~START~~
float
5.0
~~END~~


SELECT inner_product(CAST('[1,2]' as halfvec), CAST('[3,4]' as halfvec));
go
~~START~~
float
11.0
~~END~~


SELECT inner_product(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT inner_product(CAST('[65504]' as halfvec), CAST('[65504]' as halfvec));
go
~~START~~
float
4.290774016E9
~~END~~


SELECT inner_product(CAST('[1,1,1,1,1,1,1,1,1]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go
~~START~~
float
45.0
~~END~~


SELECT CAST('[1,2]' as halfvec) <#> CAST('[3,4]' as halfvec);
go
~~START~~
float
-11.0
~~END~~


SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[2,4]' as halfvec));
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[0,0]' as halfvec));
go
~~START~~
float
NaN
~~END~~


SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[1,1]' as halfvec));
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance(CAST('[1,0]' as halfvec), CAST('[0,2]' as halfvec));
go
~~START~~
float
1.0
~~END~~


SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[-1,-1]' as halfvec));
go
~~START~~
float
2.0
~~END~~


SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[1.1,1.1]' as halfvec));
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[-1.1,-1.1]' as halfvec));
go
~~START~~
float
2.0
~~END~~


SELECT cosine_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[-1,-2,-3,-4,-5,-6,-7,-8,-9]' as halfvec));
go
~~START~~
float
2.0
~~END~~


SELECT CAST('[1,2]' as halfvec) <=> CAST('[2,4]' as halfvec);
go
~~START~~
float
0.0
~~END~~


SELECT l1_distance(CAST('[0,0]' as halfvec), CAST('[3,4]' as halfvec));
go
~~START~~
float
7.0
~~END~~


SELECT l1_distance(CAST('[0,0]' as halfvec), CAST('[0,1]' as halfvec));
go
~~START~~
float
1.0
~~END~~


SELECT l1_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different halfvec dimensions 2 and 1)~~


SELECT l1_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go
~~START~~
float
0.0
~~END~~


SELECT l1_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[0,3,2,5,4,7,6,9,8]' as halfvec));
go
~~START~~
float
9.0
~~END~~


SELECT CAST('[0,0]' as halfvec) <+> CAST('[3,4]' as halfvec);
go
~~START~~
float
7.0
~~END~~


SELECT l2_normalize(CAST('[3,4]' as halfvec));
go
~~START~~
varchar
[0.60009766,0.7998047]
~~END~~


SELECT l2_normalize(CAST('[3,0]' as halfvec));
go
~~START~~
varchar
[1,0]
~~END~~


SELECT l2_normalize(CAST('[0,0.1]' as halfvec));
go
~~START~~
varchar
[0,1]
~~END~~


SELECT l2_normalize(CAST('[0,0]' as halfvec));
go
~~START~~
varchar
[0,0]
~~END~~


SELECT l2_normalize(CAST('[65504]' as halfvec));
go
~~START~~
varchar
[1]
~~END~~


SELECT binary_quantize(CAST('[1,0,-1]' as halfvec));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type bit is not supported yet)~~


SELECT binary_quantize(CAST('[0,0.1,-0.2,-0.3,0.4,0.5,0.6,-0.7,0.8,-0.9,1]' as halfvec));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type bit is not supported yet)~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 1, 3);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 2);
go
~~START~~
varchar
[3,4]
~~END~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -1, 3);
go
~~START~~
varchar
[1]
~~END~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 9);
go
~~START~~
varchar
[3,4,5]
~~END~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 1, 0);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: halfvec must have at least 1 dimension)~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, -1);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: halfvec must have at least 1 dimension)~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -1, 2);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: halfvec must have at least 1 dimension)~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 2147483647, 10);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: halfvec must have at least 1 dimension)~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 2147483647);
go
~~START~~
varchar
[3,4,5]
~~END~~


SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -2147483644, 2147483647);
go
~~START~~
varchar
[1,2]
~~END~~


SELECT halfvec_avg(array_agg(CAST(n as halfvec))) FROM generate_series(1, 16002) n;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type integer to halfvec)~~


-- hnsw_halfvec
-- l2
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_l2_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,2,3]
[1,2,4]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
  Order By: (val <-> '[3,3,3]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
        Order By: (val <-> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SELECT COUNT(*) FROM halfvec_table;
go
~~START~~
int
5
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM halfvec_table
Aggregate (actual rows=1 loops=1)
  ->  Seq Scan on halfvec_table (actual rows=5 loops=1)
~~END~~


TRUNCATE TABLE halfvec_table;
go

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=0 loops=1)
  Order By: (val <-> '[3,3,3]'::halfvec)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~



-- inner product
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_ip_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,2,4]
[1,2,3]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
  Order By: (val <#> '[3,3,3]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
        Order By: (val <#> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~



-- cosine
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_cosine_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,1,1]
[1,2,3]
[1,2,4]
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=3 loops=1)
  Order By: (val <=> '[3,3,3]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec)) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=3 loops=1)
        Order By: (val <=> '[0,0,0]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=3 loops=1)
        Order By: (val <=> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~



-- L1
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_l1_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <+> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,2,3]
[1,2,4]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <+> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
  Order By: (val <+> '[3,3,3]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <+> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <+> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
        Order By: (val <+> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~


-- ivfflat
-- l2
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_l2_ops) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,2,3]
[1,2,4]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
  Order By: (val <-> '[3,3,3]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=4 loops=1)
        Order By: (val <-> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SELECT COUNT(*) FROM halfvec_table;
go
~~START~~
int
5
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM halfvec_table
Aggregate (actual rows=1 loops=1)
  ->  Seq Scan on halfvec_table (actual rows=5 loops=1)
~~END~~


TRUNCATE TABLE halfvec_table;
go

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=0 loops=1)
  Order By: (val <-> '[3,3,3]'::halfvec)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~



-- inner product
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_ip_ops) WITH (lists = 1) WITH (lists = 1);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'lists' at line 1 and character position 92)~~


INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,2,4]
[1,2,3]
[1,1,1]
[0,0,0]
<NULL>
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec) NULLS LAST
Sort (actual rows=5 loops=1)
  Sort Key: ((val <#> '[3,3,3]'::halfvec))
  Sort Method: quicksort  Memory: 25kB
  ->  Seq Scan on halfvec_table (actual rows=5 loops=1)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
5
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Sort (actual rows=5 loops=1)
        Sort Key: ((halfvec_table.val <#> $0))
        Sort Method: quicksort  Memory: 25kB
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
        ->  Seq Scan on halfvec_table (actual rows=5 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~



-- cosine
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_cosine_ops) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec);
go
~~START~~
varchar
[1,1,1]
[1,2,3]
[1,2,4]
~~END~~

~~START~~
text
Query Text: SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec) NULLS LAST
Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=3 loops=1)
  Order By: (val <=> '[3,3,3]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec)) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=3 loops=1)
        Order By: (val <=> '[0,0,0]'::halfvec)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec))) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxhalfvec_table7f9bec28bc8902d45d905788d7aa59a1 on halfvec_table (actual rows=3 loops=1)
        Order By: (val <=> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go
~~START~~
text
on
~~END~~


select set_config('babelfishpg_tsql.explain_costs', 'on', false);
go
~~START~~
text
on
~~END~~

select set_config('babelfishpg_tsql.explain_timing', 'on', false);
go
~~START~~
text
on
~~END~~

select set_config('babelfishpg_tsql.explain_summary', 'on', false);
go
~~START~~
text
on
~~END~~


-- system metadata, all objects get their datatype info from one of:
-- typecodes or datatype_info data we have created. Testing sys.types for typecodes
-- and sp_sproc_columns_100 for datatype_info is enough
select count(*) from sys.types where name = 'halfvec';
go
~~START~~
int
1
~~END~~


create procedure halfvec_proc_1 @a halfvec, @b varchar(max) as select @a as a, @b as b;
go

exec sp_sproc_columns_100 @procedure_name= 'halfvec_proc_1'
go
~~START~~
varchar#!#varchar#!#nvarchar#!#varchar#!#smallint#!#smallint#!#varchar#!#int#!#int#!#smallint#!#smallint#!#smallint#!#varchar#!#nvarchar#!#smallint#!#smallint#!#int#!#int#!#varchar#!#tinyint
vector_db#!#dbo#!#halfvec_proc_1;1#!#@RETURN_VALUE#!#5#!#4#!#int#!#10#!#4#!#0#!#10#!#0#!#<NULL>#!#<NULL>#!#4#!#<NULL>#!#<NULL>#!#0#!#NO#!#56
vector_db#!#dbo#!#halfvec_proc_1;1#!#@a#!#1#!#<NULL>#!#halfvec#!#0#!#-1#!#0#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#1#!#NO#!#<NULL>
vector_db#!#dbo#!#halfvec_proc_1;1#!#@b#!#1#!#12#!#varchar#!#0#!#8000#!#0#!#<NULL>#!#1#!#<NULL>#!#<NULL>#!#12#!#<NULL>#!#<NULL>#!#2#!#YES#!#39
~~END~~


drop procedure halfvec_proc_1;
go

create table t(a halfvec(3), b varchar(max))
go
select * from information_schema.columns where table_name = 't'
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#int#!#nvarchar#!#varchar#!#nvarchar#!#int#!#int#!#tinyint#!#smallint#!#int#!#smallint#!#nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#nvarchar
vector_db#!#dbo#!#t#!#a#!#1#!#<NULL>#!#YES#!#halfvec#!#-1#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>
vector_db#!#dbo#!#t#!#b#!#2#!#<NULL>#!#YES#!#varchar#!#-1#!#-1#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#<NULL>#!#chinese_prc_ci_as#!#<NULL>#!#<NULL>#!#<NULL>
~~END~~

select count(*) from sys.columns where object_id = sys.object_id('t')
go
~~START~~
int
2
~~END~~

drop table t;
go

-- Testing with different typmod 
CREATE TABLE document_embeddings (
    id int PRIMARY KEY,
    embedding halfvec(4) NOT NULL
);
go
CREATE INDEX document_embeddings_embedding_idx ON document_embeddings USING hnsw (embedding vector_l2_ops);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: operator class "vector_l2_ops" does not accept data type halfvec)~~

INSERT INTO document_embeddings(id, embedding) VALUES(1, CAST('[21,-2,0,2.5]' as halfvec));
INSERT INTO document_embeddings(id, embedding) VALUES(2, CAST('[5, 10000, -9.75, 8]' as halfvec));
INSERT INTO document_embeddings(id, embedding) VALUES(3, CAST('[-0.02,23,3.14,00]' as halfvec));
WITH cte AS (
    SELECT CAST(2e2 AS real) a, 80 b, CAST('-65519' AS real) c, -1 d
)
INSERT INTO document_embeddings(id, embedding) SELECT 4, CAST(CONCAT('[',a, ',', b, ',', c, ',', d, ']') as halfvec) FROM cte; 
go
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

SELECT * FROM document_embeddings;
go
~~START~~
int#!#varchar
1#!#[21,-2,0,2.5]
2#!#[5,10000,-9.75,8]
3#!#[-0.020004272,23,3.140625,0]
4#!#[200,80,-65504,-1]
~~END~~

SELECT TOP 5 * FROM document_embeddings ORDER BY embedding <=> '[3,1,2,4]';
go
~~START~~
int#!#varchar
1#!#[21,-2,0,2.5]
3#!#[-0.020004272,23,3.140625,0]
2#!#[5,10000,-9.75,8]
4#!#[200,80,-65504,-1]
~~END~~

-- extending PG syntax to have generic vector expression support
SELECT count(embedding <-> '[3,1,2,0]') FROM document_embeddings;
SELECT count(embedding <=> '[3,1,2,0]') FROM document_embeddings;
SELECT count(embedding <#> '[3,1,2,0]') FROM document_embeddings; 
go
~~START~~
int
4
~~END~~

~~START~~
int
4
~~END~~

~~START~~
int
4
~~END~~


-- WHERE clause expressions
SELECT * FROM document_embeddings WHERE embedding <-> '[3,20, 1,-2.5]' < 5;
SELECT * FROM document_embeddings WHERE embedding <=> '[3,20, 1,-2.5]' < 5;
SELECT * FROM document_embeddings WHERE embedding <#> '[3,20, 1,-2.5]' < 5; 
go
~~START~~
int#!#varchar
~~END~~

~~START~~
int#!#varchar
1#!#[21,-2,0,2.5]
2#!#[5,10000,-9.75,8]
3#!#[-0.020004272,23,3.140625,0]
4#!#[200,80,-65504,-1]
~~END~~

~~START~~
int#!#varchar
1#!#[21,-2,0,2.5]
2#!#[5,10000,-9.75,8]
3#!#[-0.020004272,23,3.140625,0]
~~END~~


SELECT AVG(embedding) FROM document_embeddings;
go
~~START~~
varchar
[56.5,2526,-16376,2.375]
~~END~~


SELECT id, AVG(embedding) FROM document_embeddings GROUP BY id;
go
~~START~~
int#!#varchar
2#!#[5,10000,-9.75,8]
3#!#[-0.020004272,23,3.140625,0]
4#!#[200,80,-65504,-1]
1#!#[21,-2,0,2.5]
~~END~~


Drop table document_embeddings
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL) 
WHERE sys.suser_name(usesysid) = 'vector_login' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
GO
~~START~~
bool
t
~~END~~


-- tsql
use master
go

exec sp_execute_postgresql 'drop extension vector';
go

drop login vector_login
go

drop database vector_db;
go
