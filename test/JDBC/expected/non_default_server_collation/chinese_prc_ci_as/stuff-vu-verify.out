-- NULL
SELECT stuff(NULL, 2, 1, 'ab')
GO
~~START~~
varchar
<NULL>
~~END~~

SELECT stuff('ab', 2, 1, NULL)
GO
~~START~~
varchar
a
~~END~~

SELECT stuff('ab', NULL, 1, 'bc')
GO
~~START~~
varchar
<NULL>
~~END~~

SELECT stuff('ab', 2, NULL, 'bc')
GO
~~START~~
varchar
<NULL>
~~END~~

SELECT stuff('ab', NULL, '1', 'bc')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "varchar" is invalid for argument 3 of stuff function.)~~

SELECT stuff('ab', '2', NULL, 'bc')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "varchar" is invalid for argument 2 of stuff function.)~~

SELECT stuff('ab', NULL, NULL, 'bc')
GO
~~START~~
varchar
<NULL>
~~END~~


-- Different no. of arguments
SELECT stuff('abc', 1, 2)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The stuff function requires 4 arguments)~~


SELECT stuff('abc', 1, 1, 'xy', 1)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The stuff function requires 4 arguments)~~


-- edge case values for second parameter
SELECT stuff('AbdefGhi', 0, 1, 'xy')
GO
~~START~~
varchar
<NULL>
~~END~~


SELECT '|' + stuff('AbdefGhi', -1, 1, 'xy') + '|'
GO
~~START~~
varchar
<NULL>
~~END~~


SELECT stuff('AbdefGhi', 1, 1, 'xy')
GO
~~START~~
varchar
xybdefGhi
~~END~~


SELECT stuff('AbdefGhi', 8, 1, 'xy')
GO
~~START~~
varchar
AbdefGhxy
~~END~~


SELECT stuff('AbdefGhi', 9, 1, 'xy')
GO
~~START~~
varchar
<NULL>
~~END~~


SELECT stuff('AbdefGhi', 2147483648, 1, 'xy')
GO
~~ERROR (Code: 8115)~~

~~ERROR (Message: integer out of range)~~


-- edge case values for third parameter
SELECT stuff('AbdefGhi', 1, 0, 'xy')
GO
~~START~~
varchar
xyAbdefGhi
~~END~~


SELECT stuff('AbdefGhi', 8, 0, 'xy')
GO
~~START~~
varchar
AbdefGhxyi
~~END~~


SELECT stuff('AbdefGhi', 1, -1, 'xy')
GO
~~START~~
varchar
<NULL>
~~END~~


SELECT stuff('AbdefGhi', 8, -1, 'xy')
GO
~~START~~
varchar
<NULL>
~~END~~


SELECT stuff('AbdefGhi', 2, 9, 'xy')
GO
~~START~~
varchar
Axy
~~END~~


SELECT stuff('AbdefGhi', 2, 2147483648, 'xy')
GO
~~ERROR (Code: 8115)~~

~~ERROR (Message: integer out of range)~~


-- input type char
DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString CHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcxyz??wuytgdy?            efghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyz??wuytgdy?            efghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NVARCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARCHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcxyz??wuytgdy?efghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcefefghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcefefghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 4, 2, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
abcxyz??wuytgdy?efghi??             
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 0, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 26, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, -1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, 25, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
axyz??wuytgdy?
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
æ¯”æ‹‰Â·æ¯”
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString CHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”æ‹‰Â·æ¯”
~~END~~


-- input type varchar
DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString CHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcxyz??wuytgdy?            efghi??
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyz??wuytgdy?            efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NVARCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARCHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcxyz??wuytgdy?efghi??
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcefefghi??
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
abcefefghi??
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 4, 2, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
abcxyz??wuytgdy?efghi??
~~END~~

SELECT stuff('abcðŸ™‚defghiðŸ™‚ðŸ™‚', 4, 2, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
abcxyz??wuytgdy?efghi??
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 0, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 26, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, -1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, 25, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
varchar
axyz??wuytgdy?
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

SELECT stuff('æ¯”å°”Â·æ‹‰èŽ«æ–¯', 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”')
GO
~~START~~
varchar
æ¯”æ‹‰Â·æ¯”
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

SELECT stuff('æ¯”å°”Â·æ‹‰èŽ«æ–¯', 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString VARCHAR(25) = 'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
varchar
æ¯”æ‹‰Â·æ¯”
~~END~~


-- with table column of type varchar with collation chinese_prc_ci_as
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_chinese_prc_ci_as
GO
~~START~~
varchar
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯æ–¯
~~END~~

SELECT stuff(a, 4, 2, 'æ‹‰Â·æ¯”') FROM babel_4838_stuff_chinese_prc_ci_as
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~


SELECT stuff(a, 4, 2, a) COLLATE CHINESE_PRC_CI_AS FROM babel_4838_stuff_chinese_prc_ci_as
GO
~~START~~
varchar
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯æ–¯
~~END~~

SELECT stuff(a, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS FROM babel_4838_stuff_chinese_prc_ci_as
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~


-- with table column of type varchar with collation chinese_prc_cs_as
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_chinese_prc_cs_as
GO
~~START~~
varchar
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯æ–¯
~~END~~

SELECT stuff(a, 4, 2, 'æ‹‰Â·æ¯”') FROM babel_4838_stuff_chinese_prc_cs_as
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~


SELECT stuff(a, 4, 2, a) COLLATE CHINESE_PRC_CS_AS FROM babel_4838_stuff_chinese_prc_cs_as
GO
~~START~~
varchar
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯æ–¯
~~END~~

SELECT stuff(a, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CS_AS FROM babel_4838_stuff_chinese_prc_cs_as
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~


-- with table column of type varchar with collation chinese_prc_ci_ai
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_chinese_prc_ci_ai
GO
~~START~~
varchar
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯æ–¯
~~END~~

SELECT stuff(a, 4, 2, 'æ‹‰Â·æ¯”') FROM babel_4838_stuff_chinese_prc_ci_ai
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~


SELECT stuff(a, 4, 2, a) COLLATE CHINESE_PRC_CI_AI FROM babel_4838_stuff_chinese_prc_ci_ai
GO
~~START~~
varchar
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯æ–¯
~~END~~

SELECT stuff(a, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AI FROM babel_4838_stuff_chinese_prc_ci_ai
GO
~~START~~
varchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~


-- with table column of type varchar with collation arabic_prc_ci_as
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_arabic_ci_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ø§Ù„Ù„Ù‡ Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~

SELECT stuff(a, 4, 2, 'Ù…Ø¹Ù‚ÙŠØ§Ù„') FROM babel_4838_stuff_arabic_ci_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ù…Ø¹Ù‚ÙŠØ§Ù„Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~


SELECT stuff(a, 4, 2, a) COLLATE ARABIC_CI_AS FROM babel_4838_stuff_arabic_ci_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ø§Ù„Ù„Ù‡ Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~

SELECT stuff(a, 4, 2, 'Ù…Ø¹Ù‚ÙŠØ§Ù„') COLLATE ARABIC_CI_AS FROM babel_4838_stuff_arabic_ci_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ù…Ø¹Ù‚ÙŠØ§Ù„Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~


-- with table column of type varchar with collation arabic_prc_cs_as
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_arabic_cs_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ø§Ù„Ù„Ù‡ Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~

SELECT stuff(a, 4, 2, 'Ù…Ø¹Ù‚ÙŠØ§Ù„') FROM babel_4838_stuff_arabic_cs_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ù…Ø¹Ù‚ÙŠØ§Ù„Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~


SELECT stuff(a, 4, 2, a) COLLATE ARABIC_CS_AS FROM babel_4838_stuff_arabic_cs_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ø§Ù„Ù„Ù‡ Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~

SELECT stuff(a, 4, 2, 'Ù…Ø¹Ù‚ÙŠØ§Ù„') COLLATE ARABIC_CS_AS FROM babel_4838_stuff_arabic_cs_as
GO
~~START~~
varchar
Ø§Ù„Ù„Ù…Ø¹Ù‚ÙŠØ§Ù„Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~


-- with table column of type varchar with collation arabic_prc_ci_ai
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_arabic_ci_ai
GO
~~START~~
varchar
Ø§Ù„Ù„Ø§Ù„Ù„Ù‡ Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~

SELECT stuff(a, 4, 2, 'Ù…Ø¹Ù‚ÙŠØ§Ù„') FROM babel_4838_stuff_arabic_ci_ai
GO
~~START~~
varchar
Ø§Ù„Ù„Ù…Ø¹Ù‚ÙŠØ§Ù„Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~


SELECT stuff(a, 4, 2, a) COLLATE ARABIC_CI_AI FROM babel_4838_stuff_arabic_ci_ai
GO
~~START~~
varchar
Ø§Ù„Ù„Ø§Ù„Ù„Ù‡ Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~

SELECT stuff(a, 4, 2, 'Ù…Ø¹Ù‚ÙŠØ§Ù„') COLLATE ARABIC_CI_AI FROM babel_4838_stuff_arabic_ci_ai
GO
~~START~~
varchar
Ø§Ù„Ù„Ù…Ø¹Ù‚ÙŠØ§Ù„Ù…Ø¹ Ø§Ù„Ù…ØªÙ‚ÙŠÙ†
~~END~~


-- input type nchar
DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString CHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyz??wuytgdy?            efghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyz??wuytgdy?            efghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NVARCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARCHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcefefghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcefefghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 4, 2, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghi??             
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 0, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 26, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, -1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, 25, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
axyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
æ¯”æ‹‰Â·æ¯”
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯             
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”æ‹‰Â·æ¯”
~~END~~


-- with table column of type nchar
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_t1 
GO
~~START~~
nvarchar
abcabcðŸ™‚defghiðŸ™‚ðŸ™‚                                      efghiðŸ™‚ðŸ™‚                                      
æ¯”å°”Â·æ¯”å°”Â·æ‹‰èŽ«æ–¯                                            æ–¯                                            
~~END~~


-- input type nvarchar
DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString CHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyz??wuytgdy?            efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyz??wuytgdy?            efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString NVARCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARCHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcefefghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
abcefefghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 4, 2, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 0, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 26, 1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, -1, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'abcðŸ™‚defghiðŸ™‚ðŸ™‚'
SELECT stuff(@inputString, 2, 25, 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚')
GO
~~START~~
nvarchar
axyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”')
GO
~~START~~
nvarchar
æ¯”æ‹‰Â·æ¯”
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString CHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”                   æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString NVARCHAR(25) = N'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARCHAR(25) = 'æ‹‰Â·æ¯”'
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString) COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·efæ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”å°”Â·æ‹‰Â·æ¯”æ–¯
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 0, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 26, 1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, -1, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
<NULL>
~~END~~

DECLARE @inputString NVARCHAR(25) = N'æ¯”å°”Â·æ‹‰èŽ«æ–¯'
SELECT stuff(@inputString, 2, 25, 'æ‹‰Â·æ¯”') COLLATE CHINESE_PRC_CI_AS
GO
~~START~~
nvarchar
æ¯”æ‹‰Â·æ¯”
~~END~~


-- input type binary
DECLARE @inputString BINARY(10) = 0x6162636465666768
DECLARE @replaceString CHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F202020202020202020202020666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
DECLARE @replaceString NCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F202020202020202020202020666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
DECLARE @replaceString NVARCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
DECLARE @replaceString VARCHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
6162636566666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
6162636566666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 4, 2, 0x6566)
GO
~~START~~
varbinary
6162636566666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
varbinary
616263C0ADA1A4B1C8666768
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')  COLLATE CHINESE_PRC_CI_AS
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: collations are not supported by type varbinary)~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 0, 1, 0x6566)
GO
~~START~~
varbinary
<NULL>
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 13, 1, 0x6566)
GO
~~START~~
varbinary
<NULL>
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 2, -1, 0x6566)
GO
~~START~~
varbinary
<NULL>
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 2, 15, 0x6566)
GO
~~START~~
varbinary
616566
~~END~~


-- input type varbinary
DECLARE @inputString VARBINARY(10) = 0x6162636465666768
DECLARE @replaceString CHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F202020202020202020202020666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
DECLARE @replaceString NCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F202020202020202020202020666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
DECLARE @replaceString NVARCHAR(25) = N'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
DECLARE @replaceString VARCHAR(25) = 'xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚'
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
61626378797A3F3F777579746764793F666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
DECLARE @replaceString BINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
6162636566666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
DECLARE @replaceString VARBINARY(10) = 0x6566
SELECT stuff(@inputString, 4, 2, @replaceString)
GO
~~START~~
varbinary
6162636566666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 4, 2, 0x6566)
GO
~~START~~
varbinary
6162636566666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')
GO
~~START~~
varbinary
616263C0ADA1A4B1C8666768
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 4, 2, 'æ‹‰Â·æ¯”')  COLLATE CHINESE_PRC_CI_AS
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: collations are not supported by type varbinary)~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 0, 1, 0x6566)
GO
~~START~~
varbinary
<NULL>
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 13, 1, 0x6566)
GO
~~START~~
varbinary
<NULL>
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 2, -1, 0x6566)
GO
~~START~~
varbinary
<NULL>
~~END~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768
SELECT stuff(@inputString, 2, 15, 0x6566)
GO
~~START~~
varbinary
616566
~~END~~


-- dependent objects
SELECT * FROM babel_4838_stuff_dep_view
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~


EXEC babel_4838_stuff_dep_proc
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~


SELECT * FROM babel_4838_stuff_dep_func()
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~


SELECT * FROM babel_4838_stuff_itvf_func()
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~


SELECT * FROM babel_4838_stuff_dep_view_1
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚                                      
æ¯”å°”Â·xyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚æ–¯                                            
~~END~~


SELECT * FROM babel_4838_stuff_dep_view_2
GO
~~START~~
nvarchar
abcxyzðŸ™‚ðŸ™‚wuytgdyðŸ™‚efghiðŸ™‚ðŸ™‚
~~END~~


SELECT * FROM babel_4838_stuff_dep_view_3
GO
~~START~~
varchar
abcxyz??wuytgdy?fghi                                         
~~END~~


SELECT * FROM babel_4838_stuff_dep_view_4
GO
~~START~~
varchar
abcxyz??wuytgdy?fghi
~~END~~


SELECT * FROM babel_4838_stuff_dep_view_5
GO
~~START~~
varbinary
2020616566642020
~~END~~


-- input type UDT
-- in table babel_4838_stuff_UDT, col 'a' has basetype image and col 'b' has basetype varchar
SELECT stuff(a, 4, 2, a) FROM babel_4838_stuff_UDT
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type image is invalid for argument 1 of stuff function.)~~


SELECT stuff(b, 4, 2, b) FROM babel_4838_stuff_UDT
GO
~~START~~
varchar
abcabcdeff
~~END~~


-- other different datatypes, should throw error
DECLARE @inputString date = '2016-12-21';
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type date is invalid for argument 1 of stuff function.)~~

DECLARE @inputString date = '2016-12-21';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type date is invalid for argument 2 of stuff function.)~~

DECLARE @inputString date = '2016-12-21';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type date is invalid for argument 3 of stuff function.)~~

DECLARE @inputString date = '2016-12-21';
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type date is invalid for argument 4 of stuff function.)~~


DECLARE @date date = '12-21-16';  
DECLARE @inputString datetime = @date;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime is invalid for argument 1 of stuff function.)~~

DECLARE @date date = '12-21-16';  
DECLARE @inputString datetime = @date;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime is invalid for argument 2 of stuff function.)~~

DECLARE @date date = '12-21-16';  
DECLARE @inputString datetime = @date;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime is invalid for argument 3 of stuff function.)~~

DECLARE @date date = '12-21-16';  
DECLARE @inputString datetime = @date;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime is invalid for argument 4 of stuff function.)~~


DECLARE @inputString smalldatetime = '1955-12-13 12:43:10';
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smalldatetime is invalid for argument 1 of stuff function.)~~

DECLARE @inputString smalldatetime = '1955-12-13 12:43:10';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smalldatetime is invalid for argument 2 of stuff function.)~~

DECLARE @inputString smalldatetime = '1955-12-13 12:43:10';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smalldatetime is invalid for argument 3 of stuff function.)~~

DECLARE @inputString smalldatetime = '1955-12-13 12:43:10';
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smalldatetime is invalid for argument 4 of stuff function.)~~


DECLARE @inputString time(4) = '12:10:05.1237';
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type time without time zone is invalid for argument 1 of stuff function.)~~

DECLARE @inputString time(4) = '12:10:05.1237';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type time without time zone is invalid for argument 2 of stuff function.)~~

DECLARE @inputString time(4) = '12:10:05.1237';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type time without time zone is invalid for argument 3 of stuff function.)~~

DECLARE @inputString time(4) = '12:10:05.1237';
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type time without time zone is invalid for argument 4 of stuff function.)~~


DECLARE @inputString datetimeoffset(4) = '1968-10-23 12:45:37.1234 +10:0';
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetimeoffset is invalid for argument 1 of stuff function.)~~

DECLARE @inputString datetimeoffset(4) = '1968-10-23 12:45:37.1234 +10:0';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetimeoffset is invalid for argument 2 of stuff function.)~~

DECLARE @inputString datetimeoffset(4) = '1968-10-23 12:45:37.1234 +10:0';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetimeoffset is invalid for argument 3 of stuff function.)~~

DECLARE @inputString datetimeoffset(4) = '1968-10-23 12:45:37.1234 +10:0';
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetimeoffset is invalid for argument 4 of stuff function.)~~


DECLARE @inputString datetime2(4) = '1968-10-23 12:45:37.1237';
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime2 is invalid for argument 1 of stuff function.)~~

DECLARE @inputString datetime2(4) = '1968-10-23 12:45:37.1237';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime2 is invalid for argument 2 of stuff function.)~~

DECLARE @inputString datetime2(4) = '1968-10-23 12:45:37.1237';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime2 is invalid for argument 3 of stuff function.)~~

DECLARE @inputString datetime2(4) = '1968-10-23 12:45:37.1237';
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type datetime2 is invalid for argument 4 of stuff function.)~~


DECLARE @inputString decimal = 123456;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "decimal" is invalid for argument 1 of stuff function.)~~

DECLARE @inputString decimal = 123456;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "decimal" is invalid for argument 2 of stuff function.)~~

DECLARE @inputString decimal = 123456;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "decimal" is invalid for argument 3 of stuff function.)~~

DECLARE @inputString decimal = 123456;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "decimal" is invalid for argument 4 of stuff function.)~~


DECLARE @inputString numeric = 12345.12;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type numeric is invalid for argument 1 of stuff function.)~~

DECLARE @inputString numeric = 12345.12;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type numeric is invalid for argument 2 of stuff function.)~~

DECLARE @inputString numeric = 12345.12;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type numeric is invalid for argument 3 of stuff function.)~~

DECLARE @inputString numeric = 12345.12;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type numeric is invalid for argument 4 of stuff function.)~~


DECLARE @inputString float = 12345.1;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type double precision is invalid for argument 1 of stuff function.)~~

DECLARE @inputString float = 12345.1;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type double precision is invalid for argument 2 of stuff function.)~~

DECLARE @inputString float = 12345.1;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type double precision is invalid for argument 3 of stuff function.)~~

DECLARE @inputString float = 12345.1;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type double precision is invalid for argument 4 of stuff function.)~~


DECLARE @inputString real = 12345.1;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type real is invalid for argument 1 of stuff function.)~~

DECLARE @inputString real = 12345.1;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type real is invalid for argument 2 of stuff function.)~~

DECLARE @inputString real = 12345.1;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type real is invalid for argument 3 of stuff function.)~~

DECLARE @inputString real = 12345.1;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type real is invalid for argument 4 of stuff function.)~~


DECLARE @inputString bigint = 12345678;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type bigint is invalid for argument 1 of stuff function.)~~

DECLARE @inputString bigint = 12345678;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~START~~
varchar
<NULL>
~~END~~

DECLARE @inputString bigint = 12345678;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~START~~
varchar
abcd
~~END~~

DECLARE @inputString bigint = 12345678;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type bigint is invalid for argument 4 of stuff function.)~~


DECLARE @inputString int = 12345678;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type integer is invalid for argument 1 of stuff function.)~~

DECLARE @inputString int = 12345678;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type integer is invalid for argument 4 of stuff function.)~~

DECLARE @inputString int = 1;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~START~~
varchar
abcdysd
~~END~~

DECLARE @inputString int = 12345678;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~START~~
varchar
abcd
~~END~~

DECLARE @inputString CHAR(25) = 'xyzd';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type bpchar is invalid for argument 2 of stuff function.)~~

DECLARE @inputString CHAR(25) = 'xyzd';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type bpchar is invalid for argument 3 of stuff function.)~~

DECLARE @inputString VARCHAR(25) = 'xyzd';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "varchar" is invalid for argument 2 of stuff function.)~~

DECLARE @inputString VARCHAR(25) = 'xyzd';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "varchar" is invalid for argument 3 of stuff function.)~~


DECLARE @inputString smallint = 12356;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smallint is invalid for argument 1 of stuff function.)~~

DECLARE @inputString smallint = 12356;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smallint is invalid for argument 4 of stuff function.)~~

DECLARE @inputString smallint = 1;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~START~~
varchar
abcdysd
~~END~~

DECLARE @inputString smallint = 12356;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~START~~
varchar
abcd
~~END~~

DECLARE @inputString NCHAR(25) = N'xyzd';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "nchar" is invalid for argument 2 of stuff function.)~~

DECLARE @inputString NCHAR(25) = N'xyzd';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "nchar" is invalid for argument 3 of stuff function.)~~

DECLARE @inputString NVARCHAR(25) = N'xyzd';
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type nvarchar is invalid for argument 2 of stuff function.)~~

DECLARE @inputString NVARCHAR(25) = N'xyzd';
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type nvarchar is invalid for argument 3 of stuff function.)~~


DECLARE @inputString tinyint = 235;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type tinyint is invalid for argument 1 of stuff function.)~~

DECLARE @inputString tinyint = 235;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type tinyint is invalid for argument 4 of stuff function.)~~

DECLARE @inputString tinyint = 1;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~START~~
varchar
abcdysd
~~END~~

DECLARE @inputString tinyint = 235;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~START~~
varchar
abcd
~~END~~

DECLARE @inputString BINARY(10) = 0x6162636465666768;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "binary" is invalid for argument 2 of stuff function.)~~

DECLARE @inputString BINARY(10) = 0x6162636465666768;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "binary" is invalid for argument 3 of stuff function.)~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type varbinary is invalid for argument 2 of stuff function.)~~

DECLARE @inputString VARBINARY(10) = 0x6162636465666768;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type varbinary is invalid for argument 3 of stuff function.)~~


DECLARE @inputString money = 12356;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type money is invalid for argument 1 of stuff function.)~~

DECLARE @inputString money = 12356;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type money is invalid for argument 2 of stuff function.)~~

DECLARE @inputString money = 12356;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type money is invalid for argument 3 of stuff function.)~~

DECLARE @inputString money = 12356;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type money is invalid for argument 4 of stuff function.)~~


DECLARE @inputString smallmoney = 12356;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smallmoney is invalid for argument 1 of stuff function.)~~

DECLARE @inputString smallmoney = 12356;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smallmoney is invalid for argument 2 of stuff function.)~~

DECLARE @inputString smallmoney = 12356;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smallmoney is invalid for argument 3 of stuff function.)~~

DECLARE @inputString smallmoney = 12356;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type smallmoney is invalid for argument 4 of stuff function.)~~


DECLARE @inputString bit = 1;
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "bit" is invalid for argument 1 of stuff function.)~~

DECLARE @inputString bit = 1;
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "bit" is invalid for argument 2 of stuff function.)~~

DECLARE @inputString bit = 1;
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "bit" is invalid for argument 3 of stuff function.)~~

DECLARE @inputString bit = 1;
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type "bit" is invalid for argument 4 of stuff function.)~~


DECLARE @inputString uniqueidentifier = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS uniqueidentifier)
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type uniqueidentifier is invalid for argument 1 of stuff function.)~~

DECLARE @inputString uniqueidentifier = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS uniqueidentifier)
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type uniqueidentifier is invalid for argument 2 of stuff function.)~~

DECLARE @inputString uniqueidentifier = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS uniqueidentifier)
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type uniqueidentifier is invalid for argument 3 of stuff function.)~~

DECLARE @inputString uniqueidentifier = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS uniqueidentifier)
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type uniqueidentifier is invalid for argument 4 of stuff function.)~~


SELECT stuff(a, 4, 2, 'abcd') from babel_4838_stuff_image;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type image is invalid for argument 1 of stuff function.)~~

SELECT stuff('abcd', a, 2, 'abcd') from babel_4838_stuff_image;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type image is invalid for argument 2 of stuff function.)~~

SELECT stuff('abcd', 4, a, 'abcd') from babel_4838_stuff_image;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type image is invalid for argument 3 of stuff function.)~~

SELECT stuff('abcd', 4, 2, a) from babel_4838_stuff_image;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type image is invalid for argument 4 of stuff function.)~~


-- input datatype text
SELECT stuff(a, 4, 2, 'abcd') FROM babel_4838_stuff_text
GO
~~START~~
varchar
abcabcdefghi??
~~END~~

SELECT stuff('abcd', a, 2, 'abcd') FROM babel_4838_stuff_text
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type text is invalid for argument 2 of stuff function.)~~

SELECT stuff('abcd', 4, a, 'abcd') FROM babel_4838_stuff_text
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type text is invalid for argument 3 of stuff function.)~~

SELECT stuff('abcd', 4, 2, a) FROM babel_4838_stuff_text
GO
~~START~~
varchar
abcabc?defghi??
~~END~~


-- input datatype ntext
SELECT stuff(b, 4, 2, 'abcd') FROM babel_4838_stuff_text
GO
~~START~~
nvarchar
abcabcdefghiðŸ™‚ðŸ™‚
~~END~~

SELECT stuff('abcd', b, 2, 'abcd') FROM babel_4838_stuff_text
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type ntext is invalid for argument 2 of stuff function.)~~

SELECT stuff('abcd', 4, b, 'abcd') FROM babel_4838_stuff_text
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type ntext is invalid for argument 3 of stuff function.)~~

SELECT stuff('abcd', 4, 2, b) FROM babel_4838_stuff_text
GO
~~START~~
nvarchar
abcabcðŸ™‚defghiðŸ™‚ðŸ™‚
~~END~~


DECLARE @inputString sql_variant = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS sql_variant)
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type sql_variant is invalid for argument 1 of stuff function.)~~

DECLARE @inputString sql_variant = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS sql_variant)
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type sql_variant is invalid for argument 2 of stuff function.)~~

DECLARE @inputString sql_variant = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS sql_variant)
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type sql_variant is invalid for argument 3 of stuff function.)~~

DECLARE @inputString sql_variant = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS sql_variant)
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type sql_variant is invalid for argument 4 of stuff function.)~~


DECLARE @inputString xml = CAST ('<body><fruit/></body>' AS xml)
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type xml is invalid for argument 1 of stuff function.)~~

DECLARE @inputString xml = CAST ('<body><fruit/></body>' AS xml)
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type xml is invalid for argument 2 of stuff function.)~~

DECLARE @inputString xml = CAST ('<body><fruit/></body>' AS xml)
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type xml is invalid for argument 3 of stuff function.)~~

DECLARE @inputString xml = CAST ('<body><fruit/></body>' AS xml)
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type xml is invalid for argument 4 of stuff function.)~~


DECLARE @inputString geometry = geometry::STGeomFromText('POINT (1 2)', 0);
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geometry is invalid for argument 1 of stuff function.)~~

DECLARE @inputString geometry = geometry::STGeomFromText('POINT (1 2)', 0);
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geometry is invalid for argument 2 of stuff function.)~~

DECLARE @inputString geometry = geometry::STGeomFromText('POINT (1 2)', 0);
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geometry is invalid for argument 3 of stuff function.)~~

DECLARE @inputString geometry = geometry::STGeomFromText('POINT (1 2)', 0);
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geometry is invalid for argument 4 of stuff function.)~~


DECLARE @inputString geography = geography::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
SELECT stuff(@inputString, 4, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geography is invalid for argument 1 of stuff function.)~~

DECLARE @inputString geography = geography::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
SELECT stuff('xysd', @inputString, 1, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geography is invalid for argument 2 of stuff function.)~~

DECLARE @inputString geography = geography::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
SELECT stuff('xysd', 1, @inputString, 'abcd')
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geography is invalid for argument 3 of stuff function.)~~

DECLARE @inputString geography = geography::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
SELECT stuff('abcd', 4, 1, @inputString)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument data type geography is invalid for argument 4 of stuff function.)~~


DECLARE @inputString sql_variant = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS sql_variant)
SELECT stuff(CAST(@inputString AS VARCHAR(50)), 4, 1, 'abcd')
GO
~~START~~
varchar
6F9abcd19FF-8B86-D011-B42D-00C04FC964FF
~~END~~

DECLARE @inputString sql_variant = CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS sql_variant)
SELECT stuff('abcd', 4, 1, CAST(@inputString AS VARCHAR(50)))
GO
~~START~~
varchar
abc6F9619FF-8B86-D011-B42D-00C04FC964FF
~~END~~


DECLARE @inputString xml = CAST ('<body><fruit/></body>' AS xml)
SELECT stuff(CAST(@inputString AS VARCHAR(50)), 4, 1, 'abcd')
GO
~~START~~
varchar
<boabcdy><fruit/></body>
~~END~~

DECLARE @inputString xml = CAST ('<body><fruit/></body>' AS xml)
SELECT stuff('abcd', 4, 1, CAST(@inputString AS VARCHAR(50)))
GO
~~START~~
varchar
abc<body><fruit/></body>
~~END~~


DECLARE @inputString geometry = geometry::STGeomFromText('POINT (1 2)', 0);
SELECT stuff(CAST(@inputString AS VARCHAR(50)), 4, 1, 'abcd')
GO
~~START~~
varchar
POIabcdT(1 2)
~~END~~

DECLARE @inputString geometry = geometry::STGeomFromText('POINT (1 2)', 0);
SELECT stuff('abcd', 4, 1, CAST(@inputString AS VARCHAR(50)))
GO
~~START~~
varchar
abcPOINT(1 2)
~~END~~

