---------------------------------------------------
--- Check for inconsistent metadata after upgrade
----------------------------------------------------
SELECT COUNT(*) FROM sys.babelfish_inconsistent_metadata();
GO
~~START~~
int
0
~~END~~


--------------------------------------------------
--- CREATE PARTITION FUNCTION/SCHEME/TABLE using procedure
--------------------------------------------------
EXEC PartitionProcedureCreatePartitionFunction
GO

EXEC PartitionProcedureCreatePartitionScheme
GO

EXEC PartitionProcedureCreatePartitionTable
GO

EXEC PartitionProcedureCreatePartitionFunctionSchemeAndTable
GO

--------------------------------------------------
--- CREATE PARTITION FUNCTION/SCHEME/TABLE inside Function
--------------------------------------------------
CREATE FUNCTION TestFunctionCreatePartitionFunction()
RETURNS INT
AS
BEGIN
    CREATE PARTITION FUNCTION TestPartitionFunction (int)
    AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
    RETURN 1;
END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid use of a side-effecting operator 'CREATE PARTITION FUNCTION' within a function.)~~


CREATE FUNCTION TestFunctionDropPartitionFunction()
RETURNS INT
AS
BEGIN
    DROP PARTITION FUNCTION IntPartitionFunction;
    RETURN 1;
END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid use of a side-effecting operator 'DROP PARTITION FUNCTION' within a function.)~~


CREATE FUNCTION TestFunctionCreatePartitionScheme()
RETURNS INT
AS
BEGIN
    CREATE PARTITION SCHEME TestPartitionScheme AS
    PARTITION IntPartitionFunction
    ALL TO ([PRIMARY]);
    RETURN 1;
END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid use of a side-effecting operator 'CREATE PARTITION SCHEME' within a function.)~~


CREATE FUNCTION TestFunctionDropPartitionScheme()
RETURNS INT
AS
BEGIN
    DROP PARTITION SCHEME IntPartitionScheme;
    RETURN 1;
END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid use of a side-effecting operator 'DROP PARTITION SCHEME' within a function.)~~


CREATE FUNCTION TestFunctionCreatePartitionTable()
RETURNS INT
AS
BEGIN
    CREATE TABLE TestPartitionTable (
    Id INT,
    Value sys.varchar(20)
    ) ON IntPartitionScheme(Id);
END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: DDL cannot be used within a function)~~


CREATE FUNCTION TestFunctionDropPartitionTable()
RETURNS INT
AS
BEGIN
    DROP TABLE partition_vu_prepare_int_table;
    RETURN 1;
END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: DDL cannot be used within a function)~~



---------------------------------------------------------
--- CREATE PARTITION FUNCTION/SCHEME using 2-part name
---------------------------------------------------------
CREATE PARTITION FUNCTION [TestDb].[TwoPartParitionFunction](DATE)
AS RANGE RIGHT FOR VALUES ('20230101', '20230201', '20230301', '20230401');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '.' at line 4 and character position 34)~~


CREATE PARTITION SCHEME [TestDb].[TwoPartParitionScheme]
AS PARTITION [TestDb].[TwoPartPF]
TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '.' at line 1 and character position 32)~~


--------------------------------------------------
--- Unsupported Datatypes for Partition Function 
--------------------------------------------------
CREATE PARTITION FUNCTION VarcharMaxPartitionFunction (VARCHAR(MAX)) 
AS RANGE RIGHT FOR VALUES ('A', 'B', 'C', 'D');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'varchar(max)' is not valid for this operation.)~~


CREATE PARTITION FUNCTION NVarcharMaxPartitionFunction (NVARCHAR(MAX)) 
AS RANGE RIGHT FOR VALUES (N'A', N'B', N'C', N'D');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'nvarchar(max)' is not valid for this operation.)~~


CREATE PARTITION FUNCTION VarbinaryMaxPartitionFunction (VARBINARY(MAX)) 
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 0xC000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'varbinary(max)' is not valid for this operation.)~~


CREATE PARTITION FUNCTION BinaryMaxPartitionFunction (BINARY(MAX))
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 0xC000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Incorrect syntax near the keyword 'binary'.)~~


CREATE PARTITION FUNCTION TextPartitionFunction (text)
AS RANGE RIGHT FOR VALUES ('a', 'b', 'c');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'text' is not valid for this operation.)~~


CREATE PARTITION FUNCTION NTextPartitionFunction (ntext)
AS RANGE RIGHT FOR VALUES (N'a', N'b', N'c');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'ntext' is not valid for this operation.)~~


CREATE PARTITION FUNCTION ImagePartitionFunction (image)
AS RANGE RIGHT FOR VALUES (0x123456, 0x789ABC, 0xDEF012);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'image' is not valid for this operation.)~~


CREATE PARTITION FUNCTION XmlPartitionFunction (xml)
AS RANGE RIGHT FOR VALUES ('<a>1</a>', '<b>2</b>', '<c>3</c>');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'xml' is not valid for this operation.)~~


CREATE PARTITION FUNCTION GeometryPartitionFunction (GEOMETRY)
AS RANGE RIGHT FOR VALUES (GEOMETRY::STGeomFromText('POINT(1 1)', 0));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'geometry' is not valid for this operation.)~~


CREATE PARTITION FUNCTION GeometryPartitionFunction (GEOGRAPHY)
AS RANGE RIGHT FOR VALUES (GEOMETRY::STGeomFromText('POINT(1 1)', 0));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'geography' is not valid for this operation.)~~


-- to test rowversion and timestamp
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_rowversion', 'ignore', 'false')
go
~~START~~
text
ignore
~~END~~


CREATE PARTITION FUNCTION RowVersionPartitionFunction (ROWVERSION)
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x0000000000000001, 0x0000000000000002);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'rowversion' is not valid for this operation.)~~


CREATE PARTITION FUNCTION TimestampPartitionFunction (TIMESTAMP)
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x0000000000000001, 0x0000000000000002);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'timestamp' is not valid for this operation.)~~


-- reset back the escape hatch
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_rowversion', 'strict', 'true')
go
~~START~~
text
strict
~~END~~


-- user defined type
CREATE TYPE PartitionUserDefinedType FROM VARCHAR(10);
GO

CREATE PARTITION FUNCTION UdtPartitionFunction (PartitionUserDefinedType)
AS RANGE RIGHT FOR VALUES ('a', 'b', 'c');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The type 'partitionuserdefinedtype' is not valid for this operation.)~~


DROP type PartitionUserDefinedType
GO

------------------------------------------------------------------------------
--- Duplicate range values for all supported datatypes in Partition Function 
------------------------------------------------------------------------------
CREATE PARTITION FUNCTION IntPartitionFunctionContainsDuplicateValue (int) 
AS RANGE RIGHT FOR VALUES (0, 100, 1000, 100);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION BigIntPartitionFunctionContainsDuplicateValue (bigint)
AS RANGE RIGHT FOR VALUES (0, 500, 100, 500, 1000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION SmallIntPartitionFunctionContainsDuplicateValue (smallint) 
AS RANGE RIGHT FOR VALUES (32767, 10, -32768, 0, 10);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION TinyIntPartitionFunctionContainsDuplicateValue (tinyint)
AS RANGE RIGHT FOR VALUES (0, 255, 128, 255);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION DecimalPartitionFunctionContainsDuplicateValue (decimal(10, 5))
AS RANGE RIGHT FOR VALUES (0.0, 300.0, 200.0, 100.0, 300.0);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION NumericPartitionFunctionContainsDuplicateValue (numeric(5, 2))
AS RANGE RIGHT FOR VALUES (0.0, 30.0, 10.0, 20.0, 30.0);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION DatePartitionFunctionContainsDuplicateValue (date) 
AS RANGE RIGHT FOR VALUES ('2022-07-01', '2022-01-01','2023-01-01','2022-01-01');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION DateTimePartitionFunctionContainsDuplicateValue (datetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01 00:00:00', '2019-01-01 00:00:00', '2022-01-01');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION DateTime2PartitionFunctionContainsDuplicateValue (datetime2(3))
AS RANGE RIGHT FOR VALUES ('2022-01-01 00:00:00.000', '2022-07-01 00:00:00.000', '2019-01-01 00:00:00.000', '2022-07-01 00:00:00.000');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION SmallDateTimePartitionFunctionContainsDuplicateValue (smalldatetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01', '2019-01-01', '2022-07-01');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION CharPartitionFunctionContainsDuplicateValue (char(5))
AS RANGE RIGHT FOR VALUES ('A', 'F', 'K', 'P', 'U', 'Z', 'D', 'K');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION VarCharPartitionFunctionContainsDuplicateValue (varchar(10))
AS RANGE RIGHT FOR VALUES ('Apple', 'Banana', 'Mango', 'Cherry', 'Date', 'Banana');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION NVarCharPartitionFunctionContainsDuplicateValue (nvarchar(10))
AS RANGE RIGHT FOR VALUES (N'Apple', N'Banana', N'Mango', N'Cherry', N'Date', N'Banana');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION NCharPartitionFunctionContainsDuplicateValue (nchar(5))
AS RANGE RIGHT FOR VALUES (N'A', N'F', N'K', N'P', N'U', N'Z', N'B',  N'K');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION BinaryPartitionFunctionContainsDuplicateValue (binary(4))
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 0xC000, 0x800);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION VarBinaryPartitionFunctionContainsDuplicateValue (varbinary(8))
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x8000000000000000, 0x4000000000000000, 0xC000000000000000, 0x8000000000000000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION UniqueIdentifierPartitionFunctionContainsDuplicateValue (uniqueidentifier)
AS RANGE RIGHT FOR VALUES ('00000000-0000-0000-0000-000000000000', '6F9619FF-8B86-D011-B42D-00C04FC964FF', 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF', '6F9619FF-8B86-D011-B42D-00C04FC964FF');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION SqlVariantPartitionFunctionContainsDuplicateValue (sql_variant)
AS RANGE RIGHT FOR VALUES (1, 'abc', CONVERT(DATETIME, '2023-05-01'), 'abc');
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


-- duplicate value with different basetype 
CREATE PARTITION FUNCTION SqlVariantPartitionFunctionContainsDuplicateValue (sql_variant)
AS RANGE RIGHT FOR VALUES (1, cast('abc' as varchar(10)), CONVERT(DATETIME, '2023-05-01'), cast('abc' as nvarchar(10)));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Duplicate values are not allowed in partition function boundary values list.)~~


--------------------------------------------------
--- Unsupported Options with Partition Function 
--------------------------------------------------
-- LEFT option is not supported in Babelfish
CREATE PARTITION FUNCTION PartitionFunctionWithLeft (int)
AS RANGE LEFT FOR VALUES (10, 1000, 10000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARTIION FUNCTION with LEFT option' is not currently supported in Babelfish)~~


-- by default it is LEFT and it should throw error
CREATE PARTITION FUNCTION PartitionFunctionWithLeft (int)
AS RANGE FOR VALUES (10, 1000, 10000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARTIION FUNCTION with LEFT option' is not currently supported in Babelfish)~~


-- NULL value is not supported in range values
CREATE PARTITION FUNCTION PartitionFunctionWithNULL (int)
AS RANGE RIGHT FOR VALUES (10, 1000, NULL);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: NULL values are not allowed in partition function boundary values list.)~~


CREATE PARTITION FUNCTION PartitionFunctionWithNULL (int)
AS RANGE RIGHT FOR VALUES (10, 1000, NULL, NULL);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: NULL values are not allowed in partition function boundary values list.)~~


--------------------------------------------------
--- Duplicate Create of Partition Function/Scheme
--------------------------------------------------
CREATE PARTITION FUNCTION IntPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: There is already an object named 'IntPartitionFunction' in the database.)~~


-- duplicate partition function with invalid args
CREATE PARTITION FUNCTION IntPartitionFunction (int)
AS RANGE RIGHT FOR VALUES ('xyz', CONVERT(DATETIME, '2023-05-01'), 0x789ABC);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: There is already an object named 'IntPartitionFunction' in the database.)~~


CREATE PARTITION SCHEME IntPartitionScheme AS
PARTITION IntPartitionFunction 
ALL TO ([PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: There is already an object named 'IntPartitionScheme' in the database.)~~


-- duplicate partition scheme with invalid Partition function
CREATE PARTITION SCHEME IntPartitionScheme AS
PARTITION PartitionFunctionDoesNotExists 
ALL TO ([PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid object name 'PartitionFunctionDoesNotExists'.)~~


-----------------------------------------------------------------------------------
--- Drop of of Partition Function/Scheme when it does not exists
-----------------------------------------------------------------------------------
DROP PARTITION FUNCTION PartitionFunctionDoesNotExists
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the partition function 'PartitionFunctionDoesNotExists', because it does not exist or you do not have permission.)~~


DROP PARTITION SCHEME PartitionSchemeDoesNotExists
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the partition scheme 'PartitionSchemeDoesNotExists', because it does not exist or you do not have permission.)~~


-----------------------------------------------------------------------------------
--- Create of Partition Scheme when provided partition function doesn't exists
-----------------------------------------------------------------------------------
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION PartitionFunctionDoesNotExists
ALL TO ([PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid object name 'PartitionFunctionDoesNotExists'.)~~


-----------------------------------------------------------------------------------
--- Drop of of Partition Function when there is dependent Partition Scheme
-----------------------------------------------------------------------------------
DROP PARTITION FUNCTION IntPartitionFunction
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition function 'IntPartitionFunction' is being used by one or more partition schemes.)~~


-----------------------------------------------------------------------------------
--- Drop of of Partition Scheme when there is dependent Table on it
-----------------------------------------------------------------------------------
DROP PARTITION SCHEME IntPartitionScheme
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The partition scheme "IntPartitionScheme" is currently being used to partition one or more tables.)~~




-----------------------------------------------
--- Filegroup behaviour with Partition Scheme 
-----------------------------------------------
-- by default user filegroup will be treated as PRIMARY filegroup
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
ALL TO (user_filegroup);
GO

DROP PARTITION SCHEME TestPartitionScheme
GO

-- User can configure the "escape_hatch_storage_options" to STRICT to disallow user filegroups
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_storage_options', 'strict', 'false')
GO
~~START~~
text
strict
~~END~~


-- should throw error
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
ALL TO (user_filegroup);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'user filegroup' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_storage_options to ignore)~~


-- reset it back
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_storage_options', 'ignore', 'false')
GO
~~START~~
text
ignore
~~END~~


-- when more than one filegroup are specified with ALL option
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
ALL TO ([PRIMARY], [PRIMARY], [PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Only a single filegroup can be specified while creating partition scheme using option ALL to specify all the filegroups.)~~


-- when partition function generates more partition than specified filegroups
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
TO ([PRIMARY], [PRIMARY], [PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The associated partition function 'IntPartitionFunction' generates more partitions than there are file groups mentioned in the scheme 'TestPartitionScheme'.)~~



---------------------------------
--- Metadata Related Tests
---------------------------------
SELECT * FROM GetPartitionFunctionMetadataView
GO
~~START~~
nvarchar#!#char#!#nvarchar#!#int#!#bit#!#bit
BigIntPartitionFunction#!#R #!#RANGE#!#5#!#1#!#0
BinaryPartitionFunction#!#R #!#RANGE#!#5#!#1#!#0
CharPartitionFunction#!#R #!#RANGE#!#8#!#1#!#0
DatePartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
DateTime2PartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
DateTimePartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
DecimalPartitionFunction#!#R #!#RANGE#!#5#!#1#!#0
IntPartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
MoneyPartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
NCharPartitionFunction#!#R #!#RANGE#!#8#!#1#!#0
NumericPartitionFunction#!#R #!#RANGE#!#5#!#1#!#0
NVarCharPartitionFunction#!#R #!#RANGE#!#6#!#1#!#0
PARTITION_FUNCTION  유니코드스키마👻  #!#R #!#RANGE#!#4#!#1#!#0
PARTITION_FUNCTION 😎$@ #123 🌍rder  #!#R #!#RANGE#!#4#!#1#!#0
PARTITION_FUNCTIONログインαιώνια#!#R #!#RANGE#!#4#!#1#!#0
PartitionFunctionHavingDifferentCollationInput#!#R #!#RANGE#!#5#!#1#!#0
PartitionFunctionInsideProc1#!#R #!#RANGE#!#4#!#1#!#0
PartitionFunctionInsideProc2#!#R #!#RANGE#!#4#!#1#!#0
PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#R #!#RANGE#!#5#!#1#!#0
PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#R #!#RANGE#!#5#!#1#!#0
SmallDateTimePartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
SmallIntPartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
SmallMoneyPartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
SqlVariantPartitionFunction#!#R #!#RANGE#!#6#!#1#!#0
TinyIntPartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
UniqueIdentifierPartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
VarBinaryPartitionFunction#!#R #!#RANGE#!#5#!#1#!#0
VarCharPartitionFunction#!#R #!#RANGE#!#6#!#1#!#0
~~END~~


SELECT * FROM GetRangeMetadataView
GO
~~START~~
nvarchar#!#int#!#int#!#sql_variant
BigIntPartitionFunction#!#1#!#1#!#0
BigIntPartitionFunction#!#1#!#2#!#100
BigIntPartitionFunction#!#1#!#3#!#1000
BigIntPartitionFunction#!#1#!#4#!#10000
CharPartitionFunction#!#1#!#1#!#A    
CharPartitionFunction#!#1#!#2#!#D    
CharPartitionFunction#!#1#!#3#!#F    
CharPartitionFunction#!#1#!#4#!#K    
CharPartitionFunction#!#1#!#5#!#P    
CharPartitionFunction#!#1#!#6#!#U    
CharPartitionFunction#!#1#!#7#!#Z    
DatePartitionFunction#!#1#!#1#!#2022-01-01
DatePartitionFunction#!#1#!#2#!#2022-07-01
DatePartitionFunction#!#1#!#3#!#2023-01-01
DateTime2PartitionFunction#!#1#!#1#!#2019-01-01 00:00:00.0
DateTime2PartitionFunction#!#1#!#2#!#2022-01-01 00:00:00.0
DateTime2PartitionFunction#!#1#!#3#!#2022-07-01 00:00:00.0
DateTimePartitionFunction#!#1#!#1#!#2019-01-01 00:00:00.0
DateTimePartitionFunction#!#1#!#2#!#2022-01-01 00:00:00.0
DateTimePartitionFunction#!#1#!#3#!#2022-07-01 00:00:00.0
DecimalPartitionFunction#!#1#!#1#!#0.00000
DecimalPartitionFunction#!#1#!#2#!#100.00000
DecimalPartitionFunction#!#1#!#3#!#200.00000
DecimalPartitionFunction#!#1#!#4#!#300.00000
IntPartitionFunction#!#1#!#1#!#0
IntPartitionFunction#!#1#!#2#!#500
IntPartitionFunction#!#1#!#3#!#1000
MoneyPartitionFunction#!#1#!#1#!#2.5679
MoneyPartitionFunction#!#1#!#2#!#3.5679
MoneyPartitionFunction#!#1#!#3#!#4.9100
NCharPartitionFunction#!#1#!#1#!#A    
NCharPartitionFunction#!#1#!#2#!#B    
NCharPartitionFunction#!#1#!#3#!#F    
NCharPartitionFunction#!#1#!#4#!#K    
NCharPartitionFunction#!#1#!#5#!#P    
NCharPartitionFunction#!#1#!#6#!#U    
NCharPartitionFunction#!#1#!#7#!#Z    
NumericPartitionFunction#!#1#!#1#!#0.00
NumericPartitionFunction#!#1#!#2#!#10.00
NumericPartitionFunction#!#1#!#3#!#20.00
NumericPartitionFunction#!#1#!#4#!#30.00
NVarCharPartitionFunction#!#1#!#1#!#Apple
NVarCharPartitionFunction#!#1#!#2#!#Banana
NVarCharPartitionFunction#!#1#!#3#!#Cherry
NVarCharPartitionFunction#!#1#!#4#!#Date
NVarCharPartitionFunction#!#1#!#5#!#Mango
PARTITION_FUNCTION  유니코드스키마👻  #!#1#!#1#!#0
PARTITION_FUNCTION  유니코드스키마👻  #!#1#!#2#!#500
PARTITION_FUNCTION  유니코드스키마👻  #!#1#!#3#!#1000
PARTITION_FUNCTION 😎$@ #123 🌍rder  #!#1#!#1#!#0
PARTITION_FUNCTION 😎$@ #123 🌍rder  #!#1#!#2#!#500
PARTITION_FUNCTION 😎$@ #123 🌍rder  #!#1#!#3#!#1000
PARTITION_FUNCTIONログインαιώνια#!#1#!#1#!#0
PARTITION_FUNCTIONログインαιώνια#!#1#!#2#!#500
PARTITION_FUNCTIONログインαιώνια#!#1#!#3#!#1000
PartitionFunctionHavingDifferentCollationInput#!#1#!#1#!#châu phố
PartitionFunctionHavingDifferentCollationInput#!#1#!#2#!#Jane Smith
PartitionFunctionHavingDifferentCollationInput#!#1#!#3#!#John Doe
PartitionFunctionHavingDifferentCollationInput#!#1#!#4#!#Müller GmbH
PartitionFunctionInsideProc1#!#1#!#1#!#500
PartitionFunctionInsideProc1#!#1#!#2#!#1000
PartitionFunctionInsideProc1#!#1#!#3#!#10000
PartitionFunctionInsideProc2#!#1#!#1#!#500
PartitionFunctionInsideProc2#!#1#!#2#!#1000
PartitionFunctionInsideProc2#!#1#!#3#!#10000
PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#1#!#1#!#0
PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#1#!#2#!#100
PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#1#!#3#!#1000
PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#1#!#4#!#10000
PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#1#!#1#!#0
PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#1#!#2#!#100
PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#1#!#3#!#1000
PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#1#!#4#!#10000
SmallDateTimePartitionFunction#!#1#!#1#!#2019-01-01 00:00:00.0
SmallDateTimePartitionFunction#!#1#!#2#!#2022-01-01 00:00:00.0
SmallDateTimePartitionFunction#!#1#!#3#!#2022-07-01 00:00:00.0
SmallIntPartitionFunction#!#1#!#1#!#-32768
SmallIntPartitionFunction#!#1#!#2#!#0
SmallIntPartitionFunction#!#1#!#3#!#32767
SmallMoneyPartitionFunction#!#1#!#1#!#2.5679
SmallMoneyPartitionFunction#!#1#!#2#!#3.5679
SmallMoneyPartitionFunction#!#1#!#3#!#4.9100
SqlVariantPartitionFunction#!#1#!#1#!#abc  
SqlVariantPartitionFunction#!#1#!#2#!#Apple
SqlVariantPartitionFunction#!#1#!#3#!#Banana
SqlVariantPartitionFunction#!#1#!#4#!#Some text
SqlVariantPartitionFunction#!#1#!#5#!#xyz  
TinyIntPartitionFunction#!#1#!#1#!#0
TinyIntPartitionFunction#!#1#!#2#!#128
TinyIntPartitionFunction#!#1#!#3#!#255
UniqueIdentifierPartitionFunction#!#1#!#1#!#00000000-0000-0000-0000-000000000000
UniqueIdentifierPartitionFunction#!#1#!#2#!#6F9619FF-8B86-D011-B42D-00C04FC964FF
UniqueIdentifierPartitionFunction#!#1#!#3#!#FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF
VarCharPartitionFunction#!#1#!#1#!#Apple
VarCharPartitionFunction#!#1#!#2#!#Banana
VarCharPartitionFunction#!#1#!#3#!#Cherry
VarCharPartitionFunction#!#1#!#4#!#Date
VarCharPartitionFunction#!#1#!#5#!#Mango
~~END~~


SELECT * FROM GetRangeMetadataVarBinaryFunctionView
GO
~~START~~
nvarchar#!#int#!#int#!#varbinary
BinaryPartitionFunction#!#1#!#1#!#00000000
BinaryPartitionFunction#!#1#!#2#!#04000000
BinaryPartitionFunction#!#1#!#3#!#08000000
BinaryPartitionFunction#!#1#!#4#!#C0000000
VarBinaryPartitionFunction#!#1#!#1#!#0000000000000000
VarBinaryPartitionFunction#!#1#!#2#!#4000000000000000
VarBinaryPartitionFunction#!#1#!#3#!#8000000000000000
VarBinaryPartitionFunction#!#1#!#4#!#C000000000000000
~~END~~


SELECT * FROM GetParameterMetadataView
GO
~~START~~
nvarchar#!#varchar#!#int#!#smallint#!#tinyint#!#tinyint#!#varchar
BigIntPartitionFunction#!#bigint#!#1#!#8#!#19#!#0#!#<NULL>
BinaryPartitionFunction#!#binary#!#1#!#8000#!#0#!#0#!#<NULL>
CharPartitionFunction#!#char#!#1#!#8000#!#0#!#0#!#bbf_unicode_cp1_ci_as
DatePartitionFunction#!#date#!#1#!#3#!#10#!#0#!#<NULL>
DateTime2PartitionFunction#!#datetime2#!#1#!#8#!#26#!#6#!#<NULL>
DateTimePartitionFunction#!#datetime#!#1#!#8#!#23#!#3#!#<NULL>
DecimalPartitionFunction#!#decimal#!#1#!#17#!#38#!#38#!#<NULL>
IntPartitionFunction#!#int#!#1#!#4#!#10#!#0#!#<NULL>
MoneyPartitionFunction#!#money#!#1#!#8#!#19#!#4#!#<NULL>
NCharPartitionFunction#!#nchar#!#1#!#8000#!#0#!#0#!#bbf_unicode_cp1_ci_as
NumericPartitionFunction#!#numeric#!#1#!#17#!#38#!#38#!#<NULL>
NVarCharPartitionFunction#!#nvarchar#!#1#!#8000#!#0#!#0#!#bbf_unicode_cp1_ci_as
PARTITION_FUNCTION  유니코드스키마👻  #!#int#!#1#!#4#!#10#!#0#!#<NULL>
PARTITION_FUNCTION 😎$@ #123 🌍rder  #!#int#!#1#!#4#!#10#!#0#!#<NULL>
PARTITION_FUNCTIONログインαιώνια#!#int#!#1#!#4#!#10#!#0#!#<NULL>
PartitionFunctionHavingDifferentCollationInput#!#nvarchar#!#1#!#8000#!#0#!#0#!#bbf_unicode_cp1_ci_as
PartitionFunctionInsideProc1#!#int#!#1#!#4#!#10#!#0#!#<NULL>
PartitionFunctionInsideProc2#!#int#!#1#!#4#!#10#!#0#!#<NULL>
PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#bigint#!#1#!#8#!#19#!#0#!#<NULL>
PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#bigint#!#1#!#8#!#19#!#0#!#<NULL>
SmallDateTimePartitionFunction#!#smalldatetime#!#1#!#4#!#16#!#0#!#<NULL>
SmallIntPartitionFunction#!#smallint#!#1#!#2#!#5#!#0#!#<NULL>
SmallMoneyPartitionFunction#!#smallmoney#!#1#!#4#!#10#!#4#!#<NULL>
SqlVariantPartitionFunction#!#sql_variant#!#1#!#8016#!#0#!#0#!#bbf_unicode_cp1_ci_as
TinyIntPartitionFunction#!#tinyint#!#1#!#1#!#3#!#0#!#<NULL>
UniqueIdentifierPartitionFunction#!#uniqueidentifier#!#1#!#16#!#0#!#0#!#<NULL>
VarBinaryPartitionFunction#!#varbinary#!#1#!#8000#!#0#!#0#!#<NULL>
VarCharPartitionFunction#!#varchar#!#1#!#8000#!#0#!#0#!#bbf_unicode_cp1_ci_as
~~END~~


SELECT * FROM GetPartitionSchemesMetadataView
GO
~~START~~
nvarchar#!#nvarchar#!#char#!#nvarchar#!#bit#!#bit
BigIntPartitionScheme#!#BigIntPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
BinaryPartitionScheme#!#BinaryPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
CharPartitionScheme#!#CharPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
DatePartitionScheme#!#DatePartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
DateTime2PartitionScheme#!#DateTime2PartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
DateTimePartitionScheme#!#DateTimePartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
DecimalPartitionScheme#!#DecimalPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
IntPartitionScheme#!#IntPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
MoneyPartitionScheme#!#MoneyPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
NCharPartitionScheme#!#NCharPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
NumericPartitionScheme#!#NumericPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
NVarCharPartitionScheme#!#NVarCharPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
PARTITION_SCHEME  유니코드스키마👻  #!#PARTITION_FUNCTION  유니코드스키마👻  #!#PS#!#PARTITION_SCHEME#!#0#!#0
PARTITION_SCHEME 😎$@ #123 🌍rder  #!#PARTITION_FUNCTION 😎$@ #123 🌍rder  #!#PS#!#PARTITION_SCHEME#!#0#!#0
PARTITION_SCHEMEログインαιώνια#!#PARTITION_FUNCTIONログインαιώνια#!#PS#!#PARTITION_SCHEME#!#0#!#0
PartitionSchemeInsideProc1#!#PartitionFunctionInsideProc1#!#PS#!#PARTITION_SCHEME#!#0#!#0
PartitionSchemeInsideProc2#!#PartitionFunctionInsideProc2#!#PS#!#PARTITION_SCHEME#!#0#!#0
PartitionSchemeNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#PartitionFunctionNameGreaterThan64AndLessThan128abcdefghijklmnopqrstuvwxyz#!#PS#!#PARTITION_SCHEME#!#0#!#0
PartitionSchemeNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#PartitionFunctionNameGreaterThan64AndLessThan128HavingEmoji😎$123🌍rder#!#PS#!#PARTITION_SCHEME#!#0#!#0
SmallDateTimePartitionScheme#!#SmallDateTimePartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
SmallIntPartitionScheme#!#SmallIntPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
SmallMoneyPartitionScheme#!#SmallMoneyPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
SqlVariantPartitionScheme#!#SqlVariantPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
TinyIntPartitionScheme#!#TinyIntPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
UniqueIdentifierPartitionScheme#!#UniqueIdentifierPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
VarBinaryPartitionScheme#!#VarBinaryPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
VarCharPartitionScheme#!#VarCharPartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
~~END~~


SELECT * FROM PartitionFunctionContainsDuplicateName()
GO
~~START~~
nvarchar
~~END~~


SELECT * FROM PartitionFunctionContainsDuplicateIDs()
GO
~~START~~
int
~~END~~


SELECT * FROM PartitionSchemeContainsDuplicateName()
GO
~~START~~
nvarchar
~~END~~


SELECT * FROM PartitionSchemeContainsDuplicateIDs()
GO
~~START~~
int
~~END~~


SELECT * FROM GetPartitionSchemeOrFilegroupForTableOrIndex
GO
~~START~~
varchar#!#varchar#!#nvarchar
partition_vu_prepare_bigint_table#!#<NULL>#!#BigIntPartitionScheme
partition_vu_prepare_bigint_table#!#partition_vu_prepare_bigint_ind877afb285426cec9d46b047e3cf96f63#!#BigIntPartitionScheme
partition_vu_prepare_binary_table#!#<NULL>#!#BinaryPartitionScheme
partition_vu_prepare_binary_table#!#partition_vu_prepare_binary_ind48a88b3c8178211af1ed1dcf4cfbe503#!#BinaryPartitionScheme
partition_vu_prepare_char_table#!#<NULL>#!#CharPartitionScheme
partition_vu_prepare_char_table#!#partition_vu_prepare_char_index32fed8129381de1b5745e90cd811516f#!#CharPartitionScheme
partition_vu_prepare_date_table#!#<NULL>#!#DatePartitionScheme
partition_vu_prepare_date_table#!#partition_vu_prepare_date_indexf571a291edad587ba646fc34c4566844#!#DatePartitionScheme
partition_vu_prepare_datetime_table#!#<NULL>#!#DateTimePartitionScheme
partition_vu_prepare_datetime_table#!#partition_vu_prepare_datetime_i364577d0a406eee6e806be980ac15d2e#!#DateTimePartitionScheme
partition_vu_prepare_datetime2_table#!#<NULL>#!#DateTime2PartitionScheme
partition_vu_prepare_datetime2_table#!#partition_vu_prepare_datetime2_4cad7647322c234b34b97cddb3cd1ad6#!#DateTime2PartitionScheme
partition_vu_prepare_decimal_table#!#<NULL>#!#DecimalPartitionScheme
partition_vu_prepare_decimal_table#!#partition_vu_prepare_decimal_infc7570aeccbb040dde39974c476a7ec9#!#DecimalPartitionScheme
partition_vu_prepare_int_table#!#<NULL>#!#IntPartitionScheme
partition_vu_prepare_int_table#!#partition_vu_prepare_int_indexpbbe9a6f0ef5edf6e63fa853dac4ed046#!#IntPartitionScheme
partition_vu_prepare_int_table#!#partition_vu_prepare_int_table_id_key#!#IntPartitionScheme
partition_vu_prepare_money_table#!#<NULL>#!#MoneyPartitionScheme
partition_vu_prepare_money_table#!#partition_vu_prepare_money_inde9b6a61ad06c0883c6d0f95b2fec9eeee#!#MoneyPartitionScheme
partition_vu_prepare_nchar_table#!#<NULL>#!#NCharPartitionScheme
partition_vu_prepare_nchar_table#!#partition_vu_prepare_nchar_indecdc4872501ea902494c8f710f4e9dbb1#!#NCharPartitionScheme
partition_vu_prepare_normal_table#!#<NULL>#!#PRIMARY
partition_vu_prepare_normal_table#!#partition_vu_prepare_normal_inded6315af14d88f45711ba24e46851b8f#!#PRIMARY
partition_vu_prepare_numeric_table#!#<NULL>#!#NumericPartitionScheme
partition_vu_prepare_numeric_table#!#partition_vu_prepare_numeric_inf04f315c86929345e23bee80713cf963#!#NumericPartitionScheme
partition_vu_prepare_nvarchar_table#!#<NULL>#!#NVarCharPartitionScheme
partition_vu_prepare_nvarchar_table#!#partition_vu_prepare_nvarchar_if89fa8cc46282fa6dc23e9f5b834f3ec#!#NVarCharPartitionScheme
partition_vu_prepare_smalldatetime_table#!#<NULL>#!#SmallDateTimePartitionScheme
partition_vu_prepare_smalldatetime_table#!#partition_vu_prepare_smalldatetfe8f8bfb8c766f9a1bcd804238ff35d8#!#SmallDateTimePartitionScheme
partition_vu_prepare_smallint_table#!#<NULL>#!#SmallIntPartitionScheme
partition_vu_prepare_smallint_table#!#partition_vu_prepare_smallint_i3eae48e3a131ed23416aa2891b58d579#!#SmallIntPartitionScheme
partition_vu_prepare_smallmoney_table#!#<NULL>#!#SmallMoneyPartitionScheme
partition_vu_prepare_smallmoney_table#!#partition_vu_prepare_smallmoney68389bf5dc5c581b33c4dbb8a3dc1dc8#!#SmallMoneyPartitionScheme
partition_vu_prepare_sqlvariant_table#!#<NULL>#!#SqlVariantPartitionScheme
partition_vu_prepare_sqlvariant_table#!#partition_vu_prepare_sqlvariant2cb9b179fd5df94b1777b1976b05ad47#!#SqlVariantPartitionScheme
partition_vu_prepare_tinyint_table#!#<NULL>#!#TinyIntPartitionScheme
partition_vu_prepare_tinyint_table#!#partition_vu_prepare_tinyint_in02b271c73e639954190c6a45bd5dd1bb#!#TinyIntPartitionScheme
partition_vu_prepare_uniqueidentifier_table#!#<NULL>#!#UniqueIdentifierPartitionScheme
partition_vu_prepare_uniqueidentifier_table#!#partition_vu_prepare_uniqueidend39220cd3f46c5b2cea8c338a387aedf#!#UniqueIdentifierPartitionScheme
partition_vu_prepare_varbinary_table#!#<NULL>#!#VarBinaryPartitionScheme
partition_vu_prepare_varbinary_table#!#partition_vu_prepare_varbinary_26e1223f68c4186a96126a57446ac386#!#VarBinaryPartitionScheme
partition_vu_prepare_varchar_table#!#<NULL>#!#VarCharPartitionScheme
partition_vu_prepare_varchar_table#!#partition_vu_prepare_varchar_inc528f397ba573964de161e03035b8f08#!#VarCharPartitionScheme
~~END~~


SELECT * FROM GetFileGroupMappingOfPartitionScheme
GO
~~START~~
nvarchar#!#nvarchar#!#int
IntPartitionScheme#!#PRIMARY#!#1
IntPartitionScheme#!#PRIMARY#!#2
IntPartitionScheme#!#PRIMARY#!#3
IntPartitionScheme#!#PRIMARY#!#4
SmallIntPartitionScheme#!#PRIMARY#!#1
SmallIntPartitionScheme#!#PRIMARY#!#2
SmallIntPartitionScheme#!#PRIMARY#!#3
SmallIntPartitionScheme#!#PRIMARY#!#4
SmallIntPartitionScheme#!#PRIMARY#!#5
~~END~~


SELECT * FROM GetPartitionedTablePartitioningColumn
GO
~~START~~
varchar#!#varchar#!#tinyint
partition_vu_prepare_bigint_table#!#id#!#1
partition_vu_prepare_binary_table#!#id#!#1
partition_vu_prepare_char_table#!#id#!#1
partition_vu_prepare_date_table#!#id#!#1
partition_vu_prepare_datetime_table#!#id#!#1
partition_vu_prepare_datetime2_table#!#id#!#1
partition_vu_prepare_decimal_table#!#id#!#1
partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_money_table#!#id#!#1
partition_vu_prepare_nchar_table#!#id#!#1
partition_vu_prepare_numeric_table#!#id#!#1
partition_vu_prepare_nvarchar_table#!#id#!#1
partition_vu_prepare_smalldatetime_table#!#id#!#1
partition_vu_prepare_smallint_table#!#id#!#1
partition_vu_prepare_smallmoney_table#!#id#!#1
partition_vu_prepare_sqlvariant_table#!#id#!#1
partition_vu_prepare_tinyint_table#!#id#!#1
partition_vu_prepare_uniqueidentifier_table#!#id#!#1
partition_vu_prepare_varbinary_table#!#id#!#1
partition_vu_prepare_varchar_table#!#id#!#1
~~END~~


SELECT * FROM GetPartitionedIndexPartitioningColumn
GO
~~START~~
varchar#!#varchar#!#varchar#!#tinyint
partition_vu_prepare_bigint_ind877afb285426cec9d46b047e3cf96f63#!#partition_vu_prepare_bigint_table#!#id#!#1
partition_vu_prepare_bigint_ind877afb285426cec9d46b047e3cf96f63#!#partition_vu_prepare_bigint_table#!#id#!#1
partition_vu_prepare_binary_ind48a88b3c8178211af1ed1dcf4cfbe503#!#partition_vu_prepare_binary_table#!#id#!#1
partition_vu_prepare_binary_ind48a88b3c8178211af1ed1dcf4cfbe503#!#partition_vu_prepare_binary_table#!#id#!#1
partition_vu_prepare_char_index32fed8129381de1b5745e90cd811516f#!#partition_vu_prepare_char_table#!#id#!#1
partition_vu_prepare_char_index32fed8129381de1b5745e90cd811516f#!#partition_vu_prepare_char_table#!#id#!#1
partition_vu_prepare_date_indexf571a291edad587ba646fc34c4566844#!#partition_vu_prepare_date_table#!#id#!#1
partition_vu_prepare_date_indexf571a291edad587ba646fc34c4566844#!#partition_vu_prepare_date_table#!#id#!#1
partition_vu_prepare_datetime_i364577d0a406eee6e806be980ac15d2e#!#partition_vu_prepare_datetime_table#!#id#!#1
partition_vu_prepare_datetime_i364577d0a406eee6e806be980ac15d2e#!#partition_vu_prepare_datetime_table#!#id#!#1
partition_vu_prepare_datetime2_4cad7647322c234b34b97cddb3cd1ad6#!#partition_vu_prepare_datetime2_table#!#id#!#1
partition_vu_prepare_datetime2_4cad7647322c234b34b97cddb3cd1ad6#!#partition_vu_prepare_datetime2_table#!#id#!#1
partition_vu_prepare_decimal_infc7570aeccbb040dde39974c476a7ec9#!#partition_vu_prepare_decimal_table#!#id#!#1
partition_vu_prepare_decimal_infc7570aeccbb040dde39974c476a7ec9#!#partition_vu_prepare_decimal_table#!#id#!#1
partition_vu_prepare_int_indexpbbe9a6f0ef5edf6e63fa853dac4ed046#!#partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_int_indexpbbe9a6f0ef5edf6e63fa853dac4ed046#!#partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_int_indexpbbe9a6f0ef5edf6e63fa853dac4ed046#!#partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_int_table_id_key#!#partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_int_table_id_key#!#partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_int_table_id_key#!#partition_vu_prepare_int_table#!#id#!#1
partition_vu_prepare_money_inde9b6a61ad06c0883c6d0f95b2fec9eeee#!#partition_vu_prepare_money_table#!#id#!#1
partition_vu_prepare_money_inde9b6a61ad06c0883c6d0f95b2fec9eeee#!#partition_vu_prepare_money_table#!#id#!#1
partition_vu_prepare_nchar_indecdc4872501ea902494c8f710f4e9dbb1#!#partition_vu_prepare_nchar_table#!#id#!#1
partition_vu_prepare_nchar_indecdc4872501ea902494c8f710f4e9dbb1#!#partition_vu_prepare_nchar_table#!#id#!#1
partition_vu_prepare_numeric_inf04f315c86929345e23bee80713cf963#!#partition_vu_prepare_numeric_table#!#id#!#1
partition_vu_prepare_numeric_inf04f315c86929345e23bee80713cf963#!#partition_vu_prepare_numeric_table#!#id#!#1
partition_vu_prepare_nvarchar_if89fa8cc46282fa6dc23e9f5b834f3ec#!#partition_vu_prepare_nvarchar_table#!#id#!#1
partition_vu_prepare_nvarchar_if89fa8cc46282fa6dc23e9f5b834f3ec#!#partition_vu_prepare_nvarchar_table#!#id#!#1
partition_vu_prepare_smalldatetfe8f8bfb8c766f9a1bcd804238ff35d8#!#partition_vu_prepare_smalldatetime_table#!#id#!#1
partition_vu_prepare_smalldatetfe8f8bfb8c766f9a1bcd804238ff35d8#!#partition_vu_prepare_smalldatetime_table#!#id#!#1
partition_vu_prepare_smallint_i3eae48e3a131ed23416aa2891b58d579#!#partition_vu_prepare_smallint_table#!#id#!#1
partition_vu_prepare_smallint_i3eae48e3a131ed23416aa2891b58d579#!#partition_vu_prepare_smallint_table#!#id#!#1
partition_vu_prepare_smallmoney68389bf5dc5c581b33c4dbb8a3dc1dc8#!#partition_vu_prepare_smallmoney_table#!#id#!#1
partition_vu_prepare_smallmoney68389bf5dc5c581b33c4dbb8a3dc1dc8#!#partition_vu_prepare_smallmoney_table#!#id#!#1
partition_vu_prepare_sqlvariant2cb9b179fd5df94b1777b1976b05ad47#!#partition_vu_prepare_sqlvariant_table#!#id#!#1
partition_vu_prepare_sqlvariant2cb9b179fd5df94b1777b1976b05ad47#!#partition_vu_prepare_sqlvariant_table#!#id#!#1
partition_vu_prepare_tinyint_in02b271c73e639954190c6a45bd5dd1bb#!#partition_vu_prepare_tinyint_table#!#id#!#1
partition_vu_prepare_tinyint_in02b271c73e639954190c6a45bd5dd1bb#!#partition_vu_prepare_tinyint_table#!#id#!#1
partition_vu_prepare_uniqueidend39220cd3f46c5b2cea8c338a387aedf#!#partition_vu_prepare_uniqueidentifier_table#!#id#!#1
partition_vu_prepare_uniqueidend39220cd3f46c5b2cea8c338a387aedf#!#partition_vu_prepare_uniqueidentifier_table#!#id#!#1
partition_vu_prepare_varbinary_26e1223f68c4186a96126a57446ac386#!#partition_vu_prepare_varbinary_table#!#id#!#1
partition_vu_prepare_varbinary_26e1223f68c4186a96126a57446ac386#!#partition_vu_prepare_varbinary_table#!#id#!#1
partition_vu_prepare_varchar_inc528f397ba573964de161e03035b8f08#!#partition_vu_prepare_varchar_table#!#id#!#1
partition_vu_prepare_varchar_inc528f397ba573964de161e03035b8f08#!#partition_vu_prepare_varchar_table#!#id#!#1
~~END~~


SELECT * FROM GetSysPartitionsMetadata
GO
~~START~~
varchar#!#int#!#int
363863941f079adaa9aa733200e57c9f_partition_0_id_key#!#1#!#2
363863941f079adaa9aa733200e57c9f_partition_0#!#1#!#0
363863941f079adaa9aa733200e57c9f_partition_0_value_idx#!#1#!#3
363863941f079adaa9aa733200e57c9f_partition_1_id_key#!#2#!#2
363863941f079adaa9aa733200e57c9f_partition_1#!#2#!#0
363863941f079adaa9aa733200e57c9f_partition_1_value_idx#!#2#!#3
363863941f079adaa9aa733200e57c9f_partition_2_id_key#!#3#!#2
363863941f079adaa9aa733200e57c9f_partition_2#!#3#!#0
363863941f079adaa9aa733200e57c9f_partition_2_value_idx#!#3#!#3
363863941f079adaa9aa733200e57c9f_partition_3_value_idx#!#4#!#3
363863941f079adaa9aa733200e57c9f_partition_3#!#4#!#0
363863941f079adaa9aa733200e57c9f_partition_3_id_key#!#4#!#2
partition_vu_prepare_normal_inded6315af14d88f45711ba24e46851b8f#!#1#!#2
partition_vu_prepare_normal_table#!#1#!#0
~~END~~








--------------------------------------------------
--- Test Partition Function Argument Limit
--------------------------------------------------
-- create with max allowed limit
DECLARE @partition_count INT = 14998;
DECLARE @partition_interval INT = 1000;
DECLARE @partition_function_definition VARCHAR(MAX) = 'CREATE PARTITION FUNCTION PartitionFunctionWith14999Arg (int) AS RANGE RIGHT FOR VALUES (';
-- Build the partition function definition
DECLARE @i INT = 1;
WHILE @i <= @partition_count
BEGIN
    SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ', '
    SET @i = @i + 1;
END
SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ')'
-- Execute the partition function creation
EXEC (@partition_function_definition)
GO

SELECT fanout FROM sys.partition_functions WHERE name = 'PartitionFunctionWith14999Arg'
GO
~~START~~
int
15000
~~END~~


DROP PARTITION FUNCTION PartitionFunctionWith14999Arg
GO







-- create when arg > max allowed limit should throw error
DECLARE @partition_count INT = 14999;
DECLARE @partition_interval INT = 1000;
DECLARE @partition_function_definition VARCHAR(MAX) = 'CREATE PARTITION FUNCTION PartitionFunctionWith15000Arg (int) AS RANGE RIGHT FOR VALUES (';
-- Build the partition function definition
DECLARE @i INT = 1;
WHILE @i <= @partition_count
BEGIN
    SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ', '
    SET @i = @i + 1;
END
SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ')'
-- Execute the partition function creation
EXEC (@partition_function_definition)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: CREATE/ALTER partition function failed as only a maximum of 15000 partitions can be created.)~~



--------------------------------------------------
--- Test Partition Function/Scheme Name Limit 
--------------------------------------------------
CREATE PARTITION FUNCTION PartitionFunctionNameGreaterThan128abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz (bigint)
AS RANGE RIGHT FOR VALUES (0, 10000, 100, 1000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The identifier that starts with 'PartitionFunctionNameGreaterThan128abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmno' is too long. Maximum length is 128.)~~


CREATE PARTITION SCHEME PartitionSchemeNameGreaterThan128abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz AS
PARTITION PartitionFunctionDoesNotExists 
ALL TO ([PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The identifier that starts with 'PartitionSchemeNameGreaterThan128abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq' is too long. Maximum length is 128.)~~



--------------------------------------------------
--- TO test Permission
--------------------------------------------------
USE PartitionDb;
GO

CREATE LOGIN partition_l1 WITH PASSWORD = '12345678';
GO

CREATE USER partition_u1 FOR LOGIN partition_l1;
GO

-- tsql     user=partition_l1 password=12345678
USE PartitionDb;
GO

SELECT CURRENT_USER
GO
~~START~~
varchar
partition_u1
~~END~~



-- CREATE/DROP should throw permission error
------------------------------------------------------------
--- only db owner and logins which are member of sysadmin
--- are allowed to create/drop partition function and scheme
------------------------------------------------------------
CREATE PARTITION FUNCTION TestPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
Go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to perform this action.)~~


CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION PartitionFunctionDoesNotExists
ALL TO ([PRIMARY]);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: User does not have permission to perform this action.)~~


DROP PARTITION FUNCTION IntPartitionFunction
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the partition function 'IntPartitionFunction', because it does not exist or you do not have permission.)~~


DROP PARTITION SCHEME IntPartitionScheme
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the partition scheme 'IntPartitionScheme', because it does not exist or you do not have permission.)~~


------------------------------------------
--- all user can access the metadata
------------------------------------------
SELECT 
        name, type, type_desc, fanout, boundary_value_on_right, is_system
    FROM 
        sys.partition_functions
go
~~START~~
nvarchar#!#char#!#nvarchar#!#int#!#bit#!#bit
PartitionDb_PartitionFunction#!#R #!#RANGE#!#4#!#1#!#0
~~END~~


SELECT 
       ps.name as scheme_name, pf.name as function_name, ps.type, ps.type_desc, ps.is_default, ps.is_system
    FROM 
        sys.partition_schemes ps
    INNER JOIN 
        sys.partition_functions pf on (ps.function_id = pf.function_id)
go
~~START~~
nvarchar#!#nvarchar#!#char#!#nvarchar#!#bit#!#bit
PartitionDb_PartitionScheme#!#PartitionDb_PartitionFunction#!#PS#!#PARTITION_SCHEME#!#0#!#0
~~END~~



-- psql

------------------------------------------------------------
--- all user can use the metadata of the partition scheme 
--- to create table if they permission to create table
------------------------------------------------------------
-- grant create permission to user on schema so that it can create table
DO $$
DECLARE
    schema_name TEXT;
BEGIN
    IF current_setting('babelfishpg_tsql.migration_mode') = 'multi-db' THEN
        schema_name := 'partitiondb_dbo';
    ELSE
        schema_name := 'dbo';
    END IF;
    EXECUTE 'GRANT CREATE ON SCHEMA ' || quote_ident(schema_name) || ' TO partitiondb_partition_u1';
END$$;
GO

-- tsql     user=partition_l1 password=12345678
USE PartitionDb;
GO

SELECT CURRENT_USER
GO
~~START~~
varchar
partition_u1
~~END~~


CREATE TABLE PartitionDb_TestPartitionTable (
    Id INT,
    Value sys.varchar(20)
) ON PartitionDb_PartitionScheme(Id);
GO

DROP TABLE PartitionDb_TestPartitionTable
GO

-- psql

-- revoke create permission from user on schema
DO $$
DECLARE
    schema_name TEXT;
BEGIN
    IF current_setting('babelfishpg_tsql.migration_mode') = 'multi-db' THEN
        schema_name := 'partitiondb_dbo';
    ELSE
        schema_name := 'dbo';
    END IF;
    EXECUTE 'REVOKE CREATE ON SCHEMA ' || quote_ident(schema_name) || ' FROM partitiondb_partition_u1';
END$$;
GO

-- tsql
-----------------------------------------------------------------------------------
--- DB owner should be able to create/drop partition function and scheme
----------------------------------------------------------------------------------
-- make the user a DB owner
USE PartitionDb;
GO

DROP USER partition_u1;
GO

execute sp_changedbowner 'partition_l1'
GO

-- tsql     user=partition_l1 password=12345678
USE PartitionDb;
GO

SELECT CURRENT_USER
GO
~~START~~
varchar
dbo
~~END~~

--  CREATE/DROP should work now
CREATE PARTITION FUNCTION TestPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
Go

CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION TestPartitionFunction
ALL TO ([PRIMARY]);
GO

DROP PARTITION SCHEME TestPartitionScheme
go

DROP PARTITION FUNCTION TestPartitionFunction
go

-- tsql
USE master
GO


------------------------------------------------------------------------------------------------------------
--- Test error during Implicit Conversion of range values in Partition Function for each datatypes
------------------------------------------------------------------------------------------------------------
CREATE PARTITION FUNCTION NewIntPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, cast('xyz' as varchar));
-- having duplicates also, but first it should try to convert and fail
CREATE PARTITION FUNCTION NewBigIntPartitionFunction (bigint)
AS RANGE RIGHT FOR VALUES (1000,  1000, 1000, cast('xyz' as varchar), 1000, 1000);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewSmallIntPartitionFunction (smallint) 
AS RANGE RIGHT FOR VALUES ('xyz', 32767, -32768);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 1 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewTinyIntPartitionFunction (tinyint)
AS RANGE RIGHT FOR VALUES (0, 255, cast('xyz' as varchar));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewDecimalPartitionFunction (decimal(10, 5))
AS RANGE RIGHT FOR VALUES (0.0, 300.0, 200.0, 'xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 4 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewNumericPartitionFunction (numeric(5, 2))
AS RANGE RIGHT FOR VALUES (0.0, 30.0, 10.0, 'xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 4 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewDatePartitionFunction (date) 
AS RANGE RIGHT FOR VALUES ('2022-07-01', '2022-01-01','xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewDateTimePartitionFunction (datetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01 00:00:00', 'xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewDateTime2PartitionFunction (datetime2(3))
AS RANGE RIGHT FOR VALUES ('2022-01-01 00:00:00.000', '2022-07-01 00:00:00.000', 'xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewSmallDateTimePartitionFunction (smalldatetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01', cast(0x123 as binary(4)));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewCharPartitionFunction (char(5))
AS RANGE RIGHT FOR VALUES ('A', 'F', 'K', 'P', 'U', 'Z', cast(0x123 as binary(4)));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 7 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewNCharPartitionFunction (nchar(5))
AS RANGE RIGHT FOR VALUES (N'A', N'F', N'K', N'P', N'U', N'Z', cast(0x123 as binary(4)));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 7 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewBinaryPartitionFunction (binary(4))
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 'xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 4 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewVarBinaryPartitionFunction (varbinary(8))
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x8000000000000000, 0x4000000000000000, 'xyz');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 4 to partition function parameter type.)~~


CREATE PARTITION FUNCTION NewUniqueIdentifierPartitionFunction (uniqueidentifier)
AS RANGE RIGHT FOR VALUES ('00000000-0000-0000-0000-000000000000', 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF', 123);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Could not implicitly convert range values type specified at ordinal 3 to partition function parameter type.)~~



--------------------------------------------------
--- DROP PARTITION FUNCTION/SCHEME/TABLE using procedure
--------------------------------------------------
EXEC PartitionProcedureDropPartitionTable
GO

EXEC PartitionProcedureDropPartitionScheme
GO

EXEC PartitionProcedureDropPartitionFunction
GO

EXEC PartitionProcedureDropPartitionFunctionSchemeAndTable
GO


---------------------------------------------------------------------------
--- PARTITIONED TABLES test
---------------------------------------------------------------------------
SELECT * FROM GetPartitionedTableListFromSysTablesView
GO
~~START~~
varchar
partition_vu_prepare_bigint_table
partition_vu_prepare_binary_table
partition_vu_prepare_char_table
partition_vu_prepare_date_table
partition_vu_prepare_datetime_table
partition_vu_prepare_datetime2_table
partition_vu_prepare_decimal_table
partition_vu_prepare_int_table
partition_vu_prepare_money_table
partition_vu_prepare_nchar_table
partition_vu_prepare_normal_table
partition_vu_prepare_numeric_table
partition_vu_prepare_nvarchar_table
partition_vu_prepare_smalldatetime_table
partition_vu_prepare_smallint_table
partition_vu_prepare_smallmoney_table
partition_vu_prepare_sqlvariant_table
partition_vu_prepare_tinyint_table
partition_vu_prepare_uniqueidentifier_table
partition_vu_prepare_varbinary_table
partition_vu_prepare_varchar_table
~~END~~


---------------------------------------------------------------------------
--- PARTITIONED INDEX test
---------------------------------------------------------------------------
SELECT * FROM GetPartitionedIndexListFromSysIndexesView
GO
~~START~~
varchar
partition_vu_prepare_bigint_ind877afb285426cec9d46b047e3cf96f63
partition_vu_prepare_binary_ind48a88b3c8178211af1ed1dcf4cfbe503
partition_vu_prepare_char_index32fed8129381de1b5745e90cd811516f
partition_vu_prepare_date_indexf571a291edad587ba646fc34c4566844
partition_vu_prepare_datetime_i364577d0a406eee6e806be980ac15d2e
partition_vu_prepare_datetime2_4cad7647322c234b34b97cddb3cd1ad6
partition_vu_prepare_decimal_infc7570aeccbb040dde39974c476a7ec9
partition_vu_prepare_int_indexpbbe9a6f0ef5edf6e63fa853dac4ed046
partition_vu_prepare_int_table_id_key
partition_vu_prepare_money_inde9b6a61ad06c0883c6d0f95b2fec9eeee
partition_vu_prepare_nchar_indecdc4872501ea902494c8f710f4e9dbb1
partition_vu_prepare_normal_inded6315af14d88f45711ba24e46851b8f
partition_vu_prepare_numeric_inf04f315c86929345e23bee80713cf963
partition_vu_prepare_nvarchar_if89fa8cc46282fa6dc23e9f5b834f3ec
partition_vu_prepare_smalldatetfe8f8bfb8c766f9a1bcd804238ff35d8
partition_vu_prepare_smallint_i3eae48e3a131ed23416aa2891b58d579
partition_vu_prepare_smallmoney68389bf5dc5c581b33c4dbb8a3dc1dc8
partition_vu_prepare_sqlvariant2cb9b179fd5df94b1777b1976b05ad47
partition_vu_prepare_tinyint_in02b271c73e639954190c6a45bd5dd1bb
partition_vu_prepare_uniqueidend39220cd3f46c5b2cea8c338a387aedf
partition_vu_prepare_varbinary_26e1223f68c4186a96126a57446ac386
partition_vu_prepare_varchar_inc528f397ba573964de161e03035b8f08
~~END~~



----------------------------------------------------------------------------------------------
--- System views should list only metadata of Partitioned table(not of the partitions)
----------------------------------------------------------------------------------------------
SELECT count(*) from sys.tables where name = 'partition_vu_prepare_int_table'
GO
~~START~~
int
1
~~END~~


SELECT count(*) from sys.all_columns where object_id = OBJECT_ID('partition_vu_prepare_int_table')
GO
~~START~~
int
2
~~END~~


SELECT count(*) from sys.columns where object_id = OBJECT_ID('partition_vu_prepare_int_table')
GO
~~START~~
int
2
~~END~~


SELECT count(*) from sys.indexes where object_id = OBJECT_ID('partition_vu_prepare_int_table')
GO
~~START~~
int
3
~~END~~


SELECT count(*) from sys.index_columns where object_id = OBJECT_ID('partition_vu_prepare_int_table')
GO
~~START~~
int
5
~~END~~


SELECT count(*) from sys.all_objects where name = 'partition_vu_prepare_int_table'
GO
~~START~~
int
1
~~END~~


SELECT count(*) from sys.sp_tables_view where TABLE_NAME = 'partition_vu_prepare_int_table'
GO
~~START~~
int
1
~~END~~


SELECT count(*) from information_schema.columns where TABLE_NAME = 'partition_vu_prepare_int_table'
GO
~~START~~
int
2
~~END~~


SELECT count(*) from information_schema.tables where TABLE_NAME = 'partition_vu_prepare_int_table'
GO
~~START~~
int
1
~~END~~


SELECT count(*) from information_schema.table_constraints where TABLE_NAME = 'partition_vu_prepare_int_table'
GO
~~START~~
int
2
~~END~~


SELECT count(*) from information_schema.CONSTRAINT_COLUMN_USAGE where TABLE_NAME = 'partition_vu_prepare_int_table'
GO
~~START~~
int
2
~~END~~


SELECT count(*) from information_schema.key_column_usage where TABLE_NAME = 'partition_vu_prepare_int_table'
GO
~~START~~
int
1
~~END~~


---------------------------------------------------------
--- System views should not list metadata of Partitions
---------------------------------------------------------
SELECT count(*) from sys.tables where name = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from sys.all_columns where object_id = OBJECT_ID('363863941f079adaa9aa733200e57c9f_partition_0')
GO
~~START~~
int
0
~~END~~


SELECT count(*) from sys.columns where object_id = OBJECT_ID('363863941f079adaa9aa733200e57c9f_partition_0')
GO
~~START~~
int
0
~~END~~


SELECT count(*) from sys.indexes where object_id = OBJECT_ID('363863941f079adaa9aa733200e57c9f_partition_0')
GO
~~START~~
int
0
~~END~~


SELECT count(*) from sys.index_columns where object_id = OBJECT_ID('363863941f079adaa9aa733200e57c9f_partition_0')
GO
~~START~~
int
0
~~END~~


SELECT count(*) from sys.all_objects where name = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from sys.sp_tables_view where TABLE_NAME = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from information_schema.columns where TABLE_NAME = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from information_schema.tables where TABLE_NAME = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from information_schema.table_constraints where TABLE_NAME = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from information_schema.CONSTRAINT_COLUMN_USAGE where TABLE_NAME = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~


SELECT count(*) from information_schema.key_column_usage where TABLE_NAME = '363863941f079adaa9aa733200e57c9f_partition_0'
GO
~~START~~
int
0
~~END~~




-- psql
---------------------------------------------------------------------------
--- Run analyze on each table and enable query plan
---------------------------------------------------------------------------
ANALYZE master_dbo.partition_vu_prepare_int_table;
ANALYZE master_dbo.partition_vu_prepare_bigint_table;
ANALYZE master_dbo.partition_vu_prepare_smallint_table;
ANALYZE master_dbo.partition_vu_prepare_tinyint_table;
ANALYZE master_dbo.partition_vu_prepare_decimal_table;
ANALYZE master_dbo.partition_vu_prepare_numeric_table;
ANALYZE master_dbo.partition_vu_prepare_money_table;
ANALYZE master_dbo.partition_vu_prepare_smallmoney_table;
ANALYZE master_dbo.partition_vu_prepare_date_table;
ANALYZE master_dbo.partition_vu_prepare_datetime_table;
ANALYZE master_dbo.partition_vu_prepare_datetime2_table;
ANALYZE master_dbo.partition_vu_prepare_smalldatetime_table;
ANALYZE master_dbo.partition_vu_prepare_char_table;
ANALYZE master_dbo.partition_vu_prepare_varchar_table;
ANALYZE master_dbo.partition_vu_prepare_nvarchar_table;
ANALYZE master_dbo.partition_vu_prepare_nchar_table;
ANALYZE master_dbo.partition_vu_prepare_binary_table;
ANALYZE master_dbo.partition_vu_prepare_varbinary_table;
ANALYZE master_dbo.partition_vu_prepare_uniqueidentifier_table;
ANALYZE master_dbo.partition_vu_prepare_sqlvariant_table;
GO

-- tsql
SELECT set_config('babelfishpg_tsql.explain_costs', 'off', false)
GO
~~START~~
text
off
~~END~~


SET BABELFISH_SHOWPLAN_ALL ON
GO


---------------------------------------------------------------------------
--- Query plan of select on partitioned tables
---------------------------------------------------------------------------
SELECT * FROM partition_vu_prepare_int_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_int_table
Append
  ->  Seq Scan on "363863941f079adaa9aa733200e57c9f_partition_1" partition_vu_prepare_int_table_1
  ->  Seq Scan on "363863941f079adaa9aa733200e57c9f_partition_2" partition_vu_prepare_int_table_2
  ->  Seq Scan on "363863941f079adaa9aa733200e57c9f_partition_3" partition_vu_prepare_int_table_3
  ->  Seq Scan on "363863941f079adaa9aa733200e57c9f_partition_0" partition_vu_prepare_int_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.782 ms
~~END~~


SELECT * FROM partition_vu_prepare_bigint_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_bigint_table
Append
  ->  Seq Scan on "548bb344374ce8d65342b36428375873_partition_1" partition_vu_prepare_bigint_table_1
  ->  Seq Scan on "548bb344374ce8d65342b36428375873_partition_2" partition_vu_prepare_bigint_table_2
  ->  Seq Scan on "548bb344374ce8d65342b36428375873_partition_3" partition_vu_prepare_bigint_table_3
  ->  Seq Scan on "548bb344374ce8d65342b36428375873_partition_4" partition_vu_prepare_bigint_table_4
  ->  Seq Scan on "548bb344374ce8d65342b36428375873_partition_0" partition_vu_prepare_bigint_table_5
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.120 ms
~~END~~


SELECT * FROM partition_vu_prepare_smallint_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_smallint_table
Append
  ->  Seq Scan on "12025e103721b70925744c196ce004cd_partition_1" partition_vu_prepare_smallint_table_1
  ->  Seq Scan on "12025e103721b70925744c196ce004cd_partition_2" partition_vu_prepare_smallint_table_2
  ->  Seq Scan on "12025e103721b70925744c196ce004cd_partition_3" partition_vu_prepare_smallint_table_3
  ->  Seq Scan on "12025e103721b70925744c196ce004cd_partition_0" partition_vu_prepare_smallint_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.131 ms
~~END~~


SELECT * FROM partition_vu_prepare_tinyint_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_tinyint_table
Append
  ->  Seq Scan on "61446d711d19b5970809387caa7fd3d3_partition_1" partition_vu_prepare_tinyint_table_1
  ->  Seq Scan on "61446d711d19b5970809387caa7fd3d3_partition_2" partition_vu_prepare_tinyint_table_2
  ->  Seq Scan on "61446d711d19b5970809387caa7fd3d3_partition_3" partition_vu_prepare_tinyint_table_3
  ->  Seq Scan on "61446d711d19b5970809387caa7fd3d3_partition_0" partition_vu_prepare_tinyint_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.120 ms
~~END~~


SELECT * FROM partition_vu_prepare_decimal_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_decimal_table
Append
  ->  Seq Scan on cda2902d769fd61eb60b1a461650212f_partition_1 partition_vu_prepare_decimal_table_1
  ->  Seq Scan on cda2902d769fd61eb60b1a461650212f_partition_2 partition_vu_prepare_decimal_table_2
  ->  Seq Scan on cda2902d769fd61eb60b1a461650212f_partition_3 partition_vu_prepare_decimal_table_3
  ->  Seq Scan on cda2902d769fd61eb60b1a461650212f_partition_4 partition_vu_prepare_decimal_table_4
  ->  Seq Scan on cda2902d769fd61eb60b1a461650212f_partition_0 partition_vu_prepare_decimal_table_5
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.121 ms
~~END~~


SELECT * FROM partition_vu_prepare_numeric_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_numeric_table
Append
  ->  Seq Scan on "57405760297bb338f333c148aac5f845_partition_1" partition_vu_prepare_numeric_table_1
  ->  Seq Scan on "57405760297bb338f333c148aac5f845_partition_2" partition_vu_prepare_numeric_table_2
  ->  Seq Scan on "57405760297bb338f333c148aac5f845_partition_3" partition_vu_prepare_numeric_table_3
  ->  Seq Scan on "57405760297bb338f333c148aac5f845_partition_4" partition_vu_prepare_numeric_table_4
  ->  Seq Scan on "57405760297bb338f333c148aac5f845_partition_0" partition_vu_prepare_numeric_table_5
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.088 ms
~~END~~


SELECT * FROM partition_vu_prepare_money_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_money_table
Append
  ->  Seq Scan on "640187c54e2c2984d190957d245a5fa5_partition_1" partition_vu_prepare_money_table_1
  ->  Seq Scan on "640187c54e2c2984d190957d245a5fa5_partition_2" partition_vu_prepare_money_table_2
  ->  Seq Scan on "640187c54e2c2984d190957d245a5fa5_partition_3" partition_vu_prepare_money_table_3
  ->  Seq Scan on "640187c54e2c2984d190957d245a5fa5_partition_0" partition_vu_prepare_money_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.121 ms
~~END~~


SELECT * FROM partition_vu_prepare_smallmoney_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_smallmoney_table
Append
  ->  Seq Scan on "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_1" partition_vu_prepare_smallmoney_table_1
  ->  Seq Scan on "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_2" partition_vu_prepare_smallmoney_table_2
  ->  Seq Scan on "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_3" partition_vu_prepare_smallmoney_table_3
  ->  Seq Scan on "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_0" partition_vu_prepare_smallmoney_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.101 ms
~~END~~


SELECT * FROM partition_vu_prepare_date_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_date_table
Append
  ->  Seq Scan on "4867824426e52acac5c93d9cbe8aa366_partition_1" partition_vu_prepare_date_table_1
  ->  Seq Scan on "4867824426e52acac5c93d9cbe8aa366_partition_2" partition_vu_prepare_date_table_2
  ->  Seq Scan on "4867824426e52acac5c93d9cbe8aa366_partition_3" partition_vu_prepare_date_table_3
  ->  Seq Scan on "4867824426e52acac5c93d9cbe8aa366_partition_0" partition_vu_prepare_date_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.123 ms
~~END~~


SELECT * FROM partition_vu_prepare_datetime_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_datetime_table
Append
  ->  Seq Scan on "751ce655481adf15600727bf291667f7_partition_1" partition_vu_prepare_datetime_table_1
  ->  Seq Scan on "751ce655481adf15600727bf291667f7_partition_2" partition_vu_prepare_datetime_table_2
  ->  Seq Scan on "751ce655481adf15600727bf291667f7_partition_3" partition_vu_prepare_datetime_table_3
  ->  Seq Scan on "751ce655481adf15600727bf291667f7_partition_0" partition_vu_prepare_datetime_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.122 ms
~~END~~


SELECT * FROM partition_vu_prepare_datetime2_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_datetime2_table
Append
  ->  Seq Scan on "5ed003cf80dacbb8cce0b21e175f7f94_partition_1" partition_vu_prepare_datetime2_table_1
  ->  Seq Scan on "5ed003cf80dacbb8cce0b21e175f7f94_partition_2" partition_vu_prepare_datetime2_table_2
  ->  Seq Scan on "5ed003cf80dacbb8cce0b21e175f7f94_partition_3" partition_vu_prepare_datetime2_table_3
  ->  Seq Scan on "5ed003cf80dacbb8cce0b21e175f7f94_partition_0" partition_vu_prepare_datetime2_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.091 ms
~~END~~


SELECT * FROM partition_vu_prepare_smalldatetime_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_smalldatetime_table
Append
  ->  Seq Scan on b5c2e665ec4a1219ba8510e33e45379b_partition_1 partition_vu_prepare_smalldatetime_table_1
  ->  Seq Scan on b5c2e665ec4a1219ba8510e33e45379b_partition_2 partition_vu_prepare_smalldatetime_table_2
  ->  Seq Scan on b5c2e665ec4a1219ba8510e33e45379b_partition_3 partition_vu_prepare_smalldatetime_table_3
  ->  Seq Scan on b5c2e665ec4a1219ba8510e33e45379b_partition_0 partition_vu_prepare_smalldatetime_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.089 ms
~~END~~


SELECT * FROM partition_vu_prepare_char_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_char_table
Append
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_1" partition_vu_prepare_char_table_1
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_2" partition_vu_prepare_char_table_2
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_3" partition_vu_prepare_char_table_3
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_4" partition_vu_prepare_char_table_4
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_5" partition_vu_prepare_char_table_5
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_6" partition_vu_prepare_char_table_6
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_7" partition_vu_prepare_char_table_7
  ->  Seq Scan on "5d20bd977eb6e6f1304dec45598c09f5_partition_0" partition_vu_prepare_char_table_8
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.124 ms
~~END~~


SELECT * FROM partition_vu_prepare_varchar_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_varchar_table
Append
  ->  Seq Scan on "933a5c7f0de13890324e53ee0711424b_partition_1" partition_vu_prepare_varchar_table_1
  ->  Seq Scan on "933a5c7f0de13890324e53ee0711424b_partition_2" partition_vu_prepare_varchar_table_2
  ->  Seq Scan on "933a5c7f0de13890324e53ee0711424b_partition_3" partition_vu_prepare_varchar_table_3
  ->  Seq Scan on "933a5c7f0de13890324e53ee0711424b_partition_4" partition_vu_prepare_varchar_table_4
  ->  Seq Scan on "933a5c7f0de13890324e53ee0711424b_partition_5" partition_vu_prepare_varchar_table_5
  ->  Seq Scan on "933a5c7f0de13890324e53ee0711424b_partition_0" partition_vu_prepare_varchar_table_6
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.107 ms
~~END~~


SELECT * FROM partition_vu_prepare_nvarchar_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_nvarchar_table
Append
  ->  Seq Scan on "320465af1d1bd21f5b29c57f9f4e5c51_partition_1" partition_vu_prepare_nvarchar_table_1
  ->  Seq Scan on "320465af1d1bd21f5b29c57f9f4e5c51_partition_2" partition_vu_prepare_nvarchar_table_2
  ->  Seq Scan on "320465af1d1bd21f5b29c57f9f4e5c51_partition_3" partition_vu_prepare_nvarchar_table_3
  ->  Seq Scan on "320465af1d1bd21f5b29c57f9f4e5c51_partition_4" partition_vu_prepare_nvarchar_table_4
  ->  Seq Scan on "320465af1d1bd21f5b29c57f9f4e5c51_partition_5" partition_vu_prepare_nvarchar_table_5
  ->  Seq Scan on "320465af1d1bd21f5b29c57f9f4e5c51_partition_0" partition_vu_prepare_nvarchar_table_6
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.099 ms
~~END~~


SELECT * FROM partition_vu_prepare_nchar_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_nchar_table
Append
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_1 partition_vu_prepare_nchar_table_1
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_2 partition_vu_prepare_nchar_table_2
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_3 partition_vu_prepare_nchar_table_3
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_4 partition_vu_prepare_nchar_table_4
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_5 partition_vu_prepare_nchar_table_5
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_6 partition_vu_prepare_nchar_table_6
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_7 partition_vu_prepare_nchar_table_7
  ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_0 partition_vu_prepare_nchar_table_8
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.088 ms
~~END~~


SELECT * FROM partition_vu_prepare_binary_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_binary_table
Append
  ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_1" partition_vu_prepare_binary_table_1
  ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_2" partition_vu_prepare_binary_table_2
  ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_3" partition_vu_prepare_binary_table_3
  ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_4" partition_vu_prepare_binary_table_4
  ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_0" partition_vu_prepare_binary_table_5
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.090 ms
~~END~~


SELECT * FROM partition_vu_prepare_varbinary_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_varbinary_table
Append
  ->  Seq Scan on "77718961234110c3a22a3c977bc252d8_partition_1" partition_vu_prepare_varbinary_table_1
  ->  Seq Scan on "77718961234110c3a22a3c977bc252d8_partition_2" partition_vu_prepare_varbinary_table_2
  ->  Seq Scan on "77718961234110c3a22a3c977bc252d8_partition_3" partition_vu_prepare_varbinary_table_3
  ->  Seq Scan on "77718961234110c3a22a3c977bc252d8_partition_4" partition_vu_prepare_varbinary_table_4
  ->  Seq Scan on "77718961234110c3a22a3c977bc252d8_partition_0" partition_vu_prepare_varbinary_table_5
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.090 ms
~~END~~


SELECT * FROM partition_vu_prepare_uniqueidentifier_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_uniqueidentifier_table
Append
  ->  Seq Scan on f3baf999c06d6ea82082a4c549baeb77_partition_1 partition_vu_prepare_uniqueidentifier_table_1
  ->  Seq Scan on f3baf999c06d6ea82082a4c549baeb77_partition_2 partition_vu_prepare_uniqueidentifier_table_2
  ->  Seq Scan on f3baf999c06d6ea82082a4c549baeb77_partition_3 partition_vu_prepare_uniqueidentifier_table_3
  ->  Seq Scan on f3baf999c06d6ea82082a4c549baeb77_partition_0 partition_vu_prepare_uniqueidentifier_table_4
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.106 ms
~~END~~


SELECT * FROM partition_vu_prepare_sqlvariant_table;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_sqlvariant_table
Append
  ->  Seq Scan on "69727aecbd7d094d31958d173a958827_partition_1" partition_vu_prepare_sqlvariant_table_1
  ->  Seq Scan on "69727aecbd7d094d31958d173a958827_partition_2" partition_vu_prepare_sqlvariant_table_2
  ->  Seq Scan on "69727aecbd7d094d31958d173a958827_partition_3" partition_vu_prepare_sqlvariant_table_3
  ->  Seq Scan on "69727aecbd7d094d31958d173a958827_partition_4" partition_vu_prepare_sqlvariant_table_4
  ->  Seq Scan on "69727aecbd7d094d31958d173a958827_partition_5" partition_vu_prepare_sqlvariant_table_5
  ->  Seq Scan on "69727aecbd7d094d31958d173a958827_partition_0" partition_vu_prepare_sqlvariant_table_6
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.142 ms
~~END~~



-----------------------------------------------------------------------------------------
--- Query plan of select on partitioned tables with predicate and enforced index scan
-----------------------------------------------------------------------------------------
SET BABELFISH_SHOWPLAN_ALL OFF
GO

SELECT set_config('enable_seqscan', 'off', false);
SELECT set_config('enable_bitmapscan', 'off', false);
GO
~~START~~
text
off
~~END~~

~~START~~
text
off
~~END~~


SET BABELFISH_SHOWPLAN_ALL ON
GO


SELECT * FROM partition_vu_prepare_int_table WHERE Id >= 0 AND Id < 500;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_int_table WHERE Id >= 0 AND Id < 500
Index Scan using "363863941f079adaa9aa733200e57c9f_partition_1_id_key" on "363863941f079adaa9aa733200e57c9f_partition_1" partition_vu_prepare_int_table
  Index Cond: ((id >= 0) AND (id < 500))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 34.743 ms
~~END~~


SELECT * FROM partition_vu_prepare_bigint_table WHERE Id >= 0 AND Id < 100;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_bigint_table WHERE Id >= 0 AND Id < 100
Index Scan using "548bb344374ce8d65342b36428375873_partition_1_id_idx" on "548bb344374ce8d65342b36428375873_partition_1" partition_vu_prepare_bigint_table
  Index Cond: ((id >= 0) AND (id < 100))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.201 ms
~~END~~


SELECT * FROM partition_vu_prepare_smallint_table WHERE Id >= -32768 AND Id < 0;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_smallint_table WHERE Id >= -32768 AND Id < 0
Index Scan using "12025e103721b70925744c196ce004cd_partition_1_id_idx" on "12025e103721b70925744c196ce004cd_partition_1" partition_vu_prepare_smallint_table
  Index Cond: ((id >= '-32768'::integer) AND (id < 0))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 7.419 ms
~~END~~


SELECT * FROM partition_vu_prepare_tinyint_table WHERE Id >= 0 AND Id < 128;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_tinyint_table WHERE Id >= 0 AND Id < 128
Index Scan using "61446d711d19b5970809387caa7fd3d3_partition_1_id_idx" on "61446d711d19b5970809387caa7fd3d3_partition_1" partition_vu_prepare_tinyint_table
  Index Cond: (((id)::smallint >= 0) AND ((id)::smallint < 128))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.167 ms
~~END~~


SELECT * FROM partition_vu_prepare_decimal_table WHERE Id >= 0.0 AND Id < 100.0;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_decimal_table WHERE Id >= 0.0 AND Id < 100.0
Index Scan using cda2902d769fd61eb60b1a461650212f_partition_1_id_idx on cda2902d769fd61eb60b1a461650212f_partition_1 partition_vu_prepare_decimal_table
  Index Cond: (((id)::numeric >= 0.0) AND ((id)::numeric < 100.0))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.571 ms
~~END~~


SELECT * FROM partition_vu_prepare_numeric_table WHERE Id >= 0.0 AND Id < 10.0;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_numeric_table WHERE Id >= 0.0 AND Id < 10.0
Index Scan using "57405760297bb338f333c148aac5f845_partition_1_id_idx" on "57405760297bb338f333c148aac5f845_partition_1" partition_vu_prepare_numeric_table
  Index Cond: ((id >= 0.0) AND (id < 10.0))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.237 ms
~~END~~


SELECT * FROM partition_vu_prepare_money_table WHERE Id >= 2.56789 AND Id < 3.56789;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_money_table WHERE Id >= 2.56789 AND Id < 3.56789
Append
  ->  Index Scan using "640187c54e2c2984d190957d245a5fa5_partition_1_id_idx" on "640187c54e2c2984d190957d245a5fa5_partition_1" partition_vu_prepare_money_table_1
        Index Cond: (((id)::fixeddecimal >= 2.56789) AND ((id)::fixeddecimal < 3.56789))
  ->  Index Scan using "640187c54e2c2984d190957d245a5fa5_partition_0_id_idx" on "640187c54e2c2984d190957d245a5fa5_partition_0" partition_vu_prepare_money_table_2
        Index Cond: (((id)::fixeddecimal >= 2.56789) AND ((id)::fixeddecimal < 3.56789))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.223 ms
~~END~~


SELECT * FROM partition_vu_prepare_smallmoney_table WHERE Id >= 2.56789 AND Id < 3.56789;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_smallmoney_table WHERE Id >= 2.56789 AND Id < 3.56789
Append
  ->  Index Scan using "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_1_id_idx" on "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_1" partition_vu_prepare_smallmoney_table_1
        Index Cond: (((id)::fixeddecimal >= 2.56789) AND ((id)::fixeddecimal < 3.56789))
  ->  Index Scan using "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_0_id_idx" on "8acfdf2e7ec8a3fb29dd9f735c4d58b5_partition_0" partition_vu_prepare_smallmoney_table_2
        Index Cond: (((id)::fixeddecimal >= 2.56789) AND ((id)::fixeddecimal < 3.56789))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.154 ms
~~END~~


SELECT * FROM partition_vu_prepare_date_table WHERE Id >= '2022-01-01' AND Id < '2022-07-01';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_date_table WHERE Id >= '2022-01-01' AND Id < '2022-07-01'
Index Scan using "4867824426e52acac5c93d9cbe8aa366_partition_1_id_idx" on "4867824426e52acac5c93d9cbe8aa366_partition_1" partition_vu_prepare_date_table
  Index Cond: ((id >= '2022-01-01'::date) AND (id < '2022-07-01'::date))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.603 ms
~~END~~


SELECT * FROM partition_vu_prepare_datetime_table WHERE Id >= '2019-01-01' AND Id < '2022-01-01';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_datetime_table WHERE Id >= '2019-01-01' AND Id < '2022-01-01'
Index Scan using "751ce655481adf15600727bf291667f7_partition_1_id_idx" on "751ce655481adf15600727bf291667f7_partition_1" partition_vu_prepare_datetime_table
  Index Cond: ((id >= '2019-01-01 00:00:00'::datetime) AND (id < '2022-01-01 00:00:00'::datetime))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.184 ms
~~END~~


SELECT * FROM partition_vu_prepare_datetime2_table WHERE Id >= '2019-01-01' AND Id < '2022-01-01';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_datetime2_table WHERE Id >= '2019-01-01' AND Id < '2022-01-01'
Index Scan using "5ed003cf80dacbb8cce0b21e175f7f94_partition_1_id_idx" on "5ed003cf80dacbb8cce0b21e175f7f94_partition_1" partition_vu_prepare_datetime2_table
  Index Cond: ((id >= '2019-01-01 00:00:00'::datetime2) AND (id < '2022-01-01 00:00:00'::datetime2))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.159 ms
~~END~~


SELECT * FROM partition_vu_prepare_smalldatetime_table WHERE Id >= '2019-01-01' AND Id < '2022-01-01';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_smalldatetime_table WHERE Id >= '2019-01-01' AND Id < '2022-01-01'
Index Scan using b5c2e665ec4a1219ba8510e33e45379b_partition_1_id_idx on b5c2e665ec4a1219ba8510e33e45379b_partition_1 partition_vu_prepare_smalldatetime_table
  Index Cond: ((id >= '2019-01-01 00:00:00'::smalldatetime) AND (id < '2022-01-01 00:00:00'::smalldatetime))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.226 ms
~~END~~


SELECT * FROM partition_vu_prepare_char_table WHERE Id >= 'A' AND Id < 'B';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_char_table WHERE Id >= 'A' AND Id < 'B'
Index Scan using "5d20bd977eb6e6f1304dec45598c09f5_partition_1_id_idx" on "5d20bd977eb6e6f1304dec45598c09f5_partition_1" partition_vu_prepare_char_table
  Index Cond: ((id >= 'A'::bpchar) AND (id < 'B'::bpchar))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.241 ms
~~END~~


SELECT * FROM partition_vu_prepare_varchar_table WHERE Id >= 'Apple' AND Id < 'Banana';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_varchar_table WHERE Id >= 'Apple' AND Id < 'Banana'
Index Scan using "933a5c7f0de13890324e53ee0711424b_partition_1_id_idx" on "933a5c7f0de13890324e53ee0711424b_partition_1" partition_vu_prepare_varchar_table
  Index Cond: ((id >= 'Apple'::"varchar") AND (id < 'Banana'::"varchar"))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.170 ms
~~END~~


SELECT * FROM partition_vu_prepare_nvarchar_table WHERE Id >= N'Apple' AND Id < N'Banana';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_nvarchar_table WHERE Id >= N'Apple' AND Id < N'Banana'
Index Scan using "320465af1d1bd21f5b29c57f9f4e5c51_partition_1_id_idx" on "320465af1d1bd21f5b29c57f9f4e5c51_partition_1" partition_vu_prepare_nvarchar_table
  Index Cond: (((id)::"varchar" >= 'Apple'::"varchar") AND ((id)::"varchar" < 'Banana'::"varchar"))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.161 ms
~~END~~


SELECT * FROM partition_vu_prepare_nchar_table WHERE Id >= N'A' AND Id < N'B';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_nchar_table WHERE Id >= N'A' AND Id < N'B'
Gather
  Workers Planned: 2
  ->  Parallel Append
        ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_3 partition_vu_prepare_nchar_table_3
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_5 partition_vu_prepare_nchar_table_5
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_7 partition_vu_prepare_nchar_table_7
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Parallel Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_1 partition_vu_prepare_nchar_table_1
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Parallel Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_2 partition_vu_prepare_nchar_table_2
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Parallel Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_4 partition_vu_prepare_nchar_table_4
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Parallel Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_6 partition_vu_prepare_nchar_table_6
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
        ->  Parallel Seq Scan on e3b6f45b64d480f285db54a94209b4bc_partition_0 partition_vu_prepare_nchar_table_8
              Filter: (((id)::"varchar" >= 'A'::"varchar") AND ((id)::"varchar" < 'B'::"varchar"))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.159 ms
~~END~~


SELECT * FROM partition_vu_prepare_binary_table WHERE Id >= 0x0000 AND Id < 0x0400;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_binary_table WHERE Id >= 0x0000 AND Id < 0x0400
Gather
  Workers Planned: 2
  ->  Parallel Append
        ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_1" partition_vu_prepare_binary_table_1
              Filter: (((id)::bbf_varbinary >= '0x0000'::bbf_varbinary) AND ((id)::bbf_varbinary < '0x0400'::bbf_varbinary))
        ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_2" partition_vu_prepare_binary_table_2
              Filter: (((id)::bbf_varbinary >= '0x0000'::bbf_varbinary) AND ((id)::bbf_varbinary < '0x0400'::bbf_varbinary))
        ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_3" partition_vu_prepare_binary_table_3
              Filter: (((id)::bbf_varbinary >= '0x0000'::bbf_varbinary) AND ((id)::bbf_varbinary < '0x0400'::bbf_varbinary))
        ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_4" partition_vu_prepare_binary_table_4
              Filter: (((id)::bbf_varbinary >= '0x0000'::bbf_varbinary) AND ((id)::bbf_varbinary < '0x0400'::bbf_varbinary))
        ->  Seq Scan on "3a3cd2fe373a5dc4b9281d49f7960143_partition_0" partition_vu_prepare_binary_table_5
              Filter: (((id)::bbf_varbinary >= '0x0000'::bbf_varbinary) AND ((id)::bbf_varbinary < '0x0400'::bbf_varbinary))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.824 ms
~~END~~


SELECT * FROM partition_vu_prepare_varbinary_table WHERE Id >= 0x0000000000000000 AND Id < 0x4000000000000000;
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_varbinary_table WHERE Id >= 0x0000000000000000 AND Id < 0x4000000000000000
Index Scan using "77718961234110c3a22a3c977bc252d8_partition_1_id_idx" on "77718961234110c3a22a3c977bc252d8_partition_1" partition_vu_prepare_varbinary_table
  Index Cond: (((id)::bbf_varbinary >= '0x0000000000000000'::bbf_varbinary) AND ((id)::bbf_varbinary < '0x4000000000000000'::bbf_varbinary))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.166 ms
~~END~~


SELECT * FROM partition_vu_prepare_uniqueidentifier_table WHERE Id >= '00000000-0000-0000-0000-000000000000' AND Id < '6F9619FF-8B86-D011-B42D-00C04FC964FF';
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_uniqueidentifier_table WHERE Id >= '00000000-0000-0000-0000-000000000000' AND Id < '6F9619FF-8B86-D011-B42D-00C04FC964FF'
Index Scan using f3baf999c06d6ea82082a4c549baeb77_partition_1_id_idx on f3baf999c06d6ea82082a4c549baeb77_partition_1 partition_vu_prepare_uniqueidentifier_table
  Index Cond: ((id >= '00000000-0000-0000-0000-000000000000'::uniqueidentifier) AND (id < '6F9619FF-8B86-D011-B42D-00C04FC964FF'::uniqueidentifier))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.188 ms
~~END~~


SELECT * FROM partition_vu_prepare_sqlvariant_table WHERE Id >= CAST('abc' AS char(5)) AND Id < CAST('Apple' AS VARCHAR(10));
GO
~~START~~
text
Query Text: SELECT * FROM partition_vu_prepare_sqlvariant_table WHERE Id >= CAST('abc' AS char(5)) AND Id < CAST('Apple' AS VARCHAR(10))
Index Scan using "69727aecbd7d094d31958d173a958827_partition_1_id_idx" on "69727aecbd7d094d31958d173a958827_partition_1" partition_vu_prepare_sqlvariant_table
  Index Cond: ((id >= 'abc  '::sql_variant) AND (id < 'Apple'::sql_variant))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 7.191 ms
~~END~~


SET BABELFISH_SHOWPLAN_ALL OFF
GO

SELECT set_config('enable_seqscan', 'on', false);
SELECT set_config('enable_bitmapscan', 'on', false);
SELECT set_config('babelfishpg_tsql.explain_costs', 'on', false)
GO
~~START~~
text
on
~~END~~

~~START~~
text
on
~~END~~

~~START~~
text
on
~~END~~




-- psql
------------------------------------------
--- Blocked Operation For Partitioned Tables
-------------------------------------------
-- user should not be allowed to CREATE/ATTACH/DETACH partition
-- to babelfish partitioned table from psql endpoint
SET ROLE master_dbo;
GO

-- Attempt to create new partition with random values
CREATE TABLE NonExistentTable PARTITION OF master_dbo.partition_vu_prepare_int_table
FOR VALUES FROM (0) TO (500);
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: partition "nonexistenttable" would overlap partition "363863941f079adaa9aa733200e57c9f_partition_1"
  Position: 157
    Server SQLState: 42P17)~~


-- Attempt to create new partition with DEFAULT
CREATE TABLE NonExistentTable PARTITION OF master_dbo.partition_vu_prepare_int_table
DEFAULT
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: partition "nonexistenttable" conflicts with existing default partition "363863941f079adaa9aa733200e57c9f_partition_0"
  Position: 134
    Server SQLState: 42P17)~~


-- Attempt to drop partition of babelfish partitioned table from psql endpoint
DROP TABLE master_dbo."363863941f079adaa9aa733200e57c9f_partition_0";
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot drop the babelfish partition table '363863941f079adaa9aa733200e57c9f_partition_0'.
    Server SQLState: 42704)~~



-- Attempt to detach
-- explicit schema name specified
ALTER TABLE master_dbo.partition_vu_prepare_int_table 
DETACH PARTITION master_dbo."363863941f079adaa9aa733200e57c9f_partition_0";
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot detach partition from babelfish partitioned table 'partition_vu_prepare_int_table'.
    Server SQLState: 0A000)~~


-- using search_path
SET search_path = public, master_dbo;
ALTER TABLE master_dbo.partition_vu_prepare_int_table 
DETACH PARTITION master_dbo."363863941f079adaa9aa733200e57c9f_partition_0";
RESET search_path;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot detach partition from babelfish partitioned table 'partition_vu_prepare_int_table'.
    Server SQLState: 0A000)~~


-- Attempt to detach using CONCURRENTLY option
ALTER TABLE master_dbo.partition_vu_prepare_int_table 
DETACH PARTITION master_dbo."363863941f079adaa9aa733200e57c9f_partition_0"
CONCURRENTLY;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot detach partition from babelfish partitioned table 'partition_vu_prepare_int_table'.
    Server SQLState: 0A000)~~


-- Attempt to detach using FINALIZE option
ALTER TABLE master_dbo.partition_vu_prepare_int_table 
DETACH PARTITION master_dbo."363863941f079adaa9aa733200e57c9f_partition_0"
FINALIZE;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot detach partition from babelfish partitioned table 'partition_vu_prepare_int_table'.
    Server SQLState: 0A000)~~


-- Attempt to attach with Default value
ALTER TABLE master_dbo.partition_vu_prepare_int_table 
ATTACH PARTITION NonExistentTable DEFAULT;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot attach partition to babelfish partitioned table 'partition_vu_prepare_int_table'.
    Server SQLState: 0A000)~~


-- Attempt to attach with random value
ALTER TABLE master_dbo.partition_vu_prepare_int_table 
ATTACH PARTITION NonExistentTable FOR VALUES FROM (10) TO (20);
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Cannot attach partition to babelfish partitioned table 'partition_vu_prepare_int_table'.
    Server SQLState: 0A000)~~



-- user should not be allowed to modify partition 
-- of babelfish partitioned table neither from psql nor tsql endpoint
-- explicit schema name specified
ALTER TABLE master_dbo."363863941f079adaa9aa733200e57c9f_partition_0" 
ADD CONSTRAINT xyz CHECK ( id > 10 and id < 20);
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Modifying partitions directly is not supported. You can modify the partitions by modifying the parent table.
    Server SQLState: 0A000)~~


-- using search_path
SET search_path = public, master_dbo;
ALTER TABLE "363863941f079adaa9aa733200e57c9f_partition_0"
ADD CONSTRAINT xyz CHECK ( id > 10 and id < 20);
RESET search_path;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: Modifying partitions directly is not supported. You can modify the partitions by modifying the parent table.
    Server SQLState: 0A000)~~


RESET ROLE;
GO

-- Attempt to ADD storage parameter to babelfish partitioned table (not on the partitions)
SET babelfishpg_tsql.sql_dialect = "tsql";
GO

ALTER TABLE master_dbo.partition_vu_prepare_int_table SET (autovacuum_enabled = false);
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: cannot specify storage parameters for a partitioned table
  Hint: Specify storage parameters for its leaf partitions instead.
    Server SQLState: 42809)~~


RESET babelfishpg_tsql.sql_dialect;
GO


-- tsql
ALTER TABLE [363863941f079adaa9aa733200e57c9f_partition_0]
ADD new_col int
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Modifying partitions directly is not supported. You can modify the partitions by modifying the parent table.)~~



ALTER TABLE [363863941f079adaa9aa733200e57c9f_partition_0]
ADD CONSTRAINT xyz DEFAULT 10 FOR id;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Modifying partitions directly is not supported. You can modify the partitions by modifying the parent table.)~~


-- with explicity schema name
ALTER TABLE dbo.[363863941f079adaa9aa733200e57c9f_partition_0]
ADD new_col int
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Modifying partitions directly is not supported. You can modify the partitions by modifying the parent table.)~~


ALTER TABLE dbo.[363863941f079adaa9aa733200e57c9f_partition_0]
ADD CONSTRAINT xyz DEFAULT 10 FOR id;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Modifying partitions directly is not supported. You can modify the partitions by modifying the parent table.)~~


-- Attempt to drop partition of babelfish partitioned table from tsql endpoint
DROP TABLE [363863941f079adaa9aa733200e57c9f_partition_0]
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the babelfish partition table '363863941f079adaa9aa733200e57c9f_partition_0'.)~~


--------------------------------------------------------------------
--- Unsupported Option with CREATE TABLE with PARTITION SCHEME
--------------------------------------------------------------------
-- Computed column as partitioning column is not yet supported in babelfish
CREATE TABLE TestPartitionedTable
(
    id INT,
    value INT,
    computed_col AS id + value
)
ON IntPartitionScheme(computed_col);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot use generated column in partition key)~~


CREATE TABLE TestPartitionedTable
(
    id INT,
    value INT,
    computed_col AS id + value PERSISTED
)
ON IntPartitionScheme(computed_col);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot use generated column in partition key)~~


-- temporary table
CREATE TABLE #TestPartitionedTable
(
    id INT,
    value INT
)
ON IntPartitionScheme(id);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Creation of tempopary partitioned tables is not supported in Babelfish.)~~



---------------------------------------------------------------
--- Negative Scenarios for CREATE TABLE with PARTITION SCHEME
---------------------------------------------------------------
-- Attempt to create with multiple columns as partitioning scheme
CREATE TABLE TestPartitionedTable
(
    id INT,
    value INT
)
ON IntPartitionScheme(id, value);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ',' at line 10 and character position 24)~~


-- Attempt to create with a partition scheme that doesn't exist and column that doesn't exist in the table
CREATE TABLE TestPartitionedTable
(
    id INT,
    value INT
)
ON NonExistentPartitionScheme(NonExistentColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "nonexistentcolumn" named in partition key does not exist)~~


-- Attempt to create with a partition scheme that doesn't exist
CREATE TABLE TestPartitionedTable
(
    id INT,
    value INT
)
ON NonExistentPartitionScheme(id);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid partition scheme 'NonExistentPartitionScheme' specifed.)~~


-- Attempt to use two part name with partition scheme
CREATE TABLE TestPartitionedTable
(
    id INT,
    value INT
)
ON master.IntPartitionScheme(id);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '.' at line 7 and character position 9)~~


-- Attempt to create with a unique constraint on a non-partition column
CREATE TABLE TestPartitionedTable
(
    Id INT,
    PartitionColumn INT,
    Col1 INT UNIQUE
)
ON IntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: unique constraint on partitioned table must include all partitioning columns)~~


-- Attempt to create with a primary key constraint on a non-partition column
CREATE TABLE TestPartitionedTable
(
    Id INT,
    PartitionColumn INT,
    Col1 INT PRIMARY KEY
)
ON IntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: unique constraint on partitioned table must include all partitioning columns)~~


---------------------------------------------------------------
--- Negative Scenarios for CREATE TABLE with PARTITION SCHEME
--- Attempt to create with an incompatible partition column data type
---------------------------------------------------------------
CREATE TABLE TestPartitionedTable1
(
    Id INT,
    PartitionColumn DECIMAL(10, 2)
)
ON IntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'decimal' which is different from the partition function 'IntPartitionFunction' parameter data type 'int'.)~~


CREATE TABLE TestPartitionedTable2
(
    Id INT,
    PartitionColumn DATETIME
)
ON DatePartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'datetime' which is different from the partition function 'DatePartitionFunction' parameter data type 'date'.)~~


CREATE TABLE TestPartitionedTable3
(
    Id INT,
    PartitionColumn VARCHAR(10)
)
ON CharPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'varchar' which is different from the partition function 'CharPartitionFunction' parameter data type 'char'.)~~


CREATE TABLE TestPartitionedTable4
(
    Id INT,
    PartitionColumn VARBINARY(10)
)
ON BinaryPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'varbinary' which is different from the partition function 'BinaryPartitionFunction' parameter data type 'binary'.)~~


CREATE TABLE TestPartitionedTable5
(
    Id INT,
    PartitionColumn SMALLINT
)
ON BigIntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'int2' which is different from the partition function 'BigIntPartitionFunction' parameter data type 'bigint'.)~~


CREATE TABLE TestPartitionedTable6
(
    Id INT,
    PartitionColumn DECIMAL(10, 2)
)
ON SmallIntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'decimal' which is different from the partition function 'SmallIntPartitionFunction' parameter data type 'smallint'.)~~


CREATE TABLE TestPartitionedTable7
(
    Id INT,
    PartitionColumn DECIMAL(10, 5)
)
ON TinyIntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'decimal' which is different from the partition function 'TinyIntPartitionFunction' parameter data type 'tinyint'.)~~


CREATE TABLE TestPartitionedTable8
(
    Id INT,
    PartitionColumn BIGINT
)
ON DecimalPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'int8' which is different from the partition function 'DecimalPartitionFunction' parameter data type 'decimal'.)~~


CREATE TABLE TestPartitionedTable9
(
    Id INT,
    PartitionColumn MONEY
)
ON NumericPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'money' which is different from the partition function 'NumericPartitionFunction' parameter data type 'numeric'.)~~


CREATE TABLE TestPartitionedTable10
(
    Id INT,
    PartitionColumn INT
)
ON MoneyPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'int4' which is different from the partition function 'MoneyPartitionFunction' parameter data type 'money'.)~~


CREATE TABLE TestPartitionedTable11
(
    Id INT,
    PartitionColumn DATETIME
)
ON SmallMoneyPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'datetime' which is different from the partition function 'SmallMoneyPartitionFunction' parameter data type 'smallmoney'.)~~


CREATE TABLE TestPartitionedTable12
(
    Id INT,
    PartitionColumn DATETIME2(3)
)
ON DateTimePartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'datetime2' which is different from the partition function 'DateTimePartitionFunction' parameter data type 'datetime'.)~~


CREATE TABLE TestPartitionedTable13
(
    Id INT,
    PartitionColumn SMALLDATETIME
)
ON DateTime2PartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'smalldatetime' which is different from the partition function 'DateTime2PartitionFunction' parameter data type 'datetime2'.)~~


CREATE TABLE TestPartitionedTable14
(
    Id INT,
    PartitionColumn NVARCHAR(10)
)
ON SmallDateTimePartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'nvarchar' which is different from the partition function 'SmallDateTimePartitionFunction' parameter data type 'smalldatetime'.)~~


CREATE TABLE TestPartitionedTable15
(
    Id INT,
    PartitionColumn INT
)
ON NVarCharPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'int4' which is different from the partition function 'NVarCharPartitionFunction' parameter data type 'nvarchar'.)~~


CREATE TABLE TestPartitionedTable16
(
    Id INT,
    PartitionColumn NCHAR(5)
)
ON VarCharPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'nchar' which is different from the partition function 'VarCharPartitionFunction' parameter data type 'varchar'.)~~


CREATE TABLE TestPartitionedTable17
(
    Id INT,
    PartitionColumn INT
)
ON NCharPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'int4' which is different from the partition function 'NCharPartitionFunction' parameter data type 'nchar'.)~~


-- using user defined type
CREATE TYPE PartitionUserDefinedType FROM SMALLINT;
GO

CREATE TABLE TestPartitionedTable18
(
    Id INT,
    PartitionColumn PartitionUserDefinedType
)
ON BigIntPartitionScheme(PartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Partition column 'partitioncolumn' has data type 'partitionuserdefinedtype' which is different from the partition function 'BigIntPartitionFunction' parameter data type 'bigint'.)~~


DROP TYPE PartitionUserDefinedType
GO

---------------------------------------------------------------
--- Negative Scenarios for CREATE Index with PARTITION SCHEME
---------------------------------------------------------------
CREATE TABLE TestPartitionedTable (
    PartitionColumn INT,
    NonPartitionColumn INT
) ON IntPartitionScheme(PartitionColumn);
GO

CREATE TABLE TestNonPartitionedTable (
    a INT,
    b INT
)
GO

CREATE INDEX TestPartitionIndex
ON TestPartitionedTable(NonExistentColumn1)
ON NonExistentPartitionScheme (NonExistentColumn2);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "nonexistentcolumn1" does not exist)~~


CREATE INDEX TestPartitionIndex
ON TestPartitionedTable(NonPartitionColumn)
ON NonExistentPartitionScheme (NonExistentColumn2);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column 'nonexistentcolumn2' does not exist)~~


CREATE INDEX TestPartitionIndex
ON TestPartitionedTable(NonPartitionColumn)
ON NonExistentPartitionScheme (NonPartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid object name 'NonExistentPartitionScheme'.)~~


-- scheme is different from the partition scheme used in the table
CREATE INDEX TestPartitionIndex
ON TestPartitionedTable(NonPartitionColumn)
ON BigIntPartitionScheme (NonPartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Un-aligned Index is not supported in Babelfish.)~~


-- column specified with partition scheme is different
-- from the partition column used in the table
CREATE INDEX TestPartitionIndex
ON TestPartitionedTable(NonPartitionColumn)
ON IntPartitionScheme (NonPartitionColumn);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Un-aligned Index is not supported in Babelfish.)~~


-- should work
CREATE INDEX TestPartitionIndex
ON TestPartitionedTable(NonPartitionColumn)
ON IntPartitionScheme (PartitionColumn);
GO

DROP INDEX TestPartitionIndex ON TestPartitionedTable
GO

-- usage of partition scheme on non-partitioned table (should fail)
CREATE INDEX TestPartitionIndex
ON TestNonPartitionedTable(a)
ON IntPartitionScheme (a);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Un-aligned Index is not supported in Babelfish.)~~



DROP TABLE TestPartitionedTable
GO

DROP TABLE TestNonPartitionedTable
GO
-- psql
-------------------------------------------------------------------------------------------
--- Rename Operation on Partitioned Tables should update name in babelfish_partition_depend
--- and it should also update the name of all the partitions
-------------------------------------------------------------------------------------------
SELECT sys.db_name(dbid) as db_name, partition_scheme_name, schema_name, table_name FROM sys.babelfish_partition_depend where table_name = 'partition_vu_prepare_int_table';
GO
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#"sys"."varchar"#!#"sys"."varchar"
master#!#IntPartitionScheme#!#dbo#!#partition_vu_prepare_int_table
~~END~~


SELECT inhrelid::regclass as partition_name from pg_inherits where inhparent = (select oid from pg_class where relname = 'partition_vu_prepare_int_table')::regclass;
GO
~~START~~
regclass
master_dbo."363863941f079adaa9aa733200e57c9f_partition_0"
master_dbo."363863941f079adaa9aa733200e57c9f_partition_1"
master_dbo."363863941f079adaa9aa733200e57c9f_partition_2"
master_dbo."363863941f079adaa9aa733200e57c9f_partition_3"
~~END~~


-- tsql
-- trigger rename from TSQL endpoint
EXEC sp_rename 'partition_vu_prepare_int_table', 'partition_vu_prepare_int_table_renamed', 'OBJECT'
GO

-- psql
SELECT sys.db_name(dbid) as db_name, partition_scheme_name, schema_name, table_name FROM sys.babelfish_partition_depend where table_name = 'partition_vu_prepare_int_table_renamed';
GO
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#"sys"."varchar"#!#"sys"."varchar"
master#!#IntPartitionScheme#!#dbo#!#partition_vu_prepare_int_table_renamed
~~END~~


SELECT inhrelid::regclass as partition_name from pg_inherits where inhparent = (select oid from pg_class where relname = 'partition_vu_prepare_int_table_renamed')::regclass;
GO
~~START~~
regclass
master_dbo.c2647401dc3e9a950809daafcd188637_partition_0
master_dbo.c2647401dc3e9a950809daafcd188637_partition_1
master_dbo.c2647401dc3e9a950809daafcd188637_partition_2
master_dbo.c2647401dc3e9a950809daafcd188637_partition_3
~~END~~


-- trigger rename from PSQL endpoint
ALTER TABLE master_dbo.partition_vu_prepare_int_table_renamed RENAME TO partition_vu_prepare_int_table;
GO

-- we should get orginal here 
SELECT sys.db_name(dbid) as db_name, partition_scheme_name, schema_name, table_name FROM sys.babelfish_partition_depend where table_name = 'partition_vu_prepare_int_table';
GO
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#"sys"."varchar"#!#"sys"."varchar"
master#!#IntPartitionScheme#!#dbo#!#partition_vu_prepare_int_table
~~END~~


SELECT inhrelid::regclass as partition_name from pg_inherits where inhparent = (select oid from pg_class where relname = 'partition_vu_prepare_int_table')::regclass;
GO
~~START~~
regclass
master_dbo."363863941f079adaa9aa733200e57c9f_partition_0"
master_dbo."363863941f079adaa9aa733200e57c9f_partition_1"
master_dbo."363863941f079adaa9aa733200e57c9f_partition_2"
master_dbo."363863941f079adaa9aa733200e57c9f_partition_3"
~~END~~


-- tsql
----------------------------------------------------------
--- DOLLAR PARTITION FUNCTION name identifiers tests
----------------------------------------------------------
SET QUOTED_IDENTIFIER ON;
GO

SELECT $PARTITION."IntPartitionFunction" (100)
GO
~~START~~
int
2
~~END~~


SELECT $PARTITION."PARTITION_FUNCTION 😎$@ #123 🌍rder  "(100)
GO
~~START~~
int
2
~~END~~


SELECT "master".$PARTITION."PARTITION_FUNCTION 😎$@ #123 🌍rder  "(100)
GO
~~START~~
int
2
~~END~~


SET QUOTED_IDENTIFIER OFF;
GO


SELECT $PARTITION.[PARTITION_FUNCTION  유니코드스키마👻  ] (100)
GO
~~START~~
int
2
~~END~~


SELECT [master].$PARTITION.[PARTITION_FUNCTION  유니코드스키마👻  ] (100)
GO
~~START~~
int
2
~~END~~


SELECT $PARTITION.[IntPartitionFunction] (100)
GO
~~START~~
int
2
~~END~~


SELECT [master].$PARTITION.[IntPartitionFunction] (100)
GO
~~START~~
int
2
~~END~~


SELECT $PARTITION.PARTITION_FUNCTIONログインαιώνια (100)
GO
~~START~~
int
2
~~END~~


SELECT master.$PARTITION.PARTITION_FUNCTIONログインαιώνια (100)
GO
~~START~~
int
2
~~END~~


------------------------------------------
--- DOLLAR PARTITION FUNCTION Negative test
------------------------------------------
-- explicit NULL value test
SELECT $PARTITION.IntPartitionFunction(NULL)
GO
~~START~~
int
1
~~END~~


SELECT master.$PARTITION.IntPartitionFunction(NULL)
GO
~~START~~
int
1
~~END~~


-- variable as NULL value
declare @var int = NULL
SELECT $PARTITION.IntPartitionFunction(@var)
GO
~~START~~
int
1
~~END~~


-- non-existent database
SELECT NonExistentDatabase.$PARTITION.IntPartitionFunction(10)
GO
~~START~~
int
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Invalid database name 'NonExistentDatabase'.)~~


-- error during implicit Conversion of values to partition function parameter type
SELECT $PARTITION.IntPartitionFunction('xyz')
GO
~~START~~
int
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type integer: "xyz")~~


-- using query 
SELECT $PARTITION.IntPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_varchar_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#varchar
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type integer: "Apple")~~

---------------------------------------------------------------------
--- Test for all the Supported Datatypes for Dollar Partition Function
---------------------------------------------------------------------
SELECT $PARTITION.IntPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_int_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#int
1#!#<NULL>
2#!#1
2#!#100
4#!#10000
~~END~~


SELECT $PARTITION.BigIntPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_bigint_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#bigint
1#!#<NULL>
2#!#1
3#!#100
5#!#10000
5#!#1000000000
~~END~~


SELECT $PARTITION.SmallIntPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_smallint_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#smallint
1#!#<NULL>
2#!#-32768
3#!#1
4#!#32767
~~END~~


SELECT $PARTITION.TinyIntPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_tinyint_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#tinyint
1#!#<NULL>
2#!#1
3#!#128
4#!#255
~~END~~


SELECT $PARTITION.DecimalPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_decimal_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#numeric
1#!#<NULL>
2#!#1.00000
3#!#100.00000
4#!#200.00000
5#!#300.00000
~~END~~


SELECT $PARTITION.NumericPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_numeric_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#numeric
1#!#<NULL>
2#!#1.00
3#!#10.00
4#!#20.00
5#!#30.00
~~END~~


SELECT $PARTITION.MoneyPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_money_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#money
1#!#<NULL>
1#!#1.0000
2#!#2.5679
4#!#4.9100
~~END~~


SELECT $PARTITION.SmallMoneyPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_smallmoney_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#smallmoney
1#!#<NULL>
1#!#1.0000
2#!#2.5679
4#!#4.9100
~~END~~


SELECT $PARTITION.DatePartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_date_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#date
1#!#<NULL>
2#!#2022-01-01
3#!#2022-07-01
4#!#2023-01-01
~~END~~


SELECT $PARTITION.DateTimePartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_datetime_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#datetime
1#!#<NULL>
2#!#2019-01-01 00:00:00.0
3#!#2022-01-01 00:00:00.0
4#!#2022-07-01 00:00:00.0
~~END~~


SELECT $PARTITION.DateTime2PartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_datetime2_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#datetime2
1#!#<NULL>
2#!#2019-01-01 00:00:00.000
3#!#2022-01-01 00:00:00.000
4#!#2022-07-01 00:00:00.000
~~END~~


SELECT $PARTITION.SmallDateTimePartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_smalldatetime_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#smalldatetime
1#!#<NULL>
2#!#2019-01-01 00:00:00.0
3#!#2022-01-01 00:00:00.0
4#!#2022-07-01 00:00:00.0
~~END~~


SELECT $PARTITION.CharPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_char_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#char
1#!#<NULL>
2#!#A    
3#!#D    
5#!#K    
7#!#U    
~~END~~


SELECT $PARTITION.VarCharPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_varchar_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#varchar
1#!#<NULL>
2#!#Apple
3#!#Banana
4#!#Cherry
5#!#Date
6#!#Mango
~~END~~


SELECT $PARTITION.NVarCharPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_nvarchar_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#nvarchar
1#!#<NULL>
2#!#Apple
3#!#Banana
4#!#Cherry
5#!#Date
6#!#Mango
~~END~~


SELECT $PARTITION.NCharPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_nchar_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#nchar
1#!#<NULL>
2#!#A    
3#!#B    
5#!#K    
7#!#U    
~~END~~


SELECT $PARTITION.BinaryPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_binary_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#binary
~~END~~


SELECT $PARTITION.VarBinaryPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_varbinary_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#varbinary
1#!#<NULL>
2#!#0000000000000000
3#!#4000000000000000
4#!#8000000000000000
5#!#C000000000000000
~~END~~


SELECT $PARTITION.UniqueIdentifierPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_uniqueidentifier_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#uniqueidentifier
1#!#<NULL>
2#!#00000000-0000-0000-0000-000000000000
3#!#6F9619FF-8B86-D011-B42D-00C04FC964FF
4#!#FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF
~~END~~


SELECT $PARTITION.SqlVariantPartitionFunction(Id) AS PartitionNumber, Id
FROM partition_vu_prepare_sqlvariant_table
ORDER BY PartitionNumber, Id;
GO
~~START~~
int#!#sql_variant
1#!#<NULL>
2#!#abc  
3#!#Apple
4#!#Banana
5#!#Some text
6#!#xyz  
~~END~~


----------------------------------------------
--- DOLLAR PARTITION FUNCTION Dependency test
----------------------------------------------
-- non-null test
SELECT * FROM DollarPartitionFunctionView
GO
~~START~~
int#!#int
1#!#<NULL>
2#!#1
2#!#100
4#!#10000
~~END~~


EXEC DollarPartitionFunctionProc
GO
~~START~~
int#!#int
1#!#<NULL>
2#!#1
2#!#100
4#!#10000
~~END~~


SELECT * FROM DollarPartitionFunctionFunc()
GO
~~START~~
int#!#int
1#!#<NULL>
2#!#1
2#!#100
4#!#10000
~~END~~


-- null test
SELECT * FROM DollarPartitionFunctionNullView
GO
~~START~~
int
1
~~END~~


EXEC DollarPartitionFunctionNullProc
GO
~~START~~
int
1
~~END~~


SELECT * FROM DollarPartitionFunctionNullFunc()
GO
~~START~~
int
1
~~END~~


SELECT * FROM SysSearchPartitionDepView
GO
~~START~~
int
2
~~END~~


SELECT * FROM SysSearchPartitionNULLDepView
GO
~~START~~
int
2
~~END~~

------------------------------------------------------
--- DOLLAR PARTITION FUNCTION Cross Database test
------------------------------------------------------
-- in current database with explicity lookup
SELECT master.$PARTITION.[IntPartitionFunction] (100)
GO
~~START~~
int
2
~~END~~


-- use different database
USE PartitionDb;
GO

SELECT CURRENT_USER
GO
~~START~~
varchar
dbo
~~END~~


SELECT master.$PARTITION.[IntPartitionFunction] (100)
GO
~~START~~
int
2
~~END~~


-- test using guest login
CREATE LOGIN partition_l2 WITH PASSWORD = '12345678';
GO

CREATE USER partition_u2 FOR LOGIN partition_l2;
GO

-- tsql  user=partition_l2 password=12345678 database=partitiondb
SELECT CURRENT_USER
GO
~~START~~
varchar
partition_u2
~~END~~


SELECT master.$PARTITION.[IntPartitionFunction] (100)
GO
~~START~~
int
2
~~END~~


-- tsql
USE PartitionDb;
GO

DROP USER partition_u2
GO
