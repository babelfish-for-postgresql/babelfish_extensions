USE BABEL_ROLE_MEMBER_db
go

-- Print the current membership status
EXEC babel_role_members
GO
~~START~~
varchar#!#char#!#varchar#!#char
db_owner#!#R#!#dbo#!#S
test_role1#!#R#!#test_role2#!#R
test_role1#!#R#!#test_user1#!#S
test_role2#!#R#!#test_role3#!#R
test_role2#!#R#!#test_user2#!#S
test_role3#!#R#!#test_role4#!#R
test_role3#!#R#!#test_user3#!#S
~~END~~


-- IS_MEMBER and IS_ROLEMEMBER
-- Basic membership check
SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role3', 'test_role4')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_user1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_user2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role3', 'test_user3')
GO
~~START~~
int
1
~~END~~


-- Not member, should return 0
SELECT IS_ROLEMEMBER('test_role4', 'test_role1')
GO
~~START~~
int
0
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role5')
GO
~~START~~
int
0
~~END~~


-- Nested membership check
SELECT IS_ROLEMEMBER('test_role1', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_user3')
GO
~~START~~
int
1
~~END~~


-- Membership of oneself, should return 1, this also applies to user
SELECT IS_ROLEMEMBER('test_role1', 'test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_user1', 'test_user1')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_ROLEMEMBER('db_owner', 'test_role1')
GO
~~START~~
int
0
~~END~~

SELECT IS_ROLEMEMBER('db_owner', 'test_user1')
GO
~~START~~
int
0
~~END~~


-- Invalid role/principal name, should return NULL
SELECT IS_MEMBER('xxx')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('xxx')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('xxx', 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'xxx')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER(NULL, 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', NULL)
GO
~~START~~
int
<NULL>
~~END~~


-- Given role name is not a real role, should return NULL
SELECT IS_MEMBER('test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_user1', 'test_user2')
GO
~~START~~
int
<NULL>
~~END~~


-- NULL input, should return NULL
SELECT IS_MEMBER(NULL)
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER(NULL, 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', NULL)
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER(NULL, NULL)
GO
~~START~~
int
<NULL>
~~END~~


-- tsql      user=test_login1      password=123
-- Connect with different logins to test membership view permission
-- Test on user1
USE BABEL_ROLE_MEMBER_db
GO
SELECT USER_NAME()
GO
~~START~~
nvarchar
test_user1
~~END~~


-- Should return 1
SELECT IS_MEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_MEMBER('test_user1')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_MEMBER('test_role2')
GO
~~START~~
int
0
~~END~~

SELECT IS_ROLEMEMBER('test_role3')
GO
~~START~~
int
0
~~END~~


-- Doesn't have permission, should return NULL
SELECT IS_ROLEMEMBER('test_role2', 'test_user2')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
<NULL>
~~END~~


USE master
GO

-- tsql      user=test_login2      password=123
-- Test on user2
USE BABEL_ROLE_MEMBER_db
GO
SELECT USER_NAME()
GO
~~START~~
nvarchar
test_user2
~~END~~


-- Should return 1
SELECT IS_MEMBER('test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_MEMBER('test_user2')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_MEMBER('test_role3')
GO
~~START~~
int
0
~~END~~


-- Doesn't have permission, should return NULL 
SELECT IS_ROLEMEMBER('test_role1', 'test_role3')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_role3')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~


USE master
GO

-- tsql      user=test_login3      password=123
-- Test on user3
USE BABEL_ROLE_MEMBER_db
GO
SELECT USER_NAME()
GO
~~START~~
nvarchar
test_user3
~~END~~


-- Should return 1
SELECT IS_MEMBER('test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_MEMBER('test_user3')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_MEMBER('test_role4')
GO
~~START~~
int
0
~~END~~


-- Doesn't have permission, should return NULL
SELECT IS_ROLEMEMBER('test_role3', 'test_role4')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_user2')
GO
~~START~~
int
<NULL>
~~END~~


USE master
GO
