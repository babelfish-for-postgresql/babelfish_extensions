SELECT DB_NAME()
GO
~~START~~
nvarchar
master
~~END~~


-- Test CREATE ROLE
CREATE ROLE test1
GO

SELECT rolname, type, orig_username, database_name
FROM sys.babelfish_authid_user_ext
WHERE orig_username = 'test1'
GO
~~START~~
varchar#!#char#!#nvarchar#!#nvarchar
master_test1#!#R#!#test1#!#master
~~END~~


SELECT name, type_desc
FROM sys.database_principals
WHERE name = 'test1'
GO
~~START~~
varchar#!#nvarchar
test1#!#DATABASE_ROLE
~~END~~


-- Test database principal uniqueness
-- should fail
CREATE ROLE test1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_test1" already exists)~~


CREATE LOGIN test1 WITH PASSWORD = 'abc';
GO

-- should fail
CREATE USER test1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_test1" already exists)~~


CREATE LOGIN test2 WITH PASSWORD = 'abc';
GO

CREATE USER test2
GO

-- should fail
CREATE ROLE test2
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "master_test2" already exists)~~


-- Test database principal uniqueness in a new database
CREATE DATABASE db1
GO

USE db1
GO

SELECT DB_NAME()
GO
~~START~~
nvarchar
db1
~~END~~


CREATE ROLE test1
GO

CREATE ROLE test2
GO

CREATE PROC babel_user_ext AS
BEGIN
	SELECT rolname, type, orig_username, database_name
	FROM sys.babelfish_authid_user_ext
	WHERE orig_username LIKE 'test%'
	ORDER BY rolname, orig_username
END
GO

CREATE PROC babel_db_principal AS
BEGIN
	SELECT name, type_desc
	FROM sys.database_principals
	WHERE name LIKE 'test%'
	ORDER BY name
END
GO

CREATE PROC babel_role_members AS
BEGIN
	SELECT dp1.name AS RoleName, dp1.type AS RoleType,
		   dp2.name AS MemberName, dp2.type AS MemberType
	FROM sys.database_role_members AS drm
	INNER JOIN sys.database_principals AS dp1
	ON drm.role_principal_id = dp1.principal_id
	INNER JOIN sys.database_principals AS dp2
	ON drm.member_principal_id = dp2.principal_id
	ORDER BY dp1.name, dp2.name
END
GO

-- Expect to see roles master_test1, db1_test1, db1_test2
-- and user master_test2
EXEC babel_user_ext
GO
~~START~~
varchar#!#char#!#nvarchar#!#nvarchar
db1_test1#!#R#!#test1#!#db1
db1_test2#!#R#!#test2#!#db1
master_test1#!#R#!#test1#!#master
master_test2#!#S#!#test2#!#master
~~END~~


EXEC babel_db_principal
GO
~~START~~
varchar#!#nvarchar
test1#!#DATABASE_ROLE
test2#!#DATABASE_ROLE
~~END~~


-- Test ALTER ROLE
-- Add role as member
ALTER ROLE test1 ADD MEMBER test2
GO

-- Add user as member
CREATE LOGIN test3 WITH PASSWORD = 'abc'
GO

CREATE USER test3
GO

ALTER ROLE test1 ADD MEMBER test3
GO

CREATE LOGIN test4 WITH PASSWORD = 'abc'
GO

-- Add login as member, should fail
ALTER ROLE test1 ADD MEMBER test4
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "db1_test4" does not exist)~~


-- Add itself as member, should fail
ALTER ROLE test1 ADD MEMBER test1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "db1_test1" is a member of role "db1_test1")~~


-- Cross member, should fail
ALTER ROLE test2 ADD MEMBER test1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: role "db1_test2" is a member of role "db1_test1")~~


-- Add special principals as member, should fail
ALTER ROLE test1 ADD MEMBER dbo
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot use the special principal 'dbo')~~


ALTER ROLE test1 ADD MEMBER db_owner
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot use the special principal 'db_owner')~~


CREATE USER test4
GO

ALTER ROLE test2 ADD MEMBER test4
GO

-- Expect to see roles master_test1, db1_test1, db1_test2
-- and users master_test2, db1_test3, db1_test4
EXEC babel_user_ext
GO
~~START~~
varchar#!#char#!#nvarchar#!#nvarchar
db1_test1#!#R#!#test1#!#db1
db1_test2#!#R#!#test2#!#db1
db1_test3#!#S#!#test3#!#db1
db1_test4#!#S#!#test4#!#db1
master_test1#!#R#!#test1#!#master
master_test2#!#S#!#test2#!#master
~~END~~


EXEC babel_db_principal
GO
~~START~~
varchar#!#nvarchar
test1#!#DATABASE_ROLE
test2#!#DATABASE_ROLE
test3#!#SQL_USER
test4#!#SQL_USER
~~END~~


EXEC babel_role_members
GO
~~START~~
varchar#!#char#!#varchar#!#char
db_owner#!#R#!#dbo#!#S
test1#!#R#!#test2#!#R
test1#!#R#!#test3#!#S
test2#!#R#!#test4#!#S
~~END~~


-- Role renaming
ALTER ROLE test1 WITH NAME = test1_new
GO

EXEC babel_user_ext
GO
~~START~~
varchar#!#char#!#nvarchar#!#nvarchar
db1_test1_new#!#R#!#test1_new#!#db1
db1_test2#!#R#!#test2#!#db1
db1_test3#!#S#!#test3#!#db1
db1_test4#!#S#!#test4#!#db1
master_test1#!#R#!#test1#!#master
master_test2#!#S#!#test2#!#master
~~END~~


EXEC babel_db_principal
GO
~~START~~
varchar#!#nvarchar
test1_new#!#DATABASE_ROLE
test2#!#DATABASE_ROLE
test3#!#SQL_USER
test4#!#SQL_USER
~~END~~


EXEC babel_role_members
GO
~~START~~
varchar#!#char#!#varchar#!#char
db_owner#!#R#!#dbo#!#S
test1_new#!#R#!#test2#!#R
test1_new#!#R#!#test3#!#S
test2#!#R#!#test4#!#S
~~END~~


-- Drop role from member
ALTER ROLE test1 DROP MEMBER test2
GO

-- Drop user from member
ALTER ROLE test1 DROP MEMBER test3
GO

-- Expect to see roles master_test1, db1_test1_new, db1_test2
-- and users master_test2, db1_test3
EXEC babel_user_ext
GO
~~START~~
varchar#!#char#!#nvarchar#!#nvarchar
db1_test1_new#!#R#!#test1_new#!#db1
db1_test2#!#R#!#test2#!#db1
db1_test3#!#S#!#test3#!#db1
db1_test4#!#S#!#test4#!#db1
master_test1#!#R#!#test1#!#master
master_test2#!#S#!#test2#!#master
~~END~~


EXEC babel_db_principal
GO
~~START~~
varchar#!#nvarchar
test1_new#!#DATABASE_ROLE
test2#!#DATABASE_ROLE
test3#!#SQL_USER
test4#!#SQL_USER
~~END~~


EXEC babel_role_members
GO
~~START~~
varchar#!#char#!#varchar#!#char
db_owner#!#R#!#dbo#!#S
test1_new#!#R#!#test2#!#R
test1_new#!#R#!#test3#!#S
test2#!#R#!#test4#!#S
~~END~~


-- Test DROP ROLE
DROP USER test3
GO

DROP USER test4
GO

DROP ROLE test2
GO

DROP ROLE test1_new
GO

DROP PROC babel_user_ext
GO

DROP PROC babel_db_principal
GO

DROP PROC babel_role_members
GO

USE master
GO

DROP USER test2
GO

DROP ROLE test1
GO

DROP LOGIN test1
GO

DROP LOGIN test2
GO

DROP LOGIN test3
GO

DROP LOGIN test4
GO

DROP DATABASE db1
GO

-- Check if catalog is cleaned up
SELECT rolname, type, orig_username, database_name
FROM sys.babelfish_authid_user_ext
WHERE orig_username LIKE 'test%'
GO
~~START~~
varchar#!#char#!#nvarchar#!#nvarchar
~~END~~


SELECT rolname, type 
FROM sys.babelfish_authid_login_ext
WHERE rolname LIKE 'test%'
GO
~~START~~
varchar#!#char
~~END~~

