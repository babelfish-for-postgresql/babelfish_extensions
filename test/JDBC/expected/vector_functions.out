select set_config('babelfishpg_tsql.explain_costs', 'off', false);
go
~~START~~
text
off
~~END~~

select set_config('babelfishpg_tsql.explain_timing', 'off', false);
go
~~START~~
text
off
~~END~~

select set_config('babelfishpg_tsql.explain_summary', 'off', false);
go
~~START~~
text
off
~~END~~


-- functions
SELECT CAST('[1,2,3]' as vector) + '[4,5,6]';
go
~~START~~
varchar
[5,7,9]
~~END~~


SELECT CAST('[3e38]' as vector) + '[3e38]';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: overflow)~~


SELECT CAST('[1,2,3]' as vector) - '[4,5,6]';
go
~~START~~
varchar
[-3,-3,-3]
~~END~~


SELECT CAST('[-3e38]' as vector) - '[3e38]';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: overflow)~~


SELECT CAST('[1,2,3]' as vector) * '[4,5,6]';
go
~~START~~
varchar
[4,10,18]
~~END~~


SELECT CAST('[1e37]' as vector) * '[1e37]';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: overflow)~~


SELECT CAST('[1e-37]' as vector) * '[1e-37]';
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value out of range: underflow)~~


SELECT vector_dims('[1,2,3]');
go
~~START~~
int
3
~~END~~


SELECT round(cast(vector_norm('[1,1]') as numeric), 5);
go
~~START~~
numeric
1.00000
~~END~~


SELECT vector_norm('[3,4]');
go
~~START~~
float
5.0
~~END~~


SELECT vector_norm('[0,1]');
go
~~START~~
float
1.0
~~END~~


SELECT vector_norm(Cast('[3e37,4e37]') as real);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'Cast' at line 1 and character position 19)~~


SELECT l2_distance('[0,0]', '[3,4]');
go
~~START~~
float
5.0
~~END~~


SELECT l2_distance('[0,0]', '[0,1]');
go
~~START~~
float
1.0
~~END~~


SELECT l2_distance('[1,2]', '[3]');
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different vector dimensions 2 and 1)~~


SELECT l2_distance('[3e38]', '[-3e38]');
go
~~START~~
float
Infinity
~~END~~


SELECT inner_product('[1,2]', '[3,4]');
go
~~START~~
float
11.0
~~END~~


SELECT inner_product('[1,2]', '[3]');
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different vector dimensions 2 and 1)~~


SELECT inner_product('[3e38]', '[3e38]');
go
~~START~~
float
Infinity
~~END~~


SELECT cosine_distance('[1,2]', '[2,4]');
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance('[1,2]', '[0,0]');
go
~~START~~
float
NaN
~~END~~


SELECT cosine_distance('[1,1]', '[1,1]');
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance('[1,0]', '[0,2]');
go
~~START~~
float
1.0
~~END~~


SELECT cosine_distance('[1,1]', '[-1,-1]');
go
~~START~~
float
2.0
~~END~~


SELECT cosine_distance('[1,2]', '[3]');
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different vector dimensions 2 and 1)~~


SELECT cosine_distance('[1,1]', '[1.1,1.1]');
go
~~START~~
float
0.0
~~END~~


SELECT cosine_distance('[1,1]', '[-1.1,-1.1]');
go
~~START~~
float
2.0
~~END~~


SELECT cosine_distance('[3e38]', '[3e38]');
go
~~START~~
float
NaN
~~END~~


SELECT l1_distance('[0,0]', '[3,4]');
go
~~START~~
float
7.0
~~END~~


SELECT l1_distance('[0,0]', '[0,1]');
go
~~START~~
float
1.0
~~END~~


SELECT l1_distance('[1,2]', '[3]');
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: different vector dimensions 2 and 1)~~


SELECT l1_distance('[3e38]', '[-3e38]');
go
~~START~~
float
Infinity
~~END~~


SELECT vector_avg(array_agg(n)) FROM generate_series(1, 16002) n;
go
~~START~~
varchar
~~ERROR (Code: 33557097)~~

~~ERROR (Message: vector cannot have more than 16000 dimensions)~~



-- cast. has all arrays can prune maybe use array_to_vector
SELECT CAST(CAST('{NULL}' as real[]) as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'CAST' at line 2 and character position 12)~~


SELECT CAST(CAST('{NaN}' as real[]) as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'CAST' at line 1 and character position 12)~~


SELECT CAST(CAST('{Infinity}' as real[]) as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'CAST' at line 1 and character position 12)~~






-- SELECT '{-Infinity}'::real[]::vector;
-- go
-- SELECT '{}'::real[]::vector;
-- go
-- SELECT '{{1}}'::real[]::vector;
-- go
-- SELECT '[1,2,3]'::vector::real[];
-- go
SELECT CAST(array_agg(n) as vector) FROM generate_series(1, 16001) n;
go
~~START~~
varchar
~~ERROR (Code: 33557097)~~

~~ERROR (Message: vector cannot have more than 16000 dimensions)~~


SELECT array_to_vector(array_agg(n), 16001, false) FROM generate_series(1, 16001) n;
go
~~START~~
varchar
~~ERROR (Code: 33557097)~~

~~ERROR (Message: vector cannot have more than 16000 dimensions)~~


-- btree
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON vector_table (val);
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~


SELECT * FROM vector_table WHERE val = '[1,2,3]';
go
~~START~~
varchar
[1,2,3]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table WHERE val = '[1,2,3]'
Index Only Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=1 loops=1)
  Index Cond: (val = '[1,2,3]'::vector)
  Heap Fetches: 1
~~END~~


SELECT TOP 1 * FROM vector_table ORDER BY val;
go
~~START~~
varchar
<NULL>
~~END~~

~~START~~
text
Query Text: SELECT TOP 1 * FROM vector_table ORDER BY val
Limit (actual rows=1 loops=1)
  ->  Index Only Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=1 loops=1)
        Heap Fetches: 1
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~


-- hnsw_cosine
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON vector_table USING hnsw (val vector_cosine_ops);
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~


SELECT * FROM vector_table ORDER BY val <=> '[3,3,3]';
go
~~START~~
varchar
[1,1,1]
[1,2,3]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table ORDER BY val <=> '[3,3,3]' NULLS LAST
Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=2 loops=1)
  Order By: (val <=> '[3,3,3]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> '[0,0,0]') t2;
go
~~START~~
int
2
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> '[0,0,0]' NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=2 loops=1)
        Order By: (val <=> '[0,0,0]'::vector)
~~END~~

SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> (SELECT CAST(NULL as vector))) t2;
go
~~START~~
int
2
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> (SELECT CAST(NULL as vector)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=2 loops=1)
        Order By: (val <=> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~


-- hnsw_ip
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON vector_table USING hnsw (val vector_ip_ops);
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~


SELECT * FROM vector_table ORDER BY val <#> '[3,3,3]';
go
~~START~~
varchar
[1,2,3]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table ORDER BY val <#> '[3,3,3]' NULLS LAST
Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
  Order By: (val <#> '[3,3,3]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> '[0,0,0]') t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> '[0,0,0]' NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
        Order By: (val <#> '[0,0,0]'::vector)
~~END~~

SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> (SELECT CAST(NULL as vector))) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> (SELECT CAST(NULL as vector)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
        Order By: (val <#> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~


-- hnsw_l2
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON vector_table USING hnsw (val vector_l2_ops);
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~


SELECT * FROM vector_table ORDER BY val <-> '[3,3,3]';
go
~~START~~
varchar
[1,2,3]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table ORDER BY val <-> '[3,3,3]' NULLS LAST
Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
  Order By: (val <-> '[3,3,3]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> '[0,0,0]') t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> '[0,0,0]' NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
        Order By: (val <-> '[0,0,0]'::vector)
~~END~~

SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> (SELECT CAST(NULL as vector))) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> (SELECT CAST(NULL as vector)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
        Order By: (val <-> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~


-- hnsw options
CREATE TABLE vector_table (val vector(3));
go

CREATE INDEX idx1 ON vector_table USING hnsw (val vector_l2_ops) WITH (m = 1);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value 1 out of bounds for option "m")~~


CREATE INDEX idx2 ON vector_table USING hnsw (val vector_l2_ops) WITH (m = 101);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value 101 out of bounds for option "m")~~


CREATE INDEX idx3 ON vector_table USING hnsw (val vector_l2_ops) WITH (ef_construction = 3);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value 3 out of bounds for option "ef_construction")~~


CREATE INDEX idx4 ON vector_table USING hnsw (val vector_l2_ops) WITH (ef_construction = 1001);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value 1001 out of bounds for option "ef_construction")~~


CREATE INDEX idx5 ON vector_table USING hnsw (val vector_l2_ops) WITH (m = 16, ef_construction = 31);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: ef_construction must be greater than or equal to 2 * m)~~


Select current_setting('hnsw.ef_search')
go
~~START~~
text
40
~~END~~


SELECT set_config('hnsw.ef_search', '0', false)
go
~~START~~
text
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 0 is outside the valid range for parameter "hnsw.ef_search" (1 .. 1000))~~


SELECT set_config('hnsw.ef_search', '1001', false)
go
~~START~~
text
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 1001 is outside the valid range for parameter "hnsw.ef_search" (1 .. 1000))~~


DROP TABLE vector_table;
go

-- ivfflat cosine
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON vector_table USING ivfflat (val vector_cosine_ops) WITH (lists = 1);
go

INSERT INTO vector_table (val) VALUES ('[1,2,4]');
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~


SELECT * FROM vector_table ORDER BY val <=> '[3,3,3]';
go
~~START~~
varchar
[1,1,1]
[1,2,3]
[1,2,4]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table ORDER BY val <=> '[3,3,3]' NULLS LAST
Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
  Order By: (val <=> '[3,3,3]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> '[0,0,0]') t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> '[0,0,0]' NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
        Order By: (val <=> '[0,0,0]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> (SELECT CAST(NULL as vector))) t2;
go
~~START~~
int
3
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <=> (SELECT CAST(NULL as vector)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=3 loops=1)
        Order By: (val <=> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~


-- ivfflat ip
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx2 ON vector_table USING ivfflat (val vector_ip_ops) WITH (lists = 1);
go

INSERT INTO vector_table (val) VALUES ('[1,2,4]');
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~


SELECT * FROM vector_table ORDER BY val <#> '[3,3,3]';
go
~~START~~
varchar
[1,2,4]
[1,2,3]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table ORDER BY val <#> '[3,3,3]' NULLS LAST
Index Scan using idx2vector_table8408d573e4ed8cfc5bc30f15b5393f14 on vector_table (actual rows=4 loops=1)
  Order By: (val <#> '[3,3,3]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> '[0,0,0]') t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> '[0,0,0]' NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idx2vector_table8408d573e4ed8cfc5bc30f15b5393f14 on vector_table (actual rows=4 loops=1)
        Order By: (val <#> '[0,0,0]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> (SELECT CAST(NULL as vector))) t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <#> (SELECT CAST(NULL as vector)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idx2vector_table8408d573e4ed8cfc5bc30f15b5393f14 on vector_table (actual rows=4 loops=1)
        Order By: (val <#> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~



SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~


-- ivfflat l2
CREATE TABLE vector_table (val vector(3));
go

INSERT INTO vector_table (val) VALUES ('[0,0,0]'), ('[1,2,3]'), ('[1,1,1]'), (NULL);
go
~~ROW COUNT: 4~~


CREATE INDEX idx ON vector_table USING ivfflat (val vector_l2_ops) WITH (lists = 1);
go

INSERT INTO vector_table (val) VALUES ('[1,2,4]');
go
~~ROW COUNT: 1~~


-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
~~START~~
text
off
~~END~~

~~START~~
text
Query Text: SELECT set_config('enable_seqscan', 'off', false)
Result (actual rows=1 loops=1)
~~END~~

SELECT * FROM vector_table ORDER BY val <-> '[3,3,3]';
go
~~START~~
varchar
[1,2,3]
[1,2,4]
[1,1,1]
[0,0,0]
~~END~~

~~START~~
text
Query Text: SELECT * FROM vector_table ORDER BY val <-> '[3,3,3]' NULLS LAST
Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=4 loops=1)
  Order By: (val <-> '[3,3,3]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> '[0,0,0]') t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> '[0,0,0]' NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=4 loops=1)
        Order By: (val <-> '[0,0,0]'::vector)
~~END~~


SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> (SELECT CAST(NULL as vector))) t2;
go
~~START~~
int
4
~~END~~

~~START~~
text
Query Text: SELECT COUNT(*) FROM (SELECT * FROM vector_table ORDER BY val <-> (SELECT CAST(NULL as vector)) NULLS LAST) t2
Aggregate (actual rows=1 loops=1)
  ->  Index Scan using idxvector_table7f9bec28bc8902d45d905788d7aa59a1 on vector_table (actual rows=4 loops=1)
        Order By: (val <-> $0)
        InitPlan 1 (returns $0)
          ->  Result (actual rows=1 loops=1)
~~END~~


SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE vector_table;
go
~~START~~
text
on
~~END~~



-- ivfflat options
CREATE TABLE vector_table (val vector(3));
go

CREATE INDEX idx1 ON vector_table USING ivfflat (val vector_l2_ops) WITH (lists = 0);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value 0 out of bounds for option "lists")~~


CREATE INDEX idx2 ON vector_table USING ivfflat (val vector_l2_ops) WITH (lists = 32769);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value 32769 out of bounds for option "lists")~~


Select current_setting('ivfflat.probes')
go
~~START~~
text
1
~~END~~


DROP TABLE vector_table;
go

-- input
SELECT CAST('[1,2,3]' as vector);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST('[-1,-2,-3]' as vector);
go
~~START~~
varchar
[-1,-2,-3]
~~END~~


SELECT CAST('[1.,2.,3.]' as vector);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST(' [ 1,  2 ,    3  ] ' as vector);
go
~~START~~
varchar
[1,2,3]
~~END~~


SELECT CAST('[1.23456]' as vector);
go
~~START~~
varchar
[1.23456]
~~END~~


SELECT CAST('[hello,1]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type vector: "[hello,1]")~~


SELECT CAST('[NaN,1]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: NaN not allowed in vector)~~


SELECT CAST('[Infinity,1]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: infinite value not allowed in vector)~~


SELECT CAST('[-Infinity,1]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: infinite value not allowed in vector)~~


SELECT CAST('[1.5e38,-1.5e38]' as vector);
go
~~START~~
varchar
[1.5e+38,-1.5e+38]
~~END~~


SELECT CAST('[1.5e+38,-1.5e+38]' as vector);
go
~~START~~
varchar
[1.5e+38,-1.5e+38]
~~END~~


SELECT CAST('[1.5e-38,-1.5e-38]' as vector);
go
~~START~~
varchar
[1.5e-38,-1.5e-38]
~~END~~


SELECT CAST('[4e38,1]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: infinite value not allowed in vector)~~


SELECT CAST('[1,2,3' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "[1,2,3")~~


SELECT CAST('[1,2,3]9' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "[1,2,3]9")~~


SELECT CAST('1,2,3' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "1,2,3")~~


SELECT CAST('' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "")~~


SELECT CAST('[' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "[")~~


SELECT CAST('[,' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "[,")~~


SELECT CAST('[]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: vector must have at least 1 dimension)~~


SELECT CAST('[1,]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type vector: "[1,]")~~


SELECT CAST('[1a]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type vector: "[1a]")~~


SELECT CAST('[1,,3]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: malformed vector literal: "[1,,3]")~~


SELECT CAST('[1, ,3]' as vector);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type vector: "[1, ,3]")~~


SELECT CAST('[1,2,3]' as vector(2));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: expected 2 dimensions, not 3)~~


select set_config('babelfishpg_tsql.explain_costs', 'on', false);
go
~~START~~
text
on
~~END~~

select set_config('babelfishpg_tsql.explain_timing', 'on', false);
go
~~START~~
text
on
~~END~~

select set_config('babelfishpg_tsql.explain_summary', 'on', false);
go
~~START~~
text
on
~~END~~

