
-- tsql
-- =============== Setup ===============
DROP TABLE IF EXISTS t_perms_by_name;
GO

CREATE TABLE t_perms_by_name (col1 INT, col2 VARCHAR(16));
GO

CREATE LOGIN user_perms_by_name WITH PASSWORD='test';
GO

CREATE USER crossdb_user_perms_by_name FOR LOGIN user_perms_by_name;
GO

CREATE DATABASE db_perms_by_name;
GO

USE db_perms_by_name;
GO

DROP TABLE IF EXISTS t_perms_by_name;
GO

CREATE TABLE t_perms_by_name (col1 INT, col2 VARCHAR(16));
GO

CREATE SCHEMA s_perms_by_name;
GO

CREATE TABLE s_perms_by_name.t_perms_by_name (col1 INT, col2 VARCHAR(16));
GO

DROP TABLE IF EXISTS [.t perms.by.name.];
GO

CREATE TABLE [.t perms.by.name.] ([.column perms.by.name.] INT);
GO

DROP TABLE IF EXISTS [ t.perms by name ];
GO

CREATE TABLE [ t.perms by name ] ([ column perms.by.name ] INT);
GO

DROP VIEW IF EXISTS v_perms_by_name;
GO

CREATE VIEW v_perms_by_name AS
	SELECT * FROM t_perms_by_name;
GO

DROP FUNCTION IF EXISTS scalar_function_perms_by_name;
GO

CREATE FUNCTION scalar_function_perms_by_name()
RETURNS int
AS 
BEGIN
   DECLARE @retval int
   SELECT @retval = COUNT(*) FROM t_perms_by_name
   RETURN @retval
END;
GO

DROP FUNCTION IF EXISTS table_function_perms_by_name;
GO

CREATE FUNCTION table_function_perms_by_name(@empid int)
RETURNS table
AS
RETURN
(
	SELECT * FROM t_perms_by_name WHERE col1 = @empid
);
GO

DROP PROCEDURE IF EXISTS proc_perms_by_name;
GO

CREATE procedure proc_perms_by_name AS
	SELECT * FROM t_perms_by_name
GO

DROP USER IF EXISTS user_perms_by_name;
GO

CREATE USER user_perms_by_name FOR LOGIN user_perms_by_name;
GO
