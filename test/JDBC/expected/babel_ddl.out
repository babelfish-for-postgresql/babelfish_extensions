-- CLUSTERED INDEX / NONCLUSTERED IDNEX
create table t1 ( a int, b int);
GO

create nonclustered index t1_idx1 on t1 (a);
GO

create clustered index t1_idx2 on t1(a);
GO

create table t2 ( a int, b int, primary key nonclustered (a));
GO
create table t3 ( a int, b int, primary key clustered (a));
GO
create table t4 ( a int, b int, unique nonclustered (a));
GO
create table t5 ( a int, b int, unique clustered (a));
GO

create table t6 ( a int primary key nonclustered, b int);
GO
create table t7 ( a int primary key clustered, b int);
GO
create table t8 ( a int unique nonclustered, b int);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Nullable UNIQUE constraint is not supported. Please use babelfishpg_tsql.escape_hatch_unique_constraint to ignore or add a NOT NULL constraint)~~

create table t9 ( a int unique clustered, b int);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Nullable UNIQUE constraint is not supported. Please use babelfishpg_tsql.escape_hatch_unique_constraint to ignore or add a NOT NULL constraint)~~


DECLARE @babelfishpg_tsql_sql_dialect varchar(50) = 'tsql';
GO

create index t1_idx1 on t1 (a);
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t1_idx1t18e881e6977bd6b8cbb78725b3a8ac988" already exists)~~

create index t1_idx2 on t1(a);
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t1_idx2t117dbbb74ced1fe936cdf7cd7baeff266" already exists)~~


create table t2 ( a int, b int, primary key (a));
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t2" already exists)~~

create table t3 ( a int, b int, primary key (a));
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t3" already exists)~~

create table t4 ( a int, b int, unique (a));
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t4" already exists)~~

create table t5 ( a int, b int, unique (a));
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t5" already exists)~~


create table t6 ( a int primary key, b int);
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t6" already exists)~~

create table t7 ( a int primary key, b int);
GO
~~ERROR (Code: 2714)~~

~~ERROR (Message: relation "t7" already exists)~~

create table t8 ( a int unique not null, b int);
GO
create table t9 ( a int unique not null, b int);
GO

-- CREATE INDEX ... ON <filegroup> syntax
create index t1_idx3 on t1 (a) on [primary];
GO
create index t1_idx4 on t1 (a) on "default";
GO

-- CREATE TABLE WITH (<table_option> [,...n]) syntax
create table t10 (a int) 
with (fillfactor = 90, FILETABLE_COLLATE_FILENAME = database_default);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: unknown index option: FILETABLE_COLLATE_FILENAME)~~

create table t11 (a int) 
with (data_compression = row on partitions (2, 4, 6 to 8));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'on' at line 2 and character position 29)~~

create table t12 (a int)
with (system_versioning = on (history_table = aaa.bbb, data_consistency_check = off));
GO
create table t13 (a int)
with (remote_data_archive = on (filter_predicate = null, migration_state = outbound));
GO
create table t14 (a int)
with (data_deletion = on (filter_column = a, retention_period = 14 day));
GO

-- CREATE INDEX WHERE... WITH (<index_option> [,...n]) syntax
create index t1_idx5 on t1(a) where a is not null 
with (pad_index = off, fillfactor = 90, maxdop = 1, sort_in_tempdb = off, max_duration = 2 minutes);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'minutes' at line 3 and character position 91)~~

create index t1_idx6 on t1(a)
with (data_compression = page on partitions (2, 4, 6 to 8));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'on' at line 2 and character position 30)~~


-- CREATE COLUMNSTORE INDEX
create columnstore index t1_idx7 on t1 (a) with (drop_existing = on);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'columnstore' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_index_columnstore to ignore)~~

create clustered columnstore index t1_idx8 on t1 (a) on [primary];
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'columnstore' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_index_columnstore to ignore)~~


-- CREATE TABLE... WITH FILLFACTOR = num
create table t15 (a int primary key with fillfactor=50);
GO
-- ALTER TABLE... WITH FILLFACTOR = num
create table t16 (a int not null);
GO
alter table t16 add primary key (a) with fillfactor=50;
GO

-- check property of the index
select indexname, indexdef from pg_indexes where tablename like 't_' order by indexname;
GO
~~START~~
varchar#!#text
t1_idx1t18e881e6977bd6b8cbb78725b3a8ac988#!#CREATE INDEX t1_idx1t18e881e6977bd6b8cbb78725b3a8ac988 ON master_dbo.t1 USING btree (a)
t1_idx2t117dbbb74ced1fe936cdf7cd7baeff266#!#CREATE INDEX t1_idx2t117dbbb74ced1fe936cdf7cd7baeff266 ON master_dbo.t1 USING btree (a)
t1_idx3t19eceb46c036c3c1bd6895a34ec3c93f1#!#CREATE INDEX t1_idx3t19eceb46c036c3c1bd6895a34ec3c93f1 ON master_dbo.t1 USING btree (a)
t1_idx4t1fb4b953a652720bfa47919dff09b172e#!#CREATE INDEX t1_idx4t1fb4b953a652720bfa47919dff09b172e ON master_dbo.t1 USING btree (a)
t2_pkey#!#CREATE UNIQUE INDEX t2_pkey ON master_dbo.t2 USING btree (a)
t3_pkey#!#CREATE UNIQUE INDEX t3_pkey ON master_dbo.t3 USING btree (a)
t4_a_key#!#CREATE UNIQUE INDEX t4_a_key ON master_dbo.t4 USING btree (a)
t5_a_key#!#CREATE UNIQUE INDEX t5_a_key ON master_dbo.t5 USING btree (a)
t6_pkey#!#CREATE UNIQUE INDEX t6_pkey ON master_dbo.t6 USING btree (a)
t7_pkey#!#CREATE UNIQUE INDEX t7_pkey ON master_dbo.t7 USING btree (a)
t8_a_key#!#CREATE UNIQUE INDEX t8_a_key ON master_dbo.t8 USING btree (a)
t9_a_key#!#CREATE UNIQUE INDEX t9_a_key ON master_dbo.t9 USING btree (a)
~~END~~


-- CREATE TABLE(..., { PRIMARY KEY | UNIQUE } ...
--                   ON { partition_scheme | filegroup | "default" }) syntax
--                   ^
create table t17(a int, primary key clustered (a) on [PRIMARY]);
GO
create table t18(a int, primary key clustered (a) on [PRIMARY]);
GO
create table t19(a int, unique clustered (a) on [PRIMARY]);
GO
create table t20(a int, unique clustered (a) on [PRIMARY]);
GO

-- ALTER TABLE ... ADD [CONSTRAINT ...] DEFAULT ... FOR ...
create table t21 (a int, b int);
GO
alter table t21 add default 99 for a;
GO
insert into t21(b) values (10);
GO
~~ROW COUNT: 1~~

select * from t21;
GO
~~START~~
int#!#int
99#!#10
~~END~~


alter table t21 alter a drop default;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'a' at line 1 and character position 22)~~

alter table t21 add constraint dflt11 default 11 for a;
GO
insert into t21(b) values (20);
GO
~~ROW COUNT: 1~~

select * from t21;
GO
~~START~~
int#!#int
99#!#10
11#!#20
~~END~~


-- Invalid default value
alter table t21 add default 'test' for a;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: invalid input syntax for type integer: "test")~~

-- Invalid column
alter table t21 add default 99 for c;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "c" of relation "t21" does not exist)~~

-- Invalid table
alter table t_invalid add default 99 for a;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: relation "t_invalid" does not exist)~~


-- ALTER TABLE ... WITH [NO]CHECK ADD CONSTRAINT ...
alter table t21 with check add constraint chk1 check (a > 0);  -- add chk1 and enable it
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER TABLE WITH [NO]CHECK ADD' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_nocheck_add_constraint to ignore)~~

alter table t21 with nocheck add constraint chk2 check (b > 0);  -- add chk2 and disable it
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER TABLE WITH [NO]CHECK ADD' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_nocheck_add_constraint to ignore)~~

insert into t21 values (1, 1);
GO
~~ROW COUNT: 1~~

-- error, not fulfilling constraint chk1
insert into t21 values (0, 1);
GO
~~ROW COUNT: 1~~

-- should pass after CHECK/NOCHECK is fully supported
insert into t21 values (1, 0);
GO
~~ROW COUNT: 1~~

select * from t21;
GO
~~START~~
int#!#int
99#!#10
11#!#20
1#!#1
0#!#1
1#!#0
~~END~~


-- ALTER TABLE ... [NO]CHECK CONSTRAINT ...
-- should pass after CHECK/NOCHECK is fully supported
alter table t21 nocheck constraint chk1;  -- disable chk1
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER TABLE [NO]CHECK' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_nocheck_existing_constraint to ignore)~~

alter table t21 check constraint chk2;  -- enable chk2
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER TABLE [NO]CHECK' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_nocheck_existing_constraint to ignore)~~


-- CREATE TABLE ... ( a int identity(...) NOT FOR REPLICATION)
create table t22 (a int identity(1,1) NOT FOR REPLICATION);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'NOT FOR REPLICATION' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_for_replication to ignore)~~

create table t23 (a int identity(1,1) NOT FOR REPLICATION NOT NULL);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'NOT FOR REPLICATION' is not currently supported in Babelfish. please use babelfishpg_tsql.escape_hatch_for_replication to ignore)~~

-- ROWGUIDCOL syntax support
create table t24 (a uniqueidentifier ROWGUIDCOL);
GO
create table t25 (a int);
GO
alter table t25 add b uniqueidentifier ROWGUIDCOL;
GO

-- computed columns
-- CREATE TABLE(..., <column_name> AS <computed_column_expression>
--								   ^	[ PERSISTED ] <column constraints>)
create table computed_column_t1 (a nvarchar(10), b  AS substring(a,1,3) UNIQUE NOT NULL);
GO
insert into computed_column_t1 values('abcd');
GO
~~ROW COUNT: 1~~

select * from computed_column_t1;
GO
~~START~~
nvarchar#!#nvarchar
abcd#!#abc
~~END~~


-- test whether other constraints are working with computed columns
insert into computed_column_t1 values('abcd'); -- throws error
GO
~~ERROR (Code: 2627)~~

~~ERROR (Message: duplicate key value violates unique constraint "computed_column_t1_b_key")~~


-- check PERSISTED keyword
-- should be able to use columns from left and right in the expression
create table computed_column_t2 (a int, b  AS (a + c) / 4 PERSISTED, c int);
GO
insert into computed_column_t2 (a,c) values (12, 12);
GO
~~ROW COUNT: 1~~

select * from computed_column_t2;
GO
~~START~~
int#!#int#!#int
12#!#6#!#12
~~END~~


-- should throw error - order matters
create table computed_column_error (a int, b  AS a/4 NOT NULL PERSISTED);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PERSISTED' is not currently supported in Babelfish)~~


-- should throw error if postgres syntax is used in TSQL dialect
create table computed_column_error (a int, b numeric generated always as (a/4) stored);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '(' at line 2 and character position 73)~~


-- should throw error if there is any error in computed column expression
create table computed_column_error (a nvarchar(10), b  AS non_existant_function(a,1,3) UNIQUE NOT NULL);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function non_existant_function(nvarchar, integer, integer) does not exist)~~

-- should throw error in case of nested computed columns
create table computed_column_error (a int, b as c, c as a);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: computed column "c" in table "computed_column_error" is not allowed to be used in another computed-column definition)~~

create table computed_column_error (a int, b as b + 1);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: computed column "b" in table "computed_column_error" is not allowed to be used in another computed-column definition)~~


-- in case of multiple computed column, the entire statement should be rolled
-- back even when the last one throws error
create table computed_column_error (a int, b as a, c as b);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: computed column "b" in table "computed_column_error" is not allowed to be used in another computed-column definition)~~

select * from computed_column_error;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: relation "computed_column_error" does not exist)~~


-- ALTER TABLE... ADD <column_name> AS <computed_column_expression>
--							  	    ^	[ PERSISTED ] <column constraints>)
alter table computed_column_t1 add c int;
GO
alter table computed_column_t1 add d as c / 4;
GO
insert into computed_column_t1(a, c) VALUES ('efgh', 12);
GO
~~ROW COUNT: 1~~

select * from computed_column_t1;
GO
~~START~~
nvarchar#!#nvarchar#!#int#!#int
abcd#!#abc#!#<NULL>#!#<NULL>
efgh#!#efg#!#12#!#3
~~END~~


--should thow error in case of nested computed columns
alter table computed_column_t1 add e as d;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot use generated column "d" in column generation expression)~~

alter table computed_column_t1 add e as e + 1;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: computed column "e" in table "computed_column_t1" is not allowed to be used in another computed-column definition)~~


-- should throw error if any of the dependant columns is modified or dropped.
alter table computed_column_t1 drop column a;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot drop a column used by a generated column)~~

alter table computed_column_t1 alter column a varchar;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot alter type of a column used by a generated column)~~


-- should throw error as rand is non-deterministic
alter table computed_column_t1 add e as rand() persisted;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: generation expression is not immutable)~~


-- but rand[seed] should succeed
alter table computed_column_t1 add e as rand(1) persisted;
GO

-- should throw error in postgres dialect
select set_config('babelfishpg_tsql.sql_dialect', 'postgres', null);
GO
~~START~~
text
postgres
~~END~~

create table computed_column_error (a int, b  AS (a/4) PERSISTED NOT NULL);
GO

-- since we're in postgres dialect, also check the table definition whether
-- the computed column got resolved to correct datatype
SELECT * FROM computed_column_t1
GO
~~START~~
nvarchar#!#nvarchar#!#int#!#int#!#float
abcd#!#abc#!#<NULL>#!#<NULL>#!#0.39485815595643303
efgh#!#efg#!#12#!#3#!#0.39485815595643303
~~END~~


DECLARE @babelfishpg_tsql_sql_dialect varchar(50) = 'tsql';
GO

drop table t1;
GO
drop table t2;
GO
drop table t3;
GO
drop table t4;
GO
drop table t5;
GO
drop table t6;
GO
drop table t7;
GO
drop table t8;
GO
drop table t9;
GO
drop table t10;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: table "t10" does not exist)~~

drop table t11;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: table "t11" does not exist)~~

drop table t12;
GO
drop table t13;
GO
drop table t14;
GO
drop table t15;
GO
drop table t16;
GO
drop table t17;
GO
drop table t18;
GO
drop table t19;
GO
drop table t20;
GO
drop table t21;
GO
drop table t22;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: table "t22" does not exist)~~

drop table t23;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: table "t23" does not exist)~~

drop table t24;
GO
drop table t25;
GO
drop table computed_column_t1;
GO
drop table computed_column_t2;
GO
