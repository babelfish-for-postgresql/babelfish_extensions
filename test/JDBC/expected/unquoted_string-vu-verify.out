
-- tsql

-- BABEL-334: Support unquoted string parameter values in procedure calls/declarations
-- This also exercises parts of the ANTLR parse tree rewriting
-- should print strings:
exec unqStr_proc_1 aBc, def$ghi
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

exec unqStr_proc_1 aBc, 'this is a string'
go
~~START~~
varchar#!#varchar
aBc#!#this is a string
~~END~~

exec unqStr_proc_1 'this is a string', def
go
~~START~~
varchar#!#varchar
this is a string#!#def
~~END~~

exec unqStr_proc_1 aBc#def, null
go
~~START~~
varchar#!#varchar
aBc#def#!#<NULL>
~~END~~

exec unqStr_proc_1 @par1=aBc$def, @par2=null
go
~~START~~
varchar#!#varchar
aBc$def#!#<NULL>
~~END~~

execute unqStr_proc_1 @par1=aBc$def, @par2=null
go
~~START~~
varchar#!#varchar
aBc$def#!#<NULL>
~~END~~

exec unqStr_proc_1 @par1=null, @par2=aBc#def
go
~~START~~
varchar#!#varchar
<NULL>#!#aBc#def
~~END~~

execute unqStr_proc_1 @par1=null, @par2=aBc#def
go
~~START~~
varchar#!#varchar
<NULL>#!#aBc#def
~~END~~

-- should print strings, bracketed identifiers are also interpreted as unquoted strings in SQL Server:
exec unqStr_proc_1 [aBc], [def$ghi]
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~


-- should print strings, bracketed identifiers as procedure args are also interpreted as unquoted strings in SQL Server:
set quoted_identifier on
go
exec unqStr_proc_1 "aBc", "def$ghi"
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

execute unqStr_proc_1 "aBc", "def$ghi"
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

execute unqStr_proc_1 @par1 = "aBc", @par2 = "def$ghi"
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

-- strings longer than 63 should not be truncated, hashed or downcased
exec unqStr_proc_1 a23456789B123456789C123456789d123456789E123456789F123456789G123456789H, AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~

execute    unqStr_proc_1     @par1 = a23456789B123456789C123456789d123456789E123456789F123456789G123456789H, @par2=AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~

execute    unqStr_proc_1     @par1 = "a23456789B123456789C123456789d123456789E123456789F123456789G123456789H", @par2="AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB"
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~



-- without EXEC keyword:
unqStr_proc_1 aBc, def$ghi
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

unqStr_proc_1 aBc, 'this is a string'
go
~~START~~
varchar#!#varchar
aBc#!#this is a string
~~END~~

unqStr_proc_1 'this is a string', def
go
~~START~~
varchar#!#varchar
this is a string#!#def
~~END~~

unqStr_proc_1 aBc#def, null
go
~~START~~
varchar#!#varchar
aBc#def#!#<NULL>
~~END~~

unqStr_proc_1 @par1=aBc$def, @par2=null
go
~~START~~
varchar#!#varchar
aBc$def#!#<NULL>
~~END~~

unqStr_proc_1 @par1=null, @par2=aBc#def
go
~~START~~
varchar#!#varchar
<NULL>#!#aBc#def
~~END~~

/*test*/unqStr_proc_1 aBc, def$ghi
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

/*test*/
unqStr_proc_1/*test*/
aBc, 
'this is a string'
go
~~START~~
varchar#!#varchar
aBc#!#this is a string
~~END~~

-- should print strings, bracketed identifiers are also interpreted as unquoted strings in SQL Server:
unqStr_proc_1 [aBc], [def$ghi]
go
~~START~~
varchar#!#varchar
aBc#!#def$ghi
~~END~~

-- strings longer than 63 should not be truncated, hashed or downcased
unqStr_proc_1 a23456789B123456789C123456789d123456789E123456789F123456789G123456789H, AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~

      unqStr_proc_1     @par1 = a23456789B123456789C123456789d123456789E123456789F123456789G123456789H, @par2=AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~

  unqStr_proc_1     @par1 = "a23456789B123456789C123456789d123456789E123456789F123456789G123456789H", @par2="AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB"
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~



set quoted_identifier off
go
-- now they are just regular double-quoted strings:
exec unqStr_proc_1 "aBc aBc", "def ?! ghi"
go
~~START~~
varchar#!#varchar
aBc aBc#!#def ?! ghi
~~END~~

-- should raise error since 'user' is a function and not allowed as argument
exec unqStr_proc_1 user, 'aBc'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'user' at line 2 and character position 19)~~

exec unqStr_proc_1 @par1=user, @par2='aBc'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'user' at line 1 and character position 25)~~

-- should raise error because the unquoted argument cannot be interpreted as a string:
exec unqStr_proc_1 aBc, def.ghi
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '.' at line 2 and character position 27)~~

exec unqStr_proc_1 aBc, def~ghi
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '~' at line 1 and character position 27)~~



-- should print contents of variables:
declare @myvar varchar(20), @myvar2 varchar(20) = 'this is myvar2'
exec unqStr_proc_1 @myvar, @myvar2
exec unqStr_proc_1 @par1=@myvar2, @par2=@myvar
go
~~START~~
varchar#!#varchar
<NULL>#!#this is myvar2
~~END~~

~~START~~
varchar#!#varchar
this is myvar2#!#<NULL>
~~END~~

exec unqStr_proc_1 @@language, @@servicename
go
~~START~~
varchar#!#varchar
us_english#!#MSSQLSERVER
~~END~~


-- should print variable names with leading space:
exec unqStr_proc_1 [ @@language], [ @@servicename]
go
~~START~~
varchar#!#varchar
 @@language#!# @@servicename
~~END~~


-- should print arguments as strings
exec unqStr_proc_1 '[@@language]', '[@@servicename]'
go
~~START~~
varchar#!#varchar
[@@language]#!#[@@servicename]
~~END~~

exec unqStr_proc_1 '@@language', '@@servicename'
go
~~START~~
varchar#!#varchar
@@language#!#@@servicename
~~END~~


-- should print variables names, not their contents
-- however, this does not work correctly in Babelfish: it raises error 'column "@@language" does not exist' 
-- both before and after the fix of unquoted strings in BABEL-334
exec unqStr_proc_1 [@@language], [@@servicename]
go
~~START~~
varchar#!#varchar
@@language#!#@@servicename
~~END~~


-- should return column value:
select dbo.unqStr_func_1(aBc) from unqStr_tab  
go
~~START~~
varchar
this is column abc
~~END~~

select dbo.unqStr_func_1([aBc]) from unqStr_tab  
go
~~START~~
varchar
this is column abc
~~END~~

-- should return NULL
select dbo.unqStr_func_1(null) from unqStr_tab  
go
~~START~~
varchar
<NULL>
~~END~~

select dbo.unqStr_func_1(null)
go
~~START~~
varchar
<NULL>
~~END~~

set quoted_identifier on
go
select dbo.unqStr_func_1("aBc") from unqStr_tab  
go
~~START~~
varchar
this is column abc
~~END~~

set quoted_identifier off
go
-- now it's just a regular double-quoted string:
select dbo.unqStr_func_1("aBc") from unqStr_tab  
go
~~START~~
varchar
aBc
~~END~~

-- should fail:
select dbo.unqStr_func_1(aBc) 
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "abc" does not exist)~~

select dbo.unqStr_func_1([aBc]) 
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "abc" does not exist)~~

set quoted_identifier on
go
-- should fail:
select dbo.unqStr_func_1("aBc") 
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: column "abc" does not exist)~~

set quoted_identifier off
go
-- now it's just a regular double-quoted string:
select dbo.unqStr_func_1("aBc") 
go
~~START~~
varchar
aBc
~~END~~


-- should print 'aBc':
exec unqStr_proc_2
go
~~START~~
varchar
aBc
~~END~~


set quoted_identifier on
go
exec unqStr_proc_2a
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~

set quoted_identifier off
go
exec unqStr_proc_2a
go
~~START~~
varchar#!#varchar
a23456789B123456789C123456789d123456789E123456789F123456789G123456789H#!#AaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB
~~END~~


set quoted_identifier on
go
exec unqStr_proc_2b
go
~~START~~
varchar#!#varchar
Aaa aaB#!#Aa"bB'cC
~~END~~

set quoted_identifier off
go
exec unqStr_proc_2b
go
~~START~~
varchar#!#varchar
Aaa aaB#!#Aa"bB'cC
~~END~~


set quoted_identifier on
go
exec unqStr_proc_2c
go
~~START~~
varchar#!#varchar
[Aaa aaB]#!#[Aa"bB'cC]
~~END~~

exec unqStr_proc_2c "[Xxx xxyZ]", "[Xx""yY'zZ]"
go
~~START~~
varchar#!#varchar
[Xxx xxyZ]#!#[Xx"yY'zZ]
~~END~~

set quoted_identifier off
go
exec unqStr_proc_2c
go
~~START~~
varchar#!#varchar
[Aaa aaB]#!#[Aa"bB'cC]
~~END~~

exec unqStr_proc_2c "[Xxx xxyZ]", "[Xx""yY'zZ]"
go
~~START~~
varchar#!#varchar
[Xxx xxyZ]#!#[Xx"yY'zZ]
~~END~~


set quoted_identifier on
go
exec unqStr_proc_2d
go
~~START~~
varchar#!#varchar
[Aaa aaB]#!#[Aa"bB'cC]
~~END~~

exec unqStr_proc_2d "[Xxx xxyZ]", "[Xx""yY'zZ]"
go
~~START~~
varchar#!#varchar
[Xxx xxyZ]#!#[Xx"yY'zZ]
~~END~~

set quoted_identifier off
go
exec unqStr_proc_2d
go
~~START~~
varchar#!#varchar
[Aaa aaB]#!#[Aa"bB'cC]
~~END~~

exec unqStr_proc_2d "[Xxx xxyZ]", "[Xx""yY'zZ]"
go
~~START~~
varchar#!#varchar
[Xxx xxyZ]#!#[Xx"yY'zZ]
~~END~~


set quoted_identifier on
go
exec unqStr_proc_2e
go
~~START~~
varchar#!#varchar
"Aaa aaB"#!#"Aa"bB'cC"
~~END~~

exec unqStr_proc_2e ["Xxx xxyZ"], ["Xx""yY'zZ"]
go
~~START~~
varchar#!#varchar
"Xxx xxyZ"#!#"Xx""yY'zZ"
~~END~~

set quoted_identifier off
go
exec unqStr_proc_2e
go
~~START~~
varchar#!#varchar
"Aaa aaB"#!#"Aa"bB'cC"
~~END~~

exec unqStr_proc_2e ["Xxx xxyZ"], ["Xx""yY'zZ"]
go
~~START~~
varchar#!#varchar
"Xxx xxyZ"#!#"Xx""yY'zZ"
~~END~~


-- empty bracketed identifier raises error in SQL Server, but succeeds in Babelfish,
-- both before and after the fix for BABEL-334
exec unqStr_proc_2e [], 'x'
go
~~START~~
varchar#!#varchar
#!#x
~~END~~


-- double-quoted/bracketed datatype:
set quoted_identifier off
go
exec unqStr_proc_2g
go
~~START~~
varchar
aBc
~~END~~

set quoted_identifier on
go
exec unqStr_proc_2h
go
~~START~~
varchar
aBc
~~END~~


exec unqStr_proc_2i
go
~~START~~
varchar
aBc
~~END~~

set quoted_identifier off
go
-- should print 'dbo':
exec unqStr_proc_3 
go
~~START~~
varchar
dbo
~~END~~


-- should reflect column value:
select dbo.unqStr_func_2(aBc) from unqStr_tab  
go
~~START~~
varchar
this is column abc
~~END~~

-- should print 'dbo', since 'user' is a function call
select dbo.unqStr_func_2(user)
go
~~START~~
varchar
dbo
~~END~~

-- should print 'aBc':
declare @v varchar(20)
execute @v = unqStr_func_2
select @v
go
~~START~~
varchar
aBc
~~END~~

-- this test will fail since 'default' arguments are not yet supported in Babelfish (BABEL-335)
-- once supported, should print 'aBc':
select dbo.unqStr_func_2(default) 
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'default' is not currently supported in Babelfish)~~


-- should print value of @@language:
exec unqStr_proc_4
go
~~START~~
varchar
us_english
~~END~~


-- as a default, @p2 should take value of @p1.
-- however this does not work in Babelfish, both before and after 
-- the fix for unquoted strings in BABEL-334
exec unqStr_proc_5 'this is @p1'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: procedure unqstr_proc_5(unknown) does not exist)~~


exec unqStr_proc_7
go
~~START~~
varchar#!#varchar#!#varchar
aB"c'D#!#dEfg#!#x'Y"z
~~END~~


-- this will not work until 'default' arguments are supported (BABEL-335)
select dbo.unqStr_func_3(default)
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'default' is not currently supported in Babelfish)~~


-- should print value of @@language:
declare @v varchar(20)
exec @v = unqStr_func_3
select @v
go
~~START~~
varchar
us_english
~~END~~


-- psql




-- PG test cases
-- call T-SQL proc from PG, T-SQL semantics still apply
-- should print 'aBc':
-- NOTE: test is disabled as it crashes the JDBC test framework with message 'Received resultset tuples, but no field structure for them'
--call master_dbo.unqStr_proc_2();
--go
-- PG procedure/function calls should not be affected by the T-SQL fix 
-- for unquoted strings in BABEL-334
-- should print 'aBc':
CALL unqStr_pgproc_1('aBc');
go
~~WARNING (Code: 0)~~

~~WARNING (Message: arg=[aBc]  Server SQLState: 00000)~~

-- should raise an error about column not found:
CALL unqStr_pgproc_1(aBc);
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: column "abc" does not exist
  Position: 71
    Server SQLState: 42703)~~


-- should print 'aBc':
select unqStr_pgfunc_1('aBc'); 
go
~~START~~
varchar
aBc
~~END~~

-- should print column value:
select unqStr_pgfunc_1(aBc) from master_dbo.unqStr_tab;
go
~~START~~
varchar
this is column abc
~~END~~

-- should raise an error about column not found:
select unqStr_pgfunc_1(aBc);
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: column "abc" does not exist
  Position: 73
    Server SQLState: 42703)~~

-- should print 'jdbc_user', since 'user' is a function call:
select unqStr_pgfunc_1(user);
go
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: function unqstr_pgfunc_1(name) does not exist
  Hint: No function matches the given name and argument types. You might need to add explicit type casts.
  Position: 70
    Server SQLState: 42883)~~

