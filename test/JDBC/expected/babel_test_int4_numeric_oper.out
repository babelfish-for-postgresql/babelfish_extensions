-- tsql
create table test_int_numeric(a int);
GO

-- insert 1M rows of data
INSERT INTO test_int_numeric (a) SELECT generate_series(1, 1000000);
GO
~~ROW COUNT: 1000000~~


INSERT INTO test_int_numeric VALUES (NULL), (-2147483648), (2147483647);
GO
~~ROW COUNT: 3~~


CREATE INDEX test_int_numeric_idx on test_int_numeric(a);
GO

-- psql
analyse;
GO

-- tsql
select set_config('max_parallel_workers_per_gather', '0', false);
GO
~~START~~
text
0
~~END~~

SELECT set_config('debug_parallel_query', '0', false);
GO
~~START~~
text
off
~~END~~


SELECT set_config('babelfishpg_tsql.explain_costs', 'off', false)
GO
~~START~~
text
off
~~END~~


SET BABELFISH_SHOWPLAN_ALL on
GO

select count(*) from test_int_numeric where a IS NULL;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a IS NULL
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a IS NULL)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 174.537 ms
~~END~~


-- seq scan
select count(*) from test_int_numeric where a <> 5.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a <> 5.0
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: (a <> 5.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 9.861 ms
~~END~~


select count(*) from test_int_numeric where 5.0 <> a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where 5.0 <> a
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: (5.0 <> a)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 8.675 ms
~~END~~


-- index scan on < and >
select count(*) from test_int_numeric where a < 5.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a < 5.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a < 5.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.689 ms
~~END~~


select count(*) from test_int_numeric where 5.0 > a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where 5.0 > a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a < 5.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 8.143 ms
~~END~~


select count(*) from test_int_numeric where a < -2147483648.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a < -2147483648.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a < '-2147483648.0'::numeric)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 18.823 ms
~~END~~


select count(*) from test_int_numeric where -2147483648.0 > a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where -2147483648.0 > a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a < '-2147483648.0'::numeric)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 4.794 ms
~~END~~


select count(*) from test_int_numeric where a <= 5.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a <= 5.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a <= 5.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 1.264 ms
~~END~~


select count(*) from test_int_numeric where 5.0 >= a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where 5.0 >= a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a <= 5.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 1.185 ms
~~END~~


select count(*) from test_int_numeric where a > 999995.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 999995.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a > 999995.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 8.156 ms
~~END~~


select count(*) from test_int_numeric where 999995.0 < a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where 999995.0 < a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a > 999995.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.687 ms
~~END~~


select count(*) from test_int_numeric where a >= 999995.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a >= 999995.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a >= 999995.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.145 ms
~~END~~


select count(*) from test_int_numeric where 999995.0 <= a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where 999995.0 <= a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a >= 999995.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.143 ms
~~END~~


select count(*) from test_int_numeric where a > 2147483647.0;
go
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 2147483647.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a > 2147483647.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.142 ms
~~END~~


select count(*) from test_int_numeric where 2147483647.0 < a;
go
~~START~~
text
Query Text: select count(*) from test_int_numeric where 2147483647.0 < a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a > 2147483647.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.140 ms
~~END~~


-- seq scan on < and >
select count(*) from test_int_numeric where a > 5.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 5.0
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: (a > 5.0)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.142 ms
~~END~~


select count(*) from test_int_numeric where 5.0 < a;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where 5.0 < a
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: (5.0 < a)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.139 ms
~~END~~


-- index scan for BETWEEN
select count(*) from test_int_numeric where a between 5.0 and 10.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a between 5.0 and 10.0
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: ((a >= 5.0) AND (a <= 10.0))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 8.527 ms
~~END~~


-- seq scan for BETWEEN
select count(*) from test_int_numeric where a between 5.0 and 999999.0;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a between 5.0 and 999999.0
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: ((a >= 5.0) AND (a <= 999999.0))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.150 ms
~~END~~


-- mix of int op numeric and int op int
select count(*) from test_int_numeric where (a between 5.0 and 999999.0) and a = 10;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where (a between 5.0 and 999999.0) and a = 10
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: ((a >= 5.0) AND (a <= 999999.0) AND (a = 10))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 17.313 ms
~~END~~


select count(*) from test_int_numeric where a > 5.0 and a < 7;
Go
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 5.0 and a < 7
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: ((a > 5.0) AND (a < 7))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.250 ms
~~END~~


select count(*) from test_int_numeric where 5.0 < a and 7 > a;
Go
~~START~~
text
Query Text: select count(*) from test_int_numeric where 5.0 < a and 7 > a
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: ((a > 5.0) AND (a < 7))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.625 ms
~~END~~



-- shouldn't be any regression on int op int operators
-- seq scan
select count(*) from test_int_numeric where a <> 5;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a <> 5
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: (a <> 5)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.612 ms
~~END~~


-- index scan on < and >
select count(*) from test_int_numeric where a < 5;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a < 5
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a < 5)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.573 ms
~~END~~


select count(*) from test_int_numeric where a < -2147483648;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a < -2147483648
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a < '-2147483648'::integer)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.619 ms
~~END~~


select count(*) from test_int_numeric where a <= 5;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a <= 5
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a <= 5)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.144 ms
~~END~~


select count(*) from test_int_numeric where a > 999995;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 999995
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a > 999995)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.621 ms
~~END~~


select count(*) from test_int_numeric where a >= 999995;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a >= 999995
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a >= 999995)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.145 ms
~~END~~


select count(*) from test_int_numeric where a > 2147483647;
go
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 2147483647
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: (a > 2147483647)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.142 ms
~~END~~


-- seq scan on < and >
select count(*) from test_int_numeric where a > 5;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a > 5
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: (a > 5)
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.142 ms
~~END~~


-- index scan for BETWEEN
select count(*) from test_int_numeric where a between 5 and 10;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a between 5 and 10
Aggregate
  ->  Index Only Scan using test_int_numeric_idxtest_int_nu72fc1a67b46827b2c8511b931e7e1f4b on test_int_numeric
        Index Cond: ((a >= 5) AND (a <= 10))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 6.638 ms
~~END~~


-- seq scan for BETWEEN
select count(*) from test_int_numeric where a between 5 and 999999;
GO
~~START~~
text
Query Text: select count(*) from test_int_numeric where a between 5 and 999999
Aggregate
  ->  Seq Scan on test_int_numeric
        Filter: ((a >= 5) AND (a <= 999999))
~~END~~

~~START~~
text
Babelfish T-SQL Batch Parsing Time: 0.149 ms
~~END~~


SET BABELFISH_SHOWPLAN_ALL OFF
GO


-- actual execution
select count(*) from test_int_numeric where a IS NULL;
GO
~~START~~
int
1
~~END~~


-- seq scan
select count(*) from test_int_numeric where a <> 5.0;
GO
~~START~~
int
1000001
~~END~~


select count(*) from test_int_numeric where 5.0 <> a;
GO
~~START~~
int
1000001
~~END~~


-- index scan on < and >
select count(*) from test_int_numeric where a < 5.0;
GO
~~START~~
int
5
~~END~~


select count(*) from test_int_numeric where 5.0 > a;
GO
~~START~~
int
5
~~END~~


select count(*) from test_int_numeric where a < -2147483648.0;
GO
~~START~~
int
0
~~END~~


select count(*) from test_int_numeric where -2147483648.0 > a;
GO
~~START~~
int
0
~~END~~


select count(*) from test_int_numeric where a <= 5.0;
GO
~~START~~
int
6
~~END~~


select count(*) from test_int_numeric where 5.0 >= a;
GO
~~START~~
int
6
~~END~~


select count(*) from test_int_numeric where a > 999995.0;
GO
~~START~~
int
6
~~END~~


select count(*) from test_int_numeric where 999995.0 < a;
GO
~~START~~
int
6
~~END~~


select count(*) from test_int_numeric where a >= 999995.0;
GO
~~START~~
int
7
~~END~~


select count(*) from test_int_numeric where 999995.0 <= a;
GO
~~START~~
int
7
~~END~~


select count(*) from test_int_numeric where a > 2147483647.0;
go
~~START~~
int
0
~~END~~


select count(*) from test_int_numeric where 2147483647.0 < a;
go
~~START~~
int
0
~~END~~


-- seq scan on < and >
select count(*) from test_int_numeric where a > 5.0;
GO
~~START~~
int
999996
~~END~~


select count(*) from test_int_numeric where 5.0 < a;
GO
~~START~~
int
999996
~~END~~


-- index scan for BETWEEN
select count(*) from test_int_numeric where a between 5.0 and 10.0;
GO
~~START~~
int
6
~~END~~


-- seq scan for BETWEEN
select count(*) from test_int_numeric where a between 5.0 and 999999.0;
GO
~~START~~
int
999995
~~END~~


-- mix of int op numeric and int op int
select count(*) from test_int_numeric where (a between 5.0 and 999999.0) and a = 10;
GO
~~START~~
int
1
~~END~~


select count(*) from test_int_numeric where a > 5.0 and a < 7;
Go
~~START~~
int
1
~~END~~


select count(*) from test_int_numeric where 5.0 < a and 7 > a;
Go
~~START~~
int
1
~~END~~



-- shouldn't be any regression on int op int operators
-- seq scan
select count(*) from test_int_numeric where a <> 5;
GO
~~START~~
int
1000001
~~END~~


-- index scan on < and >
select count(*) from test_int_numeric where a < 5;
GO
~~START~~
int
5
~~END~~


select count(*) from test_int_numeric where a < -2147483648;
GO
~~START~~
int
0
~~END~~


select count(*) from test_int_numeric where a <= 5;
GO
~~START~~
int
6
~~END~~


select count(*) from test_int_numeric where a > 999995;
GO
~~START~~
int
6
~~END~~


select count(*) from test_int_numeric where a >= 999995;
GO
~~START~~
int
7
~~END~~


select count(*) from test_int_numeric where a > 2147483647;
go
~~START~~
int
0
~~END~~


-- seq scan on < and >
select count(*) from test_int_numeric where a > 5;
GO
~~START~~
int
999996
~~END~~


-- index scan for BETWEEN
select count(*) from test_int_numeric where a between 5 and 10;
GO
~~START~~
int
6
~~END~~


-- seq scan for BETWEEN
select count(*) from test_int_numeric where a between 5 and 999999;
GO
~~START~~
int
999995
~~END~~


DROP TABLE test_int_numeric
go
