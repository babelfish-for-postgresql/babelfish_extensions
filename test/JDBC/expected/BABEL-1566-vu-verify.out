-- Test CHECKSUM function works on string input
set quoted_identifier off;
go
-- Null input throws an error, it's not supported.
select CHECKSUM(NULL);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument NULL is invalid for CHECKSUM().)~~


select CHECKSUM(1, NULL);
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Argument NULL is invalid for CHECKSUM().)~~


-- special case : blank string should return 0.
select CHECKSUM("");
go
~~START~~
int
0
~~END~~


select CHECKSUM('');
go
~~START~~
int
0
~~END~~


select CHECKSUM(1, 3, '');
go
~~START~~
int
-987962352
~~END~~


select CHECKSUM('abcd');
go
~~START~~
int
-486772404
~~END~~


select CHECKSUM('abcd', 'efg');
go
~~START~~
int
2059824143
~~END~~


select CHECKSUM('abcd', 'efg', 'hi');
go
~~START~~
int
-1968596193
~~END~~


select CHECKSUM(1, 'efg', 'hi');
go
~~START~~
int
1424525675
~~END~~


-- Test CHECKSUM function works on scalar input
select CHECKSUM(123);
go
~~START~~
int
539801954
~~END~~


select CHECKSUM(10.12345);
go
~~START~~
int
819228203
~~END~~


select CHECKSUM(123, 456);
go
~~START~~
int
-519381959
~~END~~


select CHECKSUM('123', '456');
go
~~START~~
int
-519381959
~~END~~


-- Test CHECKSUM works on table column
select CHECKSUM(a), CHECKSUM(b) from BABEL_1566_vu_prepare_1;
go
~~START~~
int#!#int
-2105750770#!#-486772404
-2105750770#!#-486772404
-1379210184#!#-726154620
~~END~~


select CHECKSUM(a, b) from BABEL_1566_vu_prepare_1;
go
~~START~~
int
-1605946309
-1605946309
-1417281017
~~END~~


select CHECKSUM(*) from BABEL_1566_vu_prepare_1;
go
~~START~~
int
-1605946309
-1605946309
-1417281017
~~END~~


alter table BABEL_1566_vu_prepare_1 drop column a;
go

select checksum(b) from BABEL_1566_vu_prepare_1;
go
~~START~~
int
-486772404
-486772404
-726154620
~~END~~


select checksum(*) from BABEL_1566_vu_prepare_1;
go
~~START~~
int
-486772404
-486772404
-726154620
~~END~~


-- Test checksum on table with null input and empty string
select checksum(*) from BABEL_1566_vu_prepare_2;
go
~~START~~
int
-993377736
-937528691
504439818
~~END~~



select checksum(user_type_id) from sys.columns where object_id=OBJECT_ID('BABEL_1566_vu_prepare_3')
go
~~START~~
int
929643772
~~END~~


EXEC sp_babelfish_configure 'babelfishpg_tsql.escape_hatch_rowversion', 'ignore';
go

select checksum(*) from BABEL_1566_vu_prepare_dates;
go
~~START~~
int
~~END~~


select checksum(*) from BABEL_1566_vu_prepare_4;
go
~~START~~
int
~~END~~


select cast(cast(1 as rowversion) as text);
go
~~START~~
text
0x0000000000000001
~~END~~


select cast(cast(1 as timestamp) as text);
go
~~START~~
text
0x0000000000000001
~~END~~


select cast(cast(1 as bbf_varbinary) as text);
go
~~START~~
text
0x00000001
~~END~~


select cast(cast(1 as sql_variant) as text);
go
~~START~~
text
1
~~END~~


select cast(cast(1 as varbinary) as text);
go
~~START~~
text
0x00000001
~~END~~


select cast(cast('12-12-12 12:12:12' AS DATETIME) as text);
go
~~START~~
text
2012-12-12 12:12:12
~~END~~


select cast(cast('12-12-12 12:12:12' AS DATETIME2) as text);
go
~~START~~
text
2012-12-12 12:12:12
~~END~~


select cast(cast('12-12-12 12:12:12' AS DATE) as text);
go
~~START~~
text
2012-12-12
~~END~~


select cast(cast('12-12-12 12:12:12' AS smalldatetime) as text);
go
~~START~~
text
2012-12-12 12:12:00
~~END~~


select cast(cast(NULL as bit) as text);
go
~~START~~
text
<NULL>
~~END~~


select cast(cast(0xfe as binary) as text);
go
~~START~~
text
0xfe0000000000000000000000000000000000000000000000000000000000
~~END~~


select cast(cast(0xfe as bbf_binary) as text);
go
~~START~~
text
0xfe
~~END~~


select cast(cast(0xfe as bytea) as text);
go
~~START~~
text
\xfe
~~END~~


select cast(cast('2020-10-05 09:00:00.123456-9:00' AS datetimeoffset) as text);
go
~~START~~
text
2020-10-05 09:00:00.123456 -09:00
~~END~~


select cast(cast('00:00:00.234' AS time) as text);
go
~~START~~
text
00:00:00.234
~~END~~

