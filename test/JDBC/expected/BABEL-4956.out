-- tsql
-- Test typmod for BINARY datatype
CREATE TABLE babel_4956_t1 (
    c1  INT  NOT NULL PRIMARY KEY
    , c2     BINARY(4) NOT NULL)
GO

-- tsql port=8199
-- typmod of binary column is kept less in this table
-- compared to source table to test typmod compatibility.
CREATE TABLE babel_4956_t1 (
    c1  INT  NOT NULL PRIMARY KEY
    , c2     BINARY(3) NOT NULL)
GO

-- psql
-- Add table to publication
ALTER PUBLICATION my_pub ADD TABLE master_dbo.babel_4956_t1;
GO

-- psql port=5433
-- Refresh the subscription
ALTER SUBSCRIPTION my_sub REFRESH PUBLICATION;
GO

-- tsql
-- Insert a 4 byte binary value with last trailing byte as 0 in the
-- source table so that it fits into 3 byte in target table's column.
INSERT INTO babel_4956_t1(c1, c2) VALUES(1, 0x11223300);
GO
~~ROW COUNT: 1~~


SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#binary
1#!#11223300
~~END~~


-- psql
-- Wait for data to get replicated
select pg_sleep(2);
GO
~~START~~
void

~~END~~


-- tsql port=8199
-- data should have replicated to target table
SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#binary
1#!#112233
~~END~~


-- tsql
-- Now insert a 4 byte binary value with no trailing zero bytes in the
-- source table so that it does not fit into 3 byte in target table's column.
INSERT INTO babel_4956_t1(c1, c2) VALUES(2, 0x11223344);
GO
~~ROW COUNT: 1~~


SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#binary
1#!#11223300
2#!#11223344
~~END~~


-- psql
-- Wait for data to get replicated
select pg_sleep(2);
GO
~~START~~
void

~~END~~


-- tsql port=8199
-- we should not see the new row in target table
SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#binary
1#!#112233
~~END~~


-- psql
-- Cleanup
ALTER PUBLICATION my_pub DROP TABLE master_dbo.babel_4956_t1;
GO

-- psql port=5433
ALTER SUBSCRIPTION my_sub REFRESH PUBLICATION;
GO

-- tsql
DROP TABLE babel_4956_t1;
GO

-- tsql port=8199
DROP TABLE babel_4956_t1;
GO

-- tsql
-- Test typmod for VARBINARY datatype
CREATE TABLE babel_4956_t1 (
    c1  INT  NOT NULL PRIMARY KEY
    , c2     VARBINARY(4) NOT NULL)
GO

-- tsql port=8199
-- typmod of varbinary columns is kept less in this table
-- compared to source table to test typmod compatibility.
CREATE TABLE babel_4956_t1 (
    c1  INT  NOT NULL PRIMARY KEY
    , c2     VARBINARY(3) NOT NULL)
GO

-- psql
-- Add table to publication
ALTER PUBLICATION my_pub ADD TABLE master_dbo.babel_4956_t1;
GO

-- psql port=5433
-- Refresh the subscription
ALTER SUBSCRIPTION my_sub REFRESH PUBLICATION;
GO

-- tsql
-- Insert a 4 byte varbinary value with last trailing byte as 0 in the
-- source table so that it fits into 3 byte in target table's column.
INSERT INTO babel_4956_t1(c1, c2) VALUES(1, 0x11223300);
GO
~~ROW COUNT: 1~~


SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#varbinary
1#!#11223300
~~END~~


-- psql
-- Wait for data to get replicated
select pg_sleep(2);
GO
~~START~~
void

~~END~~


-- tsql port=8199
-- data should have replicated to target table
SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#varbinary
1#!#112233
~~END~~


-- tsql
-- Now insert a 4 byte varbinary value with no trailing zero bytes in the
-- source table so that it does not fit into 3 byte in target table's column.
INSERT INTO babel_4956_t1(c1, c2) VALUES(2, 0x11223344);
GO
~~ROW COUNT: 1~~


SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#varbinary
1#!#11223300
2#!#11223344
~~END~~


-- psql
-- Wait for data to get replicated
select pg_sleep(2);
GO
~~START~~
void

~~END~~


-- tsql port=8199
-- we should not see the new row in target table
SELECT * FROM babel_4956_t1;
GO
~~START~~
int#!#varbinary
1#!#112233
~~END~~


-- psql
-- Cleanup
ALTER PUBLICATION my_pub DROP TABLE master_dbo.babel_4956_t1;
GO

-- psql port=5433
ALTER SUBSCRIPTION my_sub REFRESH PUBLICATION;
GO

-- tsql
DROP TABLE babel_4956_t1;
GO

-- tsql port=8199
DROP TABLE babel_4956_t1;
GO
