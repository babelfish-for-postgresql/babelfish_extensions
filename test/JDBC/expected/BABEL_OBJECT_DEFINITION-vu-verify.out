-- tsql
-- Throws an error
SELECT OBJECT_DEFINITION();
GO
~~ERROR (Code: 201)~~

~~ERROR (Message: function object_definition expects parameter "object_id", which was not supplied.)~~


-- Should return NULL
SELECT OBJECT_DEFINITION(NULL);
GO
~~START~~
nvarchar
<NULL>
~~END~~


-- Should return NULL
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_t1'))
GO
~~START~~
nvarchar
<NULL>
~~END~~


USE object_definition_db;
GO

-- Should return NULL
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_t1'))
GO
~~START~~
nvarchar
<NULL>
~~END~~


-- Default constraint
SELECT OBJECT_DEFINITION(cc.object_id) FROM sys.default_constraints cc WHERE parent_object_id = OBJECT_ID('object_definition_t1');
GO
~~START~~
nvarchar
100
~~END~~


-- Check constraint
SELECT OBJECT_DEFINITION(cc.object_id) FROM sys.check_constraints cc WHERE parent_object_id = OBJECT_ID('object_definition_t2');
GO
~~START~~
nvarchar
((b <> 'b'))
~~END~~


-- Procedure
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_proc'))
GO
~~START~~
nvarchar
-- Procedure<newline>CREATE PROC object_definition_proc<newline>AS<newline>SELECT 1;<newline>
~~END~~


-- Scalar function
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_fc1'))
GO
~~START~~
nvarchar
-- Scalar function<newline>CREATE FUNCTION object_definition_fc1(@fc1_a nvarchar) RETURNS nvarchar AS BEGIN return @fc1_a END;<newline>
~~END~~


-- DML trigger
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_tr1'))
GO
~~START~~
nvarchar
-- DML trigger<newline>CREATE TRIGGER object_definition_tr1 ON object_definition_t1 INSTEAD OF INSERT<newline>AS<newline>BEGIN<newline>SELECT * FROM object_definition_t1;<newline>END<newline>
~~END~~


-- Inline table-valued function
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_itvf'))
GO
~~START~~
nvarchar
-- Inline table-valued function<newline>CREATE FUNCTION object_definition_itvf()<newline>RETURNS table<newline>AS<newline>RETURN (SELECT 42 AS VALUE)<newline>
~~END~~


-- Table-valued function
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_tvf'))
GO
~~START~~
nvarchar
-- Table-valued function<newline>CREATE FUNCTION object_definition_tvf()<newline>RETURNS @testFuncTvf table (tvf int PRIMARY KEY)<newline>AS<newline>BEGIN<newline>INSERT INTO @testFuncTvf VALUES (1)<newline>RETURN<newline>END;<newline>
~~END~~


-- View
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_sch.object_definition_v1'))
GO
~~START~~
nvarchar
-- View<newline>CREATE VIEW object_definition_sch.object_definition_v1<newline>AS<newline>SELECT * FROM object_definition_t2<newline>
~~END~~


-- Dependency Test
SELECT * FROM object_definition_v2;
GO
~~START~~
int
1
~~END~~


-- reset the login password
ALTER LOGIN object_definition_login1 WITH PASSWORD = '12345678';
GO

-- tsql      user=object_definition_login1 password=12345678
-- Test dependency of user's permission on object
USE object_definition_db;
GO

SELECT current_user;
GO
~~START~~
varchar
object_definition_user2
~~END~~


-- By default, user will not access to any objects
-- following should return NULL
SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_tvf'))
GO
~~START~~
nvarchar
<NULL>
~~END~~


SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_sch.object_definition_v1'))
GO
~~START~~
nvarchar
<NULL>
~~END~~


-- tsql
-- Grant permission to user
GRANT EXECUTE ON object_definition_tvf TO object_definition_user2;
GO

GRANT SELECT ON object_definition_sch.object_definition_v1 TO object_definition_user2;
GO

-- tsql      user=object_definition_login1 password=12345678
-- Test dependency of user's permission on object
USE object_definition_db;
GO

SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_tvf'))
GO
~~START~~
nvarchar
-- Table-valued function<newline>CREATE FUNCTION object_definition_tvf()<newline>RETURNS @testFuncTvf table (tvf int PRIMARY KEY)<newline>AS<newline>BEGIN<newline>INSERT INTO @testFuncTvf VALUES (1)<newline>RETURN<newline>END;<newline>
~~END~~


SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_sch.object_definition_v1'))
GO
~~START~~
nvarchar
-- View<newline>CREATE VIEW object_definition_sch.object_definition_v1<newline>AS<newline>SELECT * FROM object_definition_t2<newline>
~~END~~


-- tsql
-- Test cross database lookup - Returns NULL
USE master;
GO

SELECT OBJECT_DEFINITION(OBJECT_ID('object_definition_db.dbo.object_definition_proc'))
GO
~~START~~
nvarchar
<NULL>
~~END~~


-- Test  : Brackets around datatype for procedure
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'object_definition_procedure';
go
~~START~~
nvarchar
CREATE PROCEDURE object_definition_procedure AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (8000) END<newline>
~~END~~

-- Test  : Single Line comment for procedure
ALTER PROCEDURE object_definition_procedure AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) END
go
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'object_definition_procedure';
go
~~START~~
nvarchar
-- Test  : Single Line comment for procedure<newline>CREATE PROCEDURE object_definition_procedure AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) END<newline>
~~END~~


-- Test  : Multi Line comment for procedure
-- multiline comment line 1
-- multiline comment line 2
ALTER PROCEDURE object_definition_procedure AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) END
go
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'object_definition_procedure';
go
~~START~~
nvarchar
-- Test  : Multi Line comment for procedure<newline>-- multiline comment line 1<newline>-- multiline comment line 2<newline>CREATE PROCEDURE object_definition_procedure AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) END<newline>
~~END~~

-- Test  : Revise test 1,2,3 with functions
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'object_definition_function';
go
~~START~~
nvarchar
CREATE FUNCTION object_definition_function() RETURNS [VARCHAR](8000) AS BEGIN DECLARE @storeOriginalQuery_var [VARCHAR](8000) RETURN @storeOriginalQuery_var END<newline>
~~END~~

-- Test  : Single Line comment for function
ALTER function object_definition_function() RETURNS [VARCHAR](6000) AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) RETURN @storeOriginalQuery_var END
go
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'object_definition_function';
go
~~START~~
nvarchar
-- Test  : Single Line comment for function<newline>CREATE function object_definition_function() RETURNS [VARCHAR](6000) AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) RETURN @storeOriginalQuery_var END<newline>
~~END~~


-- Test  : Multi Line comment for function
-- multiline comment line 1
-- multiline comment line 2
ALTER function object_definition_function() RETURNS [VARCHAR](6000) AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) RETURN @storeOriginalQuery_var END
go
SELECT ROUTINE_DEFINITION FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_NAME = 'object_definition_function';
go
~~START~~
nvarchar
-- Test  : Multi Line comment for function<newline>-- multiline comment line 1<newline>-- multiline comment line 2<newline>CREATE function object_definition_function() RETURNS [VARCHAR](6000) AS BEGIN DECLARE @storeOriginalQuery_var [varchar] (6000) RETURN @storeOriginalQuery_var END<newline>
~~END~~

