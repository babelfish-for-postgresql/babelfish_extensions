-- psql
CREATE EXTENSION pg_stat_statements WITH SCHEMA sys;
go

-- psql
SET sys.pg_stat_statements.track = 'none';
SELECT sys.pg_stat_statements_reset();
go
~~START~~
void

~~END~~


-- tsql
SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go
~~START~~
int#!#bit#!#text#!#bigint#!#bigint#!#bigint
~~END~~



-- tsql
--
-- simple and compound statements
--
SELECT 1 AS "int";
go
~~START~~
int
1
~~END~~



SELECT 'hello'
  -- multiline
  AS "text";
go
~~START~~
varchar
hello
~~END~~


SELECT 'world' AS "text";
go
~~START~~
varchar
world
~~END~~



-- create/drop type
CREATE TYPE pgss_type from varchar(22)
go
DROP TYPE pgss_type
go

-- transaction statements
BEGIN TRANSACTION;
SELECT 1 AS "int";
SELECT 'hello' AS "text";
COMMIT TRANSACTION;
go
~~START~~
int
1
~~END~~

~~START~~
varchar
hello
~~END~~


CREATE TABLE pgss_transaction(age int)
go
INSERT INTO pgss_transaction values(22),(12),(32),(21)
go
~~ROW COUNT: 4~~

BEGIN TRANSACTION;
INSERT INTO pgss_transaction values(12)
SAVE TRANSACTION insertstmt
select * from pgss_transaction
ROLLBACK TRANSACTION insertstmt
COMMIT
go
~~ROW COUNT: 1~~

~~START~~
int
22
12
32
21
12
~~END~~

DROP TABLE pgss_transaction
go

-- cursor(T-SQL only statement, not visible in the view)
CREATE TABLE pgss_cursor(age int)
go
INSERT INTO pgss_cursor values(22),(12),(43)
go
~~ROW COUNT: 3~~

declare pgss_next cursor
for select * from pgss_cursor
open pgss_next
fetch next from pgss_next
go
~~START~~
int
22
~~END~~

DROP TABLE pgss_cursor
go

-- break/continue/raiserror/print (These are T-SQL only statements, not visible in the view)
DECLARE @counter INT = 0;
WHILE @counter <= 5
BEGIN
SET @counter = @counter + 1;
IF @counter = 4
break
ELSE IF @counter = 2
continue
ELSE
RAISERROR('Oops error', 1, 1)
PRINT @counter;
end
go


-- db statements
CREATE DATABASE pgss_db
go
DROP DATABASE pgss_db
go

-- tsql
SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go
~~START~~
int#!#bit#!#text#!#bigint#!#bigint#!#bigint
16385#!#1#!#BEGIN TRANSACTION#!#2#!#0#!#0
16385#!#1#!#COMMIT#!#1#!#0#!#0
16385#!#1#!#COMMIT TRANSACTION#!#1#!#0#!#0
16385#!#1#!#CREATE DATABASE pgss_db#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE pgss_cursor(age int)#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE pgss_transaction(age int)#!#1#!#0#!#0
16385#!#1#!#CREATE TYPE pgss_type from varchar(22)#!#1#!#0#!#0
16385#!#1#!#DROP DATABASE pgss_db#!#1#!#0#!#0
16385#!#1#!#DROP TABLE pgss_cursor#!#1#!#0#!#0
16385#!#1#!#DROP TABLE pgss_transaction#!#1#!#0#!#0
16385#!#1#!#DROP TYPE pgss_type#!#1#!#0#!#0
16385#!#1#!#INSERT INTO pgss_cursor values($1),($2),($3)#!#1#!#3#!#0
16385#!#1#!#INSERT INTO pgss_transaction values($1)#!#1#!#1#!#0
16385#!#1#!#INSERT INTO pgss_transaction values($1),($2),($3),($4)#!#1#!#4#!#0
16385#!#1#!#ROLLBACK TRANSACTION insertstmt#!#1#!#0#!#0
16385#!#1#!#SAVE TRANSACTION insertstmt#!#1#!#0#!#0
16385#!#1#!#SELECT $1<newline>  -- multiline<newline>  AS "text"#!#3#!#3#!#0
16385#!#1#!#SELECT $1 AS "int"#!#2#!#2#!#0
16385#!#1#!#SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != $1 ORDER BY query COLLATE "C"#!#1#!#0#!#0
16385#!#1#!#select * from pgss_cursor#!#1#!#1#!#0
16385#!#1#!#select * from pgss_transaction#!#1#!#5#!#0
~~END~~


-- psql
SELECT sys.pg_stat_statements_reset();
go
~~START~~
void

~~END~~


-- tsql
-- for information_schema.views the name in the view will be shown as information_schema_tsql.views
SELECT * FROM information_schema.views WHERE TABLE_NAME = 'india customers';
go
~~START~~
nvarchar#!#nvarchar#!#nvarchar#!#nvarchar#!#varchar#!#varchar
~~END~~


SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go
~~START~~
int#!#bit#!#text#!#bigint#!#bigint#!#bigint
16385#!#1#!#SELECT * FROM information_schema_tsql.views WHERE TABLE_NAME = $1#!#1#!#0#!#0
~~END~~


-- psql
SELECT sys.pg_stat_statements_reset();
go
~~START~~
void

~~END~~


-- tsql
-- for create/drop/alter login internally we use sysadmin privileges to execute it. Query and queryid is not shown for any statement if user executing the query and owner of extension is not same.
CREATE LOGIN  pgss_l1 with password = '12345678'
go
DROP LOGIN  pgss_l1
go

SELECT dbid, toplevel, query from pg_stat_statements ORDER BY query COLLATE "C";
go
~~START~~
int#!#bit#!#text
16385#!#1#!#<insufficient privilege>
16385#!#1#!#<insufficient privilege>
16385#!#1#!#<insufficient privilege>
~~END~~


-- create insert alter select update delete trigger truncate on test table
CREATE TABLE pgss_test (a int, b char(20));
go
ALTER TABLE pgss_test add c varchar(22)
go
SELECT * FROM pgss_test
go
~~START~~
int#!#char#!#varchar
~~END~~

CREATE TRIGGER pgss_trigger1 on [dbo].[pgss_test] for insert as
PRINT 'after insert trigger called'
go

INSERT INTO pgss_test VALUES(generate_series(1, 10), 'aaa', 'bbb');
go
~~WARNING (Code: 0)~~

~~WARNING (Message: after insert trigger called  Server SQLState: S0001)~~

~~ROW COUNT: 10~~

UPDATE pgss_test SET b = 'bbb' WHERE a > 7;
DELETE FROM pgss_test WHERE a > 9;
go
~~ROW COUNT: 3~~

~~ROW COUNT: 1~~

TRUNCATE TABLE pgss_test;
go

-- role & permissions(grant revoke)
CREATE ROLE pgss_test_role
go
GRANT INSERT, UPDATE, SELECT ON pgss_test TO pgss_test_role
go
REVOKE INSERT, UPDATE, SELECT ON pgss_test FROM pgss_test_role
go

-- enable/disable trigger 
ALTER TABLE pgss_test ENABLE TRIGGER pgss_trigger1
go
ALTER TABLE pgss_test DISABLE  TRIGGER pgss_trigger1
go


-- SELECT without constants
SELECT * FROM pgss_test ORDER BY a;
-- SELECT with IN clause
SELECT * FROM pgss_test WHERE a IN (1, 2, 3, 4, 5);
go
~~START~~
int#!#char#!#varchar
~~END~~

~~START~~
int#!#char#!#varchar
~~END~~


SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go
~~START~~
int#!#bit#!#text#!#bigint#!#bigint#!#bigint
16385#!#1#!#ALTER TABLE pgss_test DISABLE  TRIGGER pgss_trigger1#!#1#!#0#!#0
16385#!#1#!#ALTER TABLE pgss_test ENABLE TRIGGER pgss_trigger1#!#1#!#0#!#0
16385#!#1#!#ALTER TABLE pgss_test add c varchar(22)#!#1#!#0#!#0
16385#!#1#!#CREATE ROLE pgss_test_role#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE pgss_test (a int, b char(20))#!#1#!#0#!#0
16385#!#1#!#CREATE TRIGGER pgss_trigger1 on [dbo].[pgss_test] for insert as<newline>PRINT 'after insert trigger called'#!#1#!#0#!#0
16385#!#1#!#DELETE FROM pgss_test WHERE a > $1#!#1#!#1#!#0
16385#!#1#!#GRANT INSERT, UPDATE, SELECT ON pgss_test TO pgss_test_role#!#1#!#0#!#0
16385#!#1#!#INSERT INTO pgss_test VALUES(generate_series($1, $2), $3, $4)#!#1#!#10#!#0
16385#!#1#!#REVOKE INSERT, UPDATE, SELECT ON pgss_test FROM pgss_test_role#!#1#!#0#!#0
16385#!#1#!#SELECT * FROM pgss_test#!#1#!#0#!#0
16385#!#1#!#SELECT * FROM pgss_test ORDER BY a#!#1#!#0#!#0
16385#!#1#!#SELECT * FROM pgss_test WHERE a IN ($1, $2, $3, $4, $5)#!#1#!#0#!#0
16385#!#1#!#SELECT dbid, toplevel, query from pg_stat_statements ORDER BY query COLLATE "C"#!#1#!#3#!#0
16385#!#1#!#TRUNCATE TABLE pgss_test#!#1#!#0#!#0
16385#!#1#!#UPDATE pgss_test SET b = $1 WHERE a > $2#!#1#!#3#!#0
~~END~~


-- psql
SELECT sys.pg_stat_statements_reset();
go
~~START~~
void

~~END~~


-- tsql
DROP TABLE pgss_test;
DROP ROLE pgss_test_role;
go

-- group by rollup
SELECT a, b, c
FROM (VALUES (1, 2, 3), (4, NULL, 6), (7, 8, 9)) AS t (a, b, c)
GROUP BY ROLLUP(a, b), rollup(a, c)
ORDER BY a, b, c;
go
~~START~~
int#!#int#!#int
<NULL>#!#<NULL>#!#<NULL>
1#!#<NULL>#!#<NULL>
1#!#<NULL>#!#<NULL>
1#!#<NULL>#!#<NULL>
1#!#<NULL>#!#3
1#!#<NULL>#!#3
1#!#2#!#<NULL>
1#!#2#!#<NULL>
1#!#2#!#3
4#!#<NULL>#!#<NULL>
4#!#<NULL>#!#<NULL>
4#!#<NULL>#!#<NULL>
4#!#<NULL>#!#<NULL>
4#!#<NULL>#!#<NULL>
4#!#<NULL>#!#6
4#!#<NULL>#!#6
4#!#<NULL>#!#6
7#!#<NULL>#!#<NULL>
7#!#<NULL>#!#<NULL>
7#!#<NULL>#!#<NULL>
7#!#<NULL>#!#9
7#!#<NULL>#!#9
7#!#8#!#<NULL>
7#!#8#!#<NULL>
7#!#8#!#9
~~END~~


SELECT COUNT(*) FROM pg_stat_statements WHERE query LIKE '%GROUP BY%ROLLUP%';
go
~~START~~
int
1
~~END~~


-- psql
SELECT sys.pg_stat_statements_reset();
go
~~START~~
void

~~END~~


-- tsql

--
-- insert, update, delete on test table to validate WAL generation metrics
--
CREATE TABLE pgss_test (a int, b char(20));
INSERT INTO pgss_test VALUES(generate_series(1, 10), 'aaa');
UPDATE pgss_test SET b = 'bbb' WHERE a > 7;
DELETE FROM pgss_test WHERE a > 9;
-- DROP test table
DROP TABLE pgss_test;
go
~~ROW COUNT: 10~~

~~ROW COUNT: 3~~

~~ROW COUNT: 1~~


-- Check WAL is generated for the above statements
SELECT query, calls, rows
FROM pg_stat_statements where wal_bytes != 0 and wal_records != 0 ORDER BY query COLLATE "C";
go
~~START~~
text#!#bigint#!#bigint
CREATE TABLE pgss_test (a int, b char(20))#!#1#!#0
DELETE FROM pgss_test WHERE a > $1#!#1#!#1
DROP TABLE pgss_test#!#1#!#0
INSERT INTO pgss_test VALUES(generate_series($1, $2), $3)#!#1#!#10
UPDATE pgss_test SET b = $1 WHERE a > $2#!#1#!#3
~~END~~


-- tsql

--
-- insert, update, delete on test table to validate time generation metrics
--
CREATE TABLE pgss_test (a int, b char(20));
INSERT INTO pgss_test VALUES(generate_series(1, 10), 'aaa');
UPDATE pgss_test SET b = 'bbb' WHERE a > 7;
DELETE FROM pgss_test WHERE a > 9;
-- DROP test table
DROP TABLE pgss_test;
go
~~ROW COUNT: 10~~

~~ROW COUNT: 3~~

~~ROW COUNT: 1~~


-- Check Time related columns is generated for the above statements
SELECT query, calls, rows
FROM pg_stat_statements where total_exec_time > 0 and min_exec_time > 0  ORDER BY query COLLATE "C";
go
~~START~~
text#!#bigint#!#bigint
<insufficient privilege>#!#1#!#1
CREATE TABLE pgss_test (a int, b char(20))#!#2#!#0
DELETE FROM pgss_test WHERE a > $1#!#1#!#1
DELETE FROM pgss_test WHERE a > $1#!#1#!#1
DROP TABLE pgss_test#!#2#!#0
INSERT INTO pgss_test VALUES(generate_series($1, $2), $3)#!#1#!#10
INSERT INTO pgss_test VALUES(generate_series($1, $2), $3)#!#1#!#10
SELECT query, calls, rows<newline>FROM pg_stat_statements where wal_bytes != $1 and wal_records != $2 ORDER BY query COLLATE "C"#!#1#!#5
UPDATE pgss_test SET b = $1 WHERE a > $2#!#1#!#3
UPDATE pgss_test SET b = $1 WHERE a > $2#!#1#!#3
~~END~~


-- tsql
-- join, aggregate functions, view, constraints
CREATE TABLE pgss_cust(customerid int not null, name varchar(22), age int, check (age>=18), primary key(customerid))
CREATE TABLE pgss_orders(orderid int not null, customerid int, country varchar(20) default 'INDIA', primary key(orderid), foreign key(customerid) references pgss_cust(customerid))
INSERT INTO pgss_cust values(1, 'ABC', 18),(2,'XYZ', 21), (3, 'LMN', 29),(4, 'PQR', 52),(5, 'STU', 23)
INSERT INTO pgss_orders values(10, 5, 'London'), (11, 3, 'India'), (12, 2, 'USA'), (13, 4, 'Pakistan'),(14, 5, 'Germany'),(15, 1, 'India')
go
~~ROW COUNT: 5~~

~~ROW COUNT: 6~~


SELECT pgss_cust.name, pgss_orders.orderid, pgss_orders.country from pgss_orders inner join pgss_cust on pgss_cust.customerid = pgss_orders.customerid;
go
~~START~~
varchar#!#int#!#varchar
STU#!#10#!#London
LMN#!#11#!#India
XYZ#!#12#!#USA
PQR#!#13#!#Pakistan
STU#!#14#!#Germany
ABC#!#15#!#India
~~END~~


SELECT COUNT(*) from pgss_orders where country ='India'
go
~~START~~
int
2
~~END~~


CREATE VIEW [India customers] as select customerid from pgss_orders where country = 'India'
go

SELECT * FROM [India customers]
go
~~START~~
int
3
1
~~END~~


SELECT * FROM pgss_cust
go
~~START~~
int#!#varchar#!#int
1#!#ABC#!#18
2#!#XYZ#!#21
3#!#LMN#!#29
4#!#PQR#!#52
5#!#STU#!#23
~~END~~


SELECT AVG(age) FROM pgss_cust
go
~~START~~
int
28
~~END~~


SELECT REVERSE(name) FROM pgss_cust
go
~~START~~
text
CBA
ZYX
NML
RQP
UTS
~~END~~


-- tsql function
CREATE FUNCTION pgss_f1(@a INT) RETURNS INT AS BEGIN RETURN (@a + 1) END; 
go

CREATE SEQUENCE [dbo].[newCounter] AS int START WITH 5 increment by 5 
go

-- this will show up as select nextval() in the view
SELECT NEXT VALUE FOR [dbo].[newCounter]
go
~~START~~
bigint
5
~~END~~


DROP SEQUENCE [dbo].[newCounter]
go

-- Inline table-valued function
CREATE FUNCTION [dbo].[getCustomers](@age int) returns table as return 
(select pgss_cust.customerid, pgss_cust.name, pgss_cust.age from pgss_cust
where age >= @age)
go
SELECT * FROM [dbo].[getCustomers](20)
go
~~START~~
int#!#varchar#!#int
2#!#XYZ#!#21
3#!#LMN#!#29
4#!#PQR#!#52
5#!#STU#!#23
~~END~~


-- Temp table
CREATE TABLE #pgss_demo(age int)
go

-- tsql procedure
CREATE PROC pgss_p1 @a INT, @b FLOAT AS SELECT @a, @b; 
go


DROP VIEW  [India customers]
go
DROP TABLE pgss_orders
go
DROP TABLE pgss_cust
go
DROP FUNCTION [dbo].[getCustomers]
go
DROP FUNCTION pgss_f1
go
DROP PROCEDURE pgss_p1;
go


-- tsql
SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go
~~START~~
int#!#bit#!#text#!#bigint#!#bigint#!#bigint
16385#!#1#!#CREATE FUNCTION [dbo].[getCustomers](@age int) returns table as return <newline>(select pgss_cust.customerid, pgss_cust.name, pgss_cust.age from pgss_cust<newline>where age >= @age)#!#1#!#0#!#0
16385#!#1#!#CREATE FUNCTION pgss_f1(@a INT) RETURNS INT AS BEGIN RETURN (@a + 1) END;#!#1#!#0#!#0
16385#!#1#!#CREATE PROC pgss_p1 @a INT, @b FLOAT AS SELECT @a, @b;#!#1#!#0#!#0
16385#!#1#!#CREATE SEQUENCE [dbo].[newCounter] AS int START WITH 5 increment by 5#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE #pgss_demo(age int)#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE pgss_cust(customerid int not null, name varchar(22), age int, check (age>=18), primary key(customerid))#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE pgss_orders(orderid int not null, customerid int, country varchar(20) default 'INDIA', primary key(orderid), foreign key(customerid) references pgss_cust(customerid))#!#1#!#0#!#0
16385#!#1#!#CREATE TABLE pgss_test (a int, b char(20))#!#2#!#0#!#0
16385#!#1#!#CREATE VIEW [India customers] as select customerid from pgss_orders where country = 'India'#!#1#!#0#!#0
16385#!#1#!#DELETE FROM pgss_test WHERE a > $1#!#1#!#1#!#0
16385#!#1#!#DELETE FROM pgss_test WHERE a > $1#!#1#!#1#!#0
16385#!#1#!#DROP FUNCTION [dbo].[getCustomers]#!#1#!#0#!#0
16385#!#1#!#DROP FUNCTION pgss_f1#!#1#!#0#!#0
16385#!#1#!#DROP PROCEDURE pgss_p1#!#1#!#0#!#0
16385#!#1#!#DROP SEQUENCE [dbo].[newCounter]#!#1#!#0#!#0
16385#!#1#!#DROP TABLE pgss_cust#!#1#!#0#!#0
16385#!#1#!#DROP TABLE pgss_orders#!#1#!#0#!#0
16385#!#1#!#DROP TABLE pgss_test#!#2#!#0#!#0
16385#!#1#!#DROP VIEW  [India customers]#!#1#!#0#!#0
16385#!#1#!#INSERT INTO pgss_cust values($1, $2, $3),($4,$5, $6), ($7, $8, $9),($10, $11, $12),($13, $14, $15)#!#1#!#5#!#0
16385#!#1#!#INSERT INTO pgss_orders values($1, $2, $3), ($4, $5, $6), ($7, $8, $9), ($10, $11, $12),($13, $14, $15),($16, $17, $18)#!#1#!#6#!#0
16385#!#1#!#INSERT INTO pgss_test VALUES(generate_series($1, $2), $3)#!#1#!#10#!#0
16385#!#1#!#INSERT INTO pgss_test VALUES(generate_series($1, $2), $3)#!#1#!#10#!#0
16385#!#1#!#SELECT    nextval($1)#!#1#!#1#!#0
16385#!#1#!#SELECT * FROM [India customers]#!#1#!#2#!#0
16385#!#1#!#SELECT * FROM [dbo].[getCustomers]($1)#!#1#!#4#!#0
16385#!#1#!#SELECT * FROM pgss_cust#!#1#!#5#!#0
16385#!#1#!#SELECT AVG(age) FROM pgss_cust#!#1#!#1#!#0
16385#!#1#!#SELECT COUNT(*) from pgss_orders where country =$1#!#1#!#1#!#0
16385#!#1#!#SELECT REVERSE(name) FROM pgss_cust#!#1#!#5#!#0
16385#!#1#!#SELECT pgss_cust.name, pgss_orders.orderid, pgss_orders.country from pgss_orders inner join pgss_cust on pgss_cust.customerid = pgss_orders.customerid#!#1#!#6#!#0
16385#!#1#!#SELECT query, calls, rows<newline>FROM pg_stat_statements where total_exec_time > $1 and min_exec_time > $2  ORDER BY query COLLATE "C"#!#1#!#10#!#0
16385#!#1#!#SELECT query, calls, rows<newline>FROM pg_stat_statements where wal_bytes != $1 and wal_records != $2 ORDER BY query COLLATE "C"#!#1#!#5#!#0
16385#!#1#!#UPDATE pgss_test SET b = $1 WHERE a > $2#!#1#!#3#!#0
16385#!#1#!#UPDATE pgss_test SET b = $1 WHERE a > $2#!#1#!#3#!#0
~~END~~


-- psql
DROP EXTENSION pg_stat_statements;
go


