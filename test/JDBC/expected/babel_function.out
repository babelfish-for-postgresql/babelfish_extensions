-- tsql stype create function/procedure is not supported in postgres dialect
CREATE FUNCTION hi_func("@message" varchar(20)) RETURNS VOID AS BEGIN PRINT @message END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '"@message"' at line 2 and character position 24)~~

CREATE PROCEDURE hi_proc("@message" varchar(20)) AS BEGIN PRINT @message END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '"@message"' at line 1 and character position 25)~~


DECLARE @babelfishpg_tsql_sql_dialect varchar(50) = 'tsql';
GO
-- it's supported in tsql dialect
CREATE FUNCTION hi_func("@message" varchar(20)) RETURNS VOID AS BEGIN PRINT @message END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '"@message"' at line 2 and character position 24)~~

CREATE PROCEDURE hi_proc("@message" varchar(20)) AS BEGIN PRINT @message END;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '"@message"' at line 1 and character position 25)~~


-- PROC is also supported in tsql dialect
create proc proc_1 as print 'Hello World from Babel';
GO
-- BABEL-219 typmod/length of sys.varchar works correctly in procudure parameter
EXEC hi_proc('Hello World');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''Hello World'' at line 2 and character position 13)~~

EXEC proc_1();
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ')' at line 1 and character position 12)~~


-- clean up
drop function hi_func;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "hi_func")~~

drop procedure hi_proc;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "hi_proc")~~

drop proc proc_1;
GO

-- test executing pltsql function in postgres dialect
reset babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '.' at line 2 and character position 22)~~


CREATE FUNCTION test_func()
RETURNS INT
AS
BEGIN
    DECLARE @a int = 1;
    RETURN @a;
END;
GO

-- should be able execute a pltsql function in postgres dialect
SELECT @@babelfishpg_tsql_sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function sys.babelfishpg_tsql_sql_dialect() does not exist)~~

select test_func();
GO
~~START~~
int
1
~~END~~

SELECT @@babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'spatial methods' is not currently supported in Babelfish)~~


-- test executing pltsql trigger in postgres dialect
CREATE TABLE employees(
   id SERIAL PRIMARY KEY,
   first_name VARCHAR(40) NOT NULL,
   last_name VARCHAR(40) NOT NULL
);
GO

CREATE TABLE employee_audits (
   id SERIAL PRIMARY KEY,
   employee_id INT NOT NULL,
   last_name VARCHAR(40) NOT NULL
);
GO

CREATE FUNCTION log_last_name_changes() RETURNS trigger AS $$
BEGIN
    IF NEW.last_name <> OLD.last_name THEN
         INSERT INTO employee_audits(employee_id,last_name)
         VALUES(OLD.id,OLD.last_name);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'trigger' at line 1 and character position 48)~~


CREATE TRIGGER last_name_changes
BEFORE UPDATE
ON employees
FOR EACH ROW
EXECUTE PROCEDURE log_last_name_changes();
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'BEFORE' at line 2 and character position 0)~~


INSERT INTO employees (first_name, last_name) VALUES ('A', 'B');
INSERT INTO employees (first_name, last_name) VALUES ('C', 'D');
SELECT * FROM employees;
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~START~~
int#!#varchar#!#varchar
1#!#A#!#B
2#!#C#!#D
~~END~~

SELECT @@babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'spatial methods' is not currently supported in Babelfish)~~

UPDATE employees SET last_name = 'E' WHERE ID = 2;
GO
~~ROW COUNT: 1~~

SELECT @@babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'spatial methods' is not currently supported in Babelfish)~~

SELECT * FROM employees;
GO
~~START~~
int#!#varchar#!#varchar
1#!#A#!#B
2#!#C#!#E
~~END~~

SELECT * FROM employee_audits;
GO
~~START~~
int#!#int#!#varchar
~~END~~


-- cleanup
drop function test_func;
GO
drop table employees;
GO
drop table employee_audits;
GO
drop function log_last_name_changes;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "log_last_name_changes")~~



-- test executing a plpgsql function in tsql dialect
CREATE OR REPLACE FUNCTION test_increment(i integer) RETURNS integer AS $$
BEGIN
	RETURN i + "1";
END;
$$ LANGUAGE plpgsql;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'REPLACE' at line 2 and character position 10)~~


CREATE OR REPLACE FUNCTION test_increment1(i integer) RETURNS integer AS $$
BEGIN
	RETURN i + CAST(n'1' AS varchar);
END;
$$ LANGUAGE plpgsql;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'REPLACE' at line 1 and character position 10)~~


-- test that sql_dialect is restored even when the function has error in it
DECLARE @babelfishpg_tsql_sql_dialect varchar(50) = 'tsql';
GO
SELECT @@babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'spatial methods' is not currently supported in Babelfish)~~

select test_increment(1);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function test_increment(integer) does not exist)~~

SELECT @@babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'spatial methods' is not currently supported in Babelfish)~~

select test_increment1(1);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function test_increment1(integer) does not exist)~~

SELECT @@babelfishpg_tsql.sql_dialect;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'spatial methods' is not currently supported in Babelfish)~~


-- test OBJECT_NAME function
select OBJECT_NAME('sys.columns'::regclass::Oid::int);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''sys.columns'' at line 2 and character position 19)~~

select OBJECT_NAME('boolin'::regproc::Oid::int);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''boolin'' at line 1 and character position 19)~~

select OBJECT_NAME('int4'::regtype::Oid::int);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''int4'' at line 1 and character position 19)~~

select OBJECT_NAME(1);
GO
~~START~~
varchar
<NULL>
~~END~~


-- test SYSDATETIME function
-- Returns of type datetime2
select pg_typeof(SYSDATETIME());
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

-- test GETDATE function
-- Returns of type datetime
select pg_typeof(GETDATE());
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~


-- test current_timestamp function
select pg_typeof(current_timestamp);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

-- test calling with parenthesis, should fail
select current_timestamp();
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ')' at line 2 and character position 25)~~


-- test CONVERT function
-- Conversion between varchar and date/time/datetime
select CONVERT(varchar(30), CAST('2017-08-25' AS date), 102);
GO
~~START~~
varchar
2017.08.25
~~END~~

select CONVERT(varchar(30), CAST('13:01:59' AS time), 8);
GO
~~START~~
varchar
13:01:59
~~END~~

select CONVERT(varchar(30), CAST('13:01:59' AS time), 22);
GO
~~START~~
varchar
 1:01:59 PM
~~END~~

select CONVERT(varchar(30), CAST('13:01:59' AS time), 22);
GO
~~START~~
varchar
 1:01:59 PM
~~END~~

select CONVERT(varchar(30), CAST('2017-08-25 13:01:59' AS datetime), 100);
GO
~~START~~
varchar
Aug 25 2017  1:01PM
~~END~~

select CONVERT(varchar(30), CAST('2017-08-25 13:01:59' AS datetime), 109);
GO
~~START~~
varchar
Aug 25 2017  1:01:59:000PM
~~END~~

select CONVERT(date, '08/25/2017', 101);
GO
~~START~~
date
2017-08-25
~~END~~

select CONVERT(time, '12:01:59', 101);
GO
~~START~~
time
12:01:59.0000000
~~END~~

select CONVERT(datetime, '2017-08-25 01:01:59PM', 120);
GO
~~START~~
datetime
2017-08-25 13:01:59.0
~~END~~

select CONVERT(varchar, CONVERT(datetime2(7), '9999-12-31 23:59:59.9999999'));
GO
~~START~~
varchar
9999-12-31 23:59:59.999999
~~END~~


-- Conversion from float to varchar
SELECT CONVERT(varchar(30), CAST(11234561231231.234 AS float), 0);
GO
~~START~~
varchar
~~ERROR (Code: 33557097)~~

~~ERROR (Message: operator is not unique: smallint * numeric)~~

select CONVERT(varchar(30), CAST(11234561231231.234 AS float), 1);
GO
~~START~~
varchar
 1.1234561e+13                
~~END~~

select CONVERT(varchar(30), CAST(11234561231231.234 AS float), 2);
GO
~~START~~
varchar
 1.123456123123123e+13        
~~END~~

select CONVERT(varchar(30), CAST(11234561231231.234 AS float), 3);
GO
~~START~~
varchar
 1.1234561231231234e+13       
~~END~~


-- Conversion from money to varchar
select CONVERT(varchar(10), CAST(4936.56 AS MONEY), 0);
GO
~~START~~
varchar
 4936.56  
~~END~~

select CONVERT(varchar(10), CAST(4936.56 AS MONEY), 1);
GO
~~START~~
varchar
4,936.56  
~~END~~

select CONVERT(varchar(10), CAST(4936.56 AS MONEY), 2);
GO
~~START~~
varchar
 4936.5600
~~END~~


select CONVERT(varchar(10), CAST(-4936.56 AS MONEY), 0);
-- Floor conversion to smallint, int, bigint
SELECT CONVERT(int, 99.9);
GO
~~START~~
varchar
-4936.56  
~~END~~

~~START~~
int
99
~~END~~

SELECT CONVERT(smallint, 99.9);
GO
~~START~~
smallint
99
~~END~~

SELECT CONVERT(bigint, 99.9);
GO
~~START~~
bigint
99
~~END~~

SELECT CONVERT(int, -99.9);
GO
~~START~~
int
-99
~~END~~

SELECT CONVERT(int, '99');
GO
~~START~~
int
99
~~END~~

SELECT CONVERT(int, CAST(99.9 AS double precision));
GO
~~START~~
int
99
~~END~~

SELECT CONVERT(int, CAST(99.9 AS real));
GO
~~START~~
int
99
~~END~~


-- test TRY_CONVERT function
-- Conversion between different types and varchar
select TRY_CONVERT(varchar(30), CAST('2017-08-25' AS date), 102);
GO
~~START~~
varchar
2017.08.25
~~END~~

select TRY_CONVERT(varchar(30), CAST('13:01:59' AS time), 8);
GO
~~START~~
varchar
13:01:59
~~END~~

select TRY_CONVERT(varchar(30), CAST('13:01:59' AS time), 22);
GO
~~START~~
varchar
 1:01:59 PM
~~END~~

select TRY_CONVERT(varchar(30), CAST('2017-08-25 13:01:59' AS datetime), 109);
GO
~~START~~
varchar
Aug 25 2017  1:01:59:000PM
~~END~~

select TRY_CONVERT(varchar(30), CAST('11234561231231.234' AS float), 0);
GO
~~START~~
varchar
<NULL>
~~END~~

select TRY_CONVERT(varchar(30), CAST('11234561231231.234'AS float, 1);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ',' at line 1 and character position 65)~~

select TRY_CONVERT(varchar(10), CAST(4936.56 AS MONEY), 0);
GO
~~START~~
varchar
 4936.56  
~~END~~


-- Wrong conversions that return NULL
select TRY_CONVERT(date, 123);
GO
~~START~~
date
<NULL>
~~END~~

select TRY_CONVERT(time, 123);
GO
~~START~~
time
<NULL>
~~END~~

select TRY_CONVERT(datetime, 123);
GO
~~START~~
datetime
<NULL>
~~END~~

select TRY_CONVERT(money, 'asdf');
GO
~~START~~
money
<NULL>
~~END~~


-- test PARSE function
-- Conversion from string to date/time/datetime
select PARSE('2017-08-25' AS date);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARSE' is not currently supported in Babelfish)~~

select PARSE('2017-08-25' AS date USING 'Cs-CZ');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 34)~~

select PARSE('08/25/2017' AS date USING 'en-US');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 34)~~

select PARSE('25/08/2017' AS date USING 'de-DE');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 34)~~

select PARSE('13:01:59' AS time);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARSE' is not currently supported in Babelfish)~~

select PARSE('13:01:59' AS time USING 'en-US');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 32)~~

select PARSE('13:01:59' AS time USING 'zh-CN');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 32)~~

select PARSE('2017-08-25 13:01:59' AS datetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARSE' is not currently supported in Babelfish)~~

select PARSE('2017-08-25 13:01:59' AS datetime USING 'zh-CN');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 47)~~

select PARSE('12:01:59' AS time);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARSE' is not currently supported in Babelfish)~~

select PARSE('2017-08-25 01:01:59PM' AS datetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'PARSE' is not currently supported in Babelfish)~~


-- Test if unnecessary culture arg given
select PARSE('123' AS int USING 'de-DE');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 2 and character position 26)~~


-- test TRY_PARSE function
-- Expect null return on error
-- Conversion from string to date/time/datetime
select TRY_PARSE('2017-08-25' AS date);
GO
~~START~~
date
2017-08-25
~~END~~

select TRY_PARSE('2017-08-25' AS date USING 'Cs-CZ');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 38)~~

select TRY_PARSE('789' AS date USING 'en-US');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 31)~~

select TRY_PARSE('asdf' AS date USING 'de-DE');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 32)~~

select TRY_PARSE('13:01:59' AS time);
GO
~~START~~
time
13:01:59.0000000
~~END~~

select TRY_PARSE('asdf' AS time USING 'en-US');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 32)~~

select TRY_PARSE('13-12-21' AS time USING 'zh-CN');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 36)~~

select TRY_PARSE('2017-08-25 13:01:59' AS datetime);
GO
~~START~~
datetime
2017-08-25 13:01:59.0
~~END~~

select TRY_PARSE('20asdf17' AS datetime USING 'de-DE');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 40)~~


-- Wrong conversions that return NULL
select TRY_PARSE('asdf' AS numeric(3,2));
GO
~~START~~
numeric
<NULL>
~~END~~

select TRY_PARSE('123' AS datetime2);
GO
~~START~~
datetime2
<NULL>
~~END~~

select TRY_PARSE('asdf' AS MONEY);
GO
~~START~~
money
<NULL>
~~END~~

select TRY_PARSE('asdf' AS int USING 'de-DE');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'USING' at line 1 and character position 31)~~


-- test serverproperty() function
-- invalid property name, should reutnr NULL
select serverproperty(n'invalid property');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 3 and character position 22)~~

-- valid supported properties
select serverproperty(n'collation');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 2 and character position 22)~~

select serverproperty(n'collationId');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 1 and character position 22)~~

select serverproperty(n'IsSingleUser');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 1 and character position 22)~~

select serverproperty(n'ServerName') = aurora_db_instance_identifier() as condition;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 1 and character position 22)~~


-- test ISDATE function
-- test valid argument
SELECT ISDATE('12/26/2016');
GO
~~START~~
int
1
~~END~~

SELECT ISDATE('12-26-2016');
GO
~~START~~
int
1
~~END~~

SELECT ISDATE('12.26.2016');
GO
~~START~~
int
1
~~END~~

SELECT ISDATE('2016-12-26 23:30:05.523456');
GO
~~START~~
int
1
~~END~~

-- test invalid argument
SELECT ISDATE('02/30/2016');
GO
~~START~~
int
0
~~END~~

SELECT ISDATE('12/32/2016');
GO
~~START~~
int
0
~~END~~

SELECT ISDATE('1995-10-1a');
GO
~~START~~
int
0
~~END~~

SELECT ISDATE(NULL);
GO
~~START~~
int
0
~~END~~


-- test DATEFROMPARTS function
-- test valid arguments
select datefromparts(2020,12,31);
GO
~~START~~
date
2020-12-31
~~END~~

-- test invalid arguments, should fail
select datefromparts(2020, 2, 30);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: date field value out of range: 2020-02-30)~~

select datefromparts(2020, 13, 1);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: date field value out of range: 2020-13-01)~~

select datefromparts(-4, 3, 150);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: date field value out of range: -3-03-150)~~

select datefromparts(10, 55, 10.1);
GO
~~START~~
date
~~ERROR (Code: 33557097)~~

~~ERROR (Message: date field value out of range: 10-55-10)~~

select datefromparts('2020', 55, 100.1);
GO
~~START~~
date
~~ERROR (Code: 33557097)~~

~~ERROR (Message: date field value out of range: 2020-55-100)~~


-- test DATETIMEFROMPARTS function
-- test valid arguments
select datetimefromparts(2016, 12, 26, 23, 30, 5, 32);
GO
~~START~~
datetime
2016-12-26 23:30:05.033
~~END~~

select datetimefromparts(2016.0, 12, 26, 23, 30, 5, 32);
GO
~~START~~
datetime
2016-12-26 23:30:05.033
~~END~~

select datetimefromparts(2016.1, 12, 26, 23, 30, 5, 32);
GO
~~START~~
datetime
2016-12-26 23:30:05.033
~~END~~

select datetimefromparts(2016, 12, 26.99, 23, 30, 5, 32);
GO
~~START~~
datetime
2016-12-26 23:30:05.033
~~END~~

select datetimefromparts(2016, 12.90, 26, 23, 30, 5, 32);
GO
~~START~~
datetime
2016-12-26 23:30:05.033
~~END~~

-- test invalid arguments
select datetimefromparts(2016, 2, 30, 23, 30, 5, 32);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: date field value out of range: 2016-02-30)~~

select datetimefromparts(2016, 12, 26, 23, 30, 5);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The datetimefromparts function requires 7 arguments)~~

select datetimefromparts(2016, 12, 26, 23, 30, 5, NULL);
GO
~~START~~
datetime
<NULL>
~~END~~


-- test DATEPART function
-- test all valid datepart arguments
SELECT DATEPART(YEAR, CAST('2016-12-26 23:30:05.523456 -08:00' AS DATETIMEOFFSET));
GO
~~START~~
int
2016
~~END~~

select datepart(yyyy, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
2016
~~END~~

select datepart(yy, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
2016
~~END~~

select datepart(quarter, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
4
~~END~~

select datepart(qq, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
4
~~END~~

select datepart(qq, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
4
~~END~~

select datepart(q, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
4
~~END~~

select datepart(month, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
12
~~END~~

select datepart(mm, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
12
~~END~~

select datepart(m, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
12
~~END~~

select datepart(dayofyear, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
361
~~END~~

select datepart(dy, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
361
~~END~~

select datepart(day, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
26
~~END~~

select datepart(dd, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
26
~~END~~

select datepart(d,CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
26
~~END~~

select datepart(week, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
53
~~END~~

select datepart(wk, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
53
~~END~~

select datepart(ww, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
53
~~END~~

select datepart(weekday, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
2
~~END~~

select datepart(dw, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
2
~~END~~

select datepart(hour, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
15
~~END~~

select datepart(hh, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
15
~~END~~

select datepart(minute, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
30
~~END~~

select datepart(n, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
30
~~END~~

select datepart(second, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
5
~~END~~

select datepart(ss, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
5
~~END~~

select datepart(s, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
5
~~END~~

select datepart(millisecond, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
456
~~END~~

select datepart(ms, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
456
~~END~~

select datepart(microsecond, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
523456
~~END~~

select datepart(mcs,CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
523456
~~END~~

select datepart(nanosecond, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
523456000
~~END~~

select datepart(ns, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
523456000
~~END~~

select datepart(tzoffset, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
480
~~END~~

select datepart(tz, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
480
~~END~~

select datepart(iso_week, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
52
~~END~~

select datepart(isowk, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
52
~~END~~

select datepart(isoww, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
52
~~END~~

-- test different types of date/time arguments
select datepart(month, CAST('2016-12-26 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
12
~~END~~

select datepart(quarter, CAST('2016-12-26 23:30:05.523456'AS datetime2));
GO
~~START~~
int
4
~~END~~

select datepart(hour, CAST('2016-12-26 23:30:05'AS smalldatetime));
GO
~~START~~
int
23
~~END~~

select datepart(dayofyear,CAST('2016-12-26'AS date));
GO
~~START~~
int
361
~~END~~

select datepart(second,CAST ('04:12:34.876543'AS time));
GO
~~START~~
int
34
~~END~~

-- test edge cases: try to get datepart that does not exist in the argument
select datepart(year, cast('12:10:30.123' as time));
GO
~~START~~
int
1900
~~END~~

select datepart(yyyy, cast('12:10:30.123' as time));
GO
~~START~~
int
1900
~~END~~

select datepart(yy, cast('12:10:30.123' as time));
GO
~~START~~
int
1900
~~END~~

select datepart(quarter, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(qq, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(q, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(month, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(mm, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(m, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(dayofyear, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(dy, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(y, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(day, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(dd, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(d, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(week, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(wk, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(ww, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(weekday, cast('12:10:30.123' as time));
GO
~~START~~
int
2
~~END~~

select datepart(dw, cast('12:10:30.123' as time));
GO
~~START~~
int
2
~~END~~

select datepart(tzoffset, cast('12:10:30.123' as time));
GO
~~START~~
int
0
~~END~~

select datepart(tz, cast('12:10:30.123' as time));
GO
~~START~~
int
0
~~END~~

select datepart(iso_week, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(isowk, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(isoww, cast('12:10:30.123' as time));
GO
~~START~~
int
1
~~END~~

select datepart(hour, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(hh, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(minute, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(n, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(second, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(ss, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(s, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(millisecond, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(ms, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(microsecond, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(mcs, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(nanosecond, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

select datepart(ns, cast('2016-12-26' as date));
GO
~~START~~
int
0
~~END~~

-- test invalid interval, expect error
select datepart(invalid_interval, cast('2016-12-26 23:30:05.523456' as date));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'invalid_interval' is not a recognized datepart option)~~

select datepart(invalidinterval, cast('12:10:30.123' as time));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'invalidinterval' is not a recognized datepart option)~~


-- test DATENAME function
select datename(year, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 2 and character position 52)~~

select datename(dd, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 50)~~

select datename(weekday, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 55)~~

select datename(dw, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 50)~~

select datename(month, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 53)~~

select datename(mm, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 50)~~

select datename(m, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 49)~~

select datename(isowk, '2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 53)~~

-- test invalid argument, expect error
select datename(invalid_interval, cast('2016-12-26 23:30:05.523456' as date));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'invalid_interval' is not a recognized datepart option)~~


-- test DATEFIRST option, together DATEPART function
-- This shows the return value for the week and weekday datepart for '2007-04-21' for each SET DATEFIRST argument.
-- January 1, 2007 falls on a Monday. April 21, 2007 falls on a Saturday.
-- DATEFIRST week weekday
-- 1	16	6
-- 2	17	5
-- 3	17	4
-- 4	17	3
-- 5	17	2
-- 6	17	1
-- 7	16	7
select @@datefirst;
GO
~~START~~
int
7
~~END~~

set datefirst 1;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
16#!#6
~~END~~


set datefirst 2;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
17#!#5
~~END~~

set datefirst 3;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
17#!#4
~~END~~

set datefirst 4;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
17#!#3
~~END~~

set datefirst 5;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
17#!#2
~~END~~

set datefirst 6;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
17#!#1
~~END~~

set datefirst 7;
select datepart(week, CAST('2007-04-21'AS date)), datepart(weekday, CAST('2007-04-21'AS date));
GO
~~START~~
int#!#int
16#!#7
~~END~~

-- test edge case: date within the week of Jan. 1st
select datepart(week, CAST('2007-01-01'AS date)), datepart(weekday, CAST('2007-01-01'AS date));
GO
~~START~~
int#!#int
1#!#2
~~END~~

select datepart(week, CAST('2007-01-02'AS date)), datepart(weekday, CAST('2007-01-02'AS date));
GO
~~START~~
int#!#int
1#!#3
~~END~~

select datepart(week, CAST('2007-01-03'AS date)), datepart(weekday, CAST('2007-01-03'AS date));
GO
~~START~~
int#!#int
1#!#4
~~END~~

select datepart(week, CAST('2007-01-04'AS date)), datepart(weekday, CAST('2007-01-04'AS date));
GO
~~START~~
int#!#int
1#!#5
~~END~~

select datepart(week, CAST('2007-01-05'AS date)), datepart(weekday, CAST('2007-01-05'AS date));
GO
~~START~~
int#!#int
1#!#6
~~END~~

select datepart(week, CAST('2007-01-06'AS date)), datepart(weekday, CAST('2007-01-06'AS date));
GO
~~START~~
int#!#int
1#!#7
~~END~~

-- test edge case: date just outside the week of Jan. 1st
select datepart(week, CAST('2007-01-07'AS date)), datepart(weekday, CAST('2007-01-07'AS date));
GO
~~START~~
int#!#int
2#!#1
~~END~~


-- test DATEDIFF function
select datediff(year, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-1
~~END~~

select datediff(quarter, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-4
~~END~~

select datediff(month, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-13
~~END~~

select datediff(dayofyear, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-367
~~END~~

select datediff(day, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-367
~~END~~

select datediff(week,CAST('2037-03-01 23:30:05.523'AS sys.datetime),CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-52
~~END~~

select datediff(hour, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-8808
~~END~~

select datediff(minute,CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-528480
~~END~~

select datediff(second, CAST('2037-03-01 23:30:05.523'AS sys.datetime), CAST('2036-02-28 23:30:05.523'AS sys.datetime));
GO
~~START~~
int
-31708800
~~END~~

select datediff(millisecond, CAST('2036-02-28 01:23:45.234'AS sys.datetime), CAST('2036-02-28 01:23:45.123'AS sys.datetime));
GO
~~START~~
int
-111
~~END~~

select datediff(microsecond, CAST('2036-02-28 01:23:45.234'AS sys.datetime), CAST('2036-02-28 01:23:45.123'AS sys.datetime));
GO
~~START~~
int
-111000
~~END~~

select datediff(nanosecond, CAST('2036-02-28 01:23:45.234'AS sys.datetime), CAST('2036-02-28 01:23:45.123'AS sys.datetime));
GO
~~START~~
int
-111000000
~~END~~

-- test different types of date/time arguments
select datediff(minute, CAST('2016-12-26 23:30:05.523456+8'AS datetimeoffset), CAST('2016-12-31 23:30:05.523456+8'AS datetimeoffset));
GO
~~START~~
int
7200
~~END~~

select datediff(quarter,CAST('2016-12-26 23:30:05.523456'AS datetime2), CAST('2018-08-31 23:30:05.523456'AS datetime2));
GO
~~START~~
int
6
~~END~~

select datediff(hour, CAST('2016-12-26 23:30:05'AS smalldatetime), CAST('2016-12-28 21:29:05'AS smalldatetime));
GO
~~START~~
int
46
~~END~~

select datediff(year, CAST('2037-03-01'AS date), CAST('2036-02-28'AS date));
GO
~~START~~
int
-1
~~END~~


-- test DATEADD function
select dateadd(year, 2, '20060830');
GO
~~START~~
datetime
2008-08-30 00:00:00.0
~~END~~

select dateadd(quarter, 2, '20060830');
GO
~~START~~
datetime
2007-02-28 00:00:00.0
~~END~~

select dateadd(month, 1, '20060831');
GO
~~START~~
datetime
2006-09-30 00:00:00.0
~~END~~

select dateadd(dayofyear, 2, '20060830');
GO
~~START~~
datetime
2006-09-01 00:00:00.0
~~END~~

select dateadd(day, 2, '20060830');
GO
~~START~~
datetime
2006-09-01 00:00:00.0
~~END~~

select dateadd(week, 2, '20060830');
GO
~~START~~
datetime
2006-09-13 00:00:00.0
~~END~~

select dateadd(weekday, 2, '20060830');
GO
~~START~~
datetime
2006-09-01 00:00:00.0
~~END~~

select dateadd(hour, 2, '20060830');
GO
~~START~~
datetime
2006-08-30 02:00:00.0
~~END~~

select dateadd(minute, 2, '20060830');
GO
~~START~~
datetime
2006-08-30 00:02:00.0
~~END~~

select dateadd(second, 2, '20060830');
GO
~~START~~
datetime
2006-08-30 00:00:02.0
~~END~~

select dateadd(millisecond, 123, '20060830');
GO
~~START~~
datetime
2006-08-30 00:00:00.12
~~END~~

select dateadd(microsecond, 123456, '20060830');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The datepart microsecond is not supported by date function dateadd for data type datetime.)~~

select dateadd(nanosecond, 123456, '20060830');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The datepart nanosecond is not supported by date function dateadd for data type datetime.)~~

-- test different types of date/time arguments
select dateadd(hour, 2, '23:12:34.876543');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Conversion failed when converting date and/or time from character string.)~~

select dateadd(quarter, 3, '2037-03-01');
GO
~~START~~
datetime
2037-12-01 00:00:00.0
~~END~~

select dateadd(minute, 70, '2016-12-26 23:30:05.523456+8');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data precision out of range for datetime)~~

select dateadd(month, 2, '2016-12-26 23:30:05.523456');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data precision out of range for datetime)~~

select dateadd(second, 56, '2016-12-26 23:30:05');
GO
~~START~~
datetime
2016-12-26 23:31:01.0
~~END~~

-- test negative argument
select dateadd(year, -2, '20060830'::datetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 2 and character position 35)~~

select dateadd(month, -20, '2016-12-26 23:30:05.523456'::datetime2);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 55)~~

select dateadd(hour, -2, '01:12:34.876543'::time);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 42)~~

select dateadd(minute, -70, '2016-12-26 00:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 58)~~

select dateadd(second, -56, '2016-12-26 00:00:55'::smalldatetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 49)~~

-- test return type
select pg_typeof(dateadd(hour, -2, '01:12:34.876543'::time));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'dateadd' at line 2 and character position 17)~~

select pg_typeof(dateadd(second, -56, '2016-12-26 00:00:55'::smalldatetime));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'dateadd' at line 1 and character position 17)~~

select pg_typeof(dateadd(year, -2, '20060830'::datetime));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'dateadd' at line 1 and character position 17)~~

select pg_typeof(dateadd(month, -20, '2016-12-26 23:30:05.523456'::datetime2));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'dateadd' at line 1 and character position 17)~~

select pg_typeof(dateadd(minute, -70, '2016-12-26 00:30:05.523456+8'::datetimeoffset));
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'dateadd' at line 1 and character position 17)~~

-- test illegal usage
select dateadd(minute, 2, '2037-03-01'::date);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 2 and character position 38)~~

select dateadd(day, 4, '04:12:34.876543'::time);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 40)~~

-- test using variables, instead of constants, for the second parameter
create table dateadd_table(a int, b datetime);
GO
insert into dateadd_table values(1, '2020-10-29'::datetime);
select * from dateadd_table;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 48)~~

update dateadd_table set b = dateadd(dd, a, '2020-10-30'::datetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ':' at line 1 and character position 56)~~

select * from dateadd_table;
GO
~~START~~
int#!#datetime
~~END~~

create procedure dateadd_procedure as
begin
	declare @d int = 1
	update dateadd_table set b = dateadd(dd, @d, CAST('2020-10-31' AS datetime))
end;
GO
EXEC dateadd_procedure();
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ')' at line 1 and character position 23)~~

select * from dateadd_table;
GO
~~START~~
int#!#datetime
~~END~~


-- test CHARINDEX function
select CHARINDEX('hello', 'hello world');
GO
~~START~~
int
1
~~END~~

select CHARINDEX('hello  ', 'hello world');
GO
~~START~~
int
0
~~END~~

select CHARINDEX('hello world', 'hello');
GO
~~START~~
int
0
~~END~~

-- test NULL input
select CHARINDEX(NULL, NULL);
GO
~~START~~
int
<NULL>
~~END~~

select CHARINDEX(NULL, 'string');
GO
~~START~~
int
<NULL>
~~END~~

select CHARINDEX('pattern', NULL);
GO
~~START~~
int
<NULL>
~~END~~

select CHARINDEX('pattern', 'string', NULL);
GO
~~START~~
int
<NULL>
~~END~~

-- test start_location parameter
select CHARINDEX('hello', 'hello world', -1);
GO
~~START~~
int
1
~~END~~

select CHARINDEX('hello', 'hello world', 0);
GO
~~START~~
int
1
~~END~~

select CHARINDEX('hello', 'hello world', 1);
GO
~~START~~
int
1
~~END~~

select CHARINDEX('hello', 'hello world', 2);
GO
~~START~~
int
0
~~END~~

select CHARINDEX('world', 'hello world', 6);
GO
~~START~~
int
7
~~END~~

select CHARINDEX('world', 'hello world', 7);
GO
~~START~~
int
7
~~END~~

select CHARINDEX('world', 'hello world', 8);
GO
~~START~~
int
0
~~END~~

select CHARINDEX('is', 'This is a string');
GO
~~START~~
int
3
~~END~~

select CHARINDEX('is', 'This is a string', 4);
GO
~~START~~
int
6
~~END~~


-- test STUFF function
select STUFF(n'abcdef', 2, 3, n'ijklmn');  
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 2 and character position 13)~~

select STUFF(N' abcdef', 2, 3, N'ijklmn ');
GO
~~START~~
nvarchar
 ijklmn def
~~END~~

select STUFF(N'abcdef', 2, 3, N' ijklmn ');
GO
~~START~~
nvarchar
a ijklmn ef
~~END~~

select STUFF(N'abcdef', 2, 3, N'ijklmn  ');
GO
~~START~~
nvarchar
aijklmn  ef
~~END~~

-- test corner cases
-- when start is negative or zero or longer than expr, return NULL
select STUFF(n'abcdef', -1, 3, n'ijklmn');  
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 3 and character position 13)~~

select STUFF(n'abcdef', 0, 3, n'ijklmn');  
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 1 and character position 13)~~

select STUFF(n'abcdef', 7, 3, n'ijklmn');  
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 1 and character position 13)~~

-- when length is negative, return NULL
select STUFF(n'abcdef', 2, -3, n'ijklmn');  
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 2 and character position 13)~~

-- when length is zero, just insert without deleting
select STUFF(n'abcdef', 2, 0, n'ijklmn');  
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 2 and character position 13)~~

-- when length is longer than expr, delete up to the last character in expr
select STUFF(n'abcdef', 2, 7, n'ijklmn');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 2 and character position 13)~~

-- when replace_expr is NULL, just delete without inserting
select STUFF(n'abcdef', 2, 3, NULL);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 2 and character position 13)~~

-- when argument are type unknown
select STUFF('abcdef', 2, 3, 'ijklmn');
GO
~~START~~
text
aijklmnef
~~END~~

select STUFF('abcdef', 2, 3, n'ijklmn');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''ijklmn'' at line 1 and character position 30)~~

select STUFF(n'abcdef', 2, 3, 'ijklmn');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'n' at line 1 and character position 13)~~

-- when argument are type text
SELECT STUFF(CAST('abcdef' as text), 2, 3, CAST('ijklmn' as text));
GO
~~START~~
text
aijklmnef
~~END~~

SELECT STUFF(CAST('abcdef' as text), 2, 3, 'ijklmn');
GO
~~START~~
text
aijklmnef
~~END~~

SELECT STUFF('abcdef', 2, 3, CAST('ijklmn' as text));
GO
~~START~~
text
aijklmnef
~~END~~

-- when argument are type sys.varchar
SELECT STUFF(CAST('abcdef' as sys.varchar), 2, 3, CAST('ijklmn' as sys.varchar));
GO
~~START~~
varchar
aijklmnef
~~END~~

SELECT STUFF('abcdef', 2, 3, CAST('ijklmn' as sys.varchar));
GO
~~START~~
text
aijklmnef
~~END~~

SELECT STUFF(CAST('abcdef' as sys.varchar), 2, 3, 'ijklmn');
GO
~~START~~
text
aijklmnef
~~END~~


-- test ROUND function
-- test rounding to the left of decimal point
select ROUND(748.58, -1);
GO
~~START~~
numeric
750
~~END~~

select ROUND(748.58, -2);
GO
~~START~~
numeric
700
~~END~~

select ROUND(748.58, -3);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value overflows for numeric format)~~

select ROUND(748.58, -4);
GO
~~START~~
numeric
0
~~END~~

select ROUND(-648.1234, -2);
GO
~~START~~
numeric
-600
~~END~~

select ROUND(-648.1234, -3);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value overflows for numeric format)~~

select ROUND(-1548.1234, -3);
GO
~~START~~
numeric
-2000
~~END~~

select ROUND(-1548.1234, -4);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value overflows for numeric format)~~

-- test NULL input
select ROUND(NULL, -3);
GO
~~START~~
numeric
<NULL>
~~END~~

select ROUND(748.58, NULL);
GO
~~START~~
numeric
<NULL>
~~END~~

-- test rounding
SELECT ROUND(123.9994, 3);
GO
~~START~~
numeric
123.999
~~END~~

SELECT ROUND(123.9995, 3);
GO
~~START~~
numeric
124.000
~~END~~

SELECT ROUND(123.4545, 2);
GO
~~START~~
numeric
123.45
~~END~~

SELECT ROUND(123.45, -2);
GO
~~START~~
numeric
100
~~END~~

-- test function parameter, i.e. truncation when not NULL or 0
SELECT ROUND(150.75, 0);
GO
~~START~~
numeric
151
~~END~~

SELECT ROUND(150.75, 0, 0);
GO
~~START~~
numeric
151
~~END~~

SELECT ROUND(150.75, 0, NULL);
GO
~~START~~
numeric
151
~~END~~

SELECT ROUND(150.75, 0, 1);
GO
~~START~~
numeric
150
~~END~~

-- test negative numbers
SELECT ROUND(-150.49, 0);
GO
~~START~~
numeric
-150
~~END~~

SELECT ROUND(-150.75, 0);
GO
~~START~~
numeric
-151
~~END~~

SELECT ROUND(-150.49, 0, 1);
GO
~~START~~
numeric
-150
~~END~~

SELECT ROUND(-150.75, 0, 1);
GO
~~START~~
numeric
-150
~~END~~


-- test SELECT ROUND(col, )
create table t1 (col numeric(4,2));
GO
insert into t1 values (64.24);
insert into t1 values (79.65);
insert into t1 values (NULL);
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

select ROUND(col, 3) from t1;
GO
~~START~~
numeric
64.24000000
79.65000000
<NULL>
~~END~~

select ROUND(col, 2) from t1;
GO
~~START~~
numeric
64.24000000
79.65000000
<NULL>
~~END~~

select ROUND(col, 1) from t1;
GO
~~START~~
numeric
64.20000000
79.70000000
<NULL>
~~END~~

select ROUND(col, 0) from t1;
GO
~~START~~
numeric
64.00000000
80.00000000
<NULL>
~~END~~

select ROUND(col, -1) from t1;
GO
~~START~~
numeric
60.00000000
80.00000000
<NULL>
~~END~~

select ROUND(col, -2) from t1;
GO
~~START~~
numeric
~~ERROR (Code: 33557097)~~

~~ERROR (Message: value overflows for numeric format)~~

select ROUND(col, -3) from t1;
GO
~~START~~
numeric
0E-8
0E-8
<NULL>
~~END~~

select ROUND(col, 1, 1) from t1;
GO
~~START~~
numeric
64.20000000
79.60000000
<NULL>
~~END~~

drop table t1;
GO

-- test DAY function
select DAY(CAST('2016-12-26 23:30:05.523456+8' AS datetimeoffset));
GO
~~START~~
int
26
~~END~~

select DAY(CAST('2016-12-26 23:30:05.523456' AS datetime2));
GO
~~START~~
int
26
~~END~~

select DAY(CAST('2016-12-26 23:30:05' AS smalldatetime));
GO
~~START~~
int
26
~~END~~

select DAY(CAST('04:12:34.876543' AS time));
GO
~~START~~
int
1
~~END~~

select DAY(CAST('2037-03-01' AS date));
GO
~~START~~
int
1
~~END~~

select DAY(CAST('2037-03-01 23:30:05.523' AS sys.datetime));
GO
~~START~~
int
1
~~END~~

-- test MONTH function
select MONTH('2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2016-12-26 23:30:05.523456+8'' at line 2 and character position 13)~~

select MONTH('2016-12-26 23:30:05.523456'::datetime2);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2016-12-26 23:30:05.523456'' at line 1 and character position 13)~~

select MONTH('2016-12-26 23:30:05'::smalldatetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2016-12-26 23:30:05'' at line 1 and character position 13)~~

select MONTH('04:12:34.876543'::time);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''04:12:34.876543'' at line 1 and character position 13)~~

select MONTH('2037-03-01'::date);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2037-03-01'' at line 1 and character position 13)~~

select MONTH('2037-03-01 23:30:05.523'::sys.datetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2037-03-01 23:30:05.523'' at line 1 and character position 13)~~

-- test YEAR function
select YEAR('2016-12-26 23:30:05.523456+8'::datetimeoffset);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2016-12-26 23:30:05.523456+8'' at line 2 and character position 12)~~

select YEAR('2016-12-26 23:30:05.523456'::datetime2);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2016-12-26 23:30:05.523456'' at line 1 and character position 12)~~

select YEAR('2016-12-26 23:30:05'::smalldatetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2016-12-26 23:30:05'' at line 1 and character position 12)~~

select YEAR('04:12:34.876543'::time);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''04:12:34.876543'' at line 1 and character position 12)~~

select YEAR('2037-03-01'::date);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2037-03-01'' at line 1 and character position 12)~~

select YEAR('2037-03-01 23:30:05.523'::sys.datetime);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ''2037-03-01 23:30:05.523'' at line 1 and character position 12)~~


-- test SPACE function
select SPACE(NULL);
GO
~~START~~
varchar
<NULL>
~~END~~

select SPACE(2);
GO
~~START~~
varchar
  
~~END~~

select LEN(SPACE(5));
GO
~~START~~
int
0
~~END~~

select DATALENGTH(SPACE(5));
GO
~~START~~
int
5
~~END~~


-- test COUNT and COUNT_BIG aggregate function
CREATE TABLE t2(a int, b int);
GO
INSERT INTO t2 VALUES(1, 100);
INSERT INTO t2 VALUES(2, 200);
INSERT INTO t2 VALUES(NULL, 300);
INSERT INTO t2 VALUES(2, 400);
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

CREATE TABLE t3(a varchar(255), b varchar(255),c int);
GO
INSERT INTO t3 VALUES('xyz', 'a',1);
INSERT INTO t3 VALUES('xyz', 'b',1);
INSERT INTO t3 VALUES('abc', 'a',2);
INSERT INTO t3 VALUES('abc', 'b',2);
INSERT INTO t3 VALUES('efg', 'a',3);
INSERT INTO t3 VALUES('efg', 'b',3);
INSERT INTO t3 VALUES(NULL, NULL, 1);
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


-- Aggregation Function Syntax
-- COUNT[_BIG] ( { [ [ ALL | DISTINCT ] expression ] | * } )
-- should return all rows - 4
SELECT COUNT(*) from t2;
GO
~~START~~
int
4
~~END~~

SELECT pg_typeof(COUNT(*)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT COUNT_BIG(*) from t2;
GO
~~START~~
bigint
4
~~END~~

SELECT pg_typeof(COUNT_BIG(*)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

-- should return all rows where a is not NULL - 3
SELECT COUNT(a) from t2;
GO
~~START~~
int
3
~~END~~

SELECT pg_typeof(COUNT(a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT COUNT_BIG(a) from t2;
GO
~~START~~
bigint
3
~~END~~

SELECT pg_typeof(COUNT_BIG(a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

-- should return all rows where a is not NULL - 3
SELECT COUNT(ALL a) from t2;
GO
~~START~~
int
3
~~END~~

SELECT pg_typeof(COUNT(ALL a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT COUNT_BIG(ALL a) from t2;
GO
~~START~~
bigint
3
~~END~~

SELECT pg_typeof(COUNT_BIG(ALL a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

-- should return all rows where a is distinct - 2
SELECT COUNT(DISTINCT a) from t2;
GO
~~START~~
int
2
~~END~~

SELECT pg_typeof(COUNT(DISTINCT a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT COUNT_BIG(DISTINCT a) from t2;
GO
~~START~~
bigint
2
~~END~~

SELECT pg_typeof(COUNT_BIG(DISTINCT a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~


-- Analytic Function Syntax
-- COUNT[_BIG] ( [ ALL ]  { expression | * } ) OVER ( [ <partition_by_clause> ] )
SELECT pg_typeof(COUNT(*) OVER (PARTITION BY a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT pg_typeof(COUNT_BIG(*) OVER (PARTITION BY a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT pg_typeof(COUNT(a) OVER (PARTITION BY a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT pg_typeof(COUNT_BIG(a) OVER (PARTITION BY a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT pg_typeof(COUNT(ALL a) OVER (PARTITION BY a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT pg_typeof(COUNT_BIG(ALL a) OVER (PARTITION BY a)) from t2;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: data type regtype is not supported yet)~~

SELECT COUNT(*) from t3;
GO
~~START~~
int
7
~~END~~

SELECT a, b, COUNT(*) OVER () from t3;
GO
~~START~~
varchar#!#varchar#!#int
xyz#!#a#!#7
xyz#!#b#!#7
abc#!#a#!#7
abc#!#b#!#7
efg#!#a#!#7
efg#!#b#!#7
<NULL>#!#<NULL>#!#7
~~END~~

-- The result for order by is different in sql server because we have
-- an ordering issue for null type (JIRA: BABEL-788)
SELECT a, b, COUNT(*) OVER (ORDER BY a) from t3;
GO
~~START~~
varchar#!#varchar#!#int
abc#!#b#!#2
abc#!#a#!#2
efg#!#a#!#4
efg#!#b#!#4
xyz#!#a#!#6
xyz#!#b#!#6
<NULL>#!#<NULL>#!#7
~~END~~

SELECT a, b, COUNT(*) OVER (ORDER BY a DESC) from t3;
GO
~~START~~
varchar#!#varchar#!#int
<NULL>#!#<NULL>#!#1
xyz#!#b#!#3
xyz#!#a#!#3
efg#!#b#!#5
efg#!#a#!#5
abc#!#b#!#7
abc#!#a#!#7
~~END~~

SELECT a, b, COUNT(*) OVER(PARTITION BY a) from t3;
GO
~~START~~
varchar#!#varchar#!#int
abc#!#b#!#2
abc#!#a#!#2
efg#!#a#!#2
efg#!#b#!#2
xyz#!#a#!#2
xyz#!#b#!#2
<NULL>#!#<NULL>#!#1
~~END~~

SELECT a, b, COUNT(*) OVER(PARTITION BY a ORDER BY b) from t3;
GO
~~START~~
varchar#!#varchar#!#int
abc#!#a#!#1
abc#!#b#!#2
efg#!#a#!#1
efg#!#b#!#2
xyz#!#a#!#1
xyz#!#b#!#2
<NULL>#!#<NULL>#!#1
~~END~~

SELECT a, b, COUNT(*) OVER(PARTITION BY a ORDER BY b ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)  from t3;
GO
~~START~~
varchar#!#varchar#!#int
abc#!#a#!#2
abc#!#b#!#1
efg#!#a#!#2
efg#!#b#!#1
xyz#!#a#!#2
xyz#!#b#!#1
<NULL>#!#<NULL>#!#1
~~END~~

SELECT COUNT_BIG(*) from t3;
GO
~~START~~
bigint
7
~~END~~

SELECT a, b, COUNT_BIG(*) OVER () from t3;
GO
~~START~~
varchar#!#varchar#!#bigint
xyz#!#a#!#7
xyz#!#b#!#7
abc#!#a#!#7
abc#!#b#!#7
efg#!#a#!#7
efg#!#b#!#7
<NULL>#!#<NULL>#!#7
~~END~~

SELECT a, b, COUNT_BIG(*) OVER (ORDER BY a) from t3;
GO
~~START~~
varchar#!#varchar#!#bigint
abc#!#b#!#2
abc#!#a#!#2
efg#!#a#!#4
efg#!#b#!#4
xyz#!#a#!#6
xyz#!#b#!#6
<NULL>#!#<NULL>#!#7
~~END~~

SELECT a, b, COUNT_BIG(*) OVER (ORDER BY a DESC) from t3;
GO
~~START~~
varchar#!#varchar#!#bigint
<NULL>#!#<NULL>#!#1
xyz#!#b#!#3
xyz#!#a#!#3
efg#!#b#!#5
efg#!#a#!#5
abc#!#b#!#7
abc#!#a#!#7
~~END~~

SELECT a, b, COUNT_BIG(*) OVER(PARTITION BY a) from t3;
GO
~~START~~
varchar#!#varchar#!#bigint
abc#!#b#!#2
abc#!#a#!#2
efg#!#a#!#2
efg#!#b#!#2
xyz#!#a#!#2
xyz#!#b#!#2
<NULL>#!#<NULL>#!#1
~~END~~

SELECT a, b, COUNT_BIG(*) OVER(PARTITION BY a ORDER BY b) from t3;
GO
~~START~~
varchar#!#varchar#!#bigint
abc#!#a#!#1
abc#!#b#!#2
efg#!#a#!#1
efg#!#b#!#2
xyz#!#a#!#1
xyz#!#b#!#2
<NULL>#!#<NULL>#!#1
~~END~~

SELECT a, b, COUNT_BIG(*) OVER(PARTITION BY a ORDER BY b ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)  from t3;
GO
~~START~~
varchar#!#varchar#!#bigint
abc#!#a#!#2
abc#!#b#!#1
efg#!#a#!#2
efg#!#b#!#1
xyz#!#a#!#2
xyz#!#b#!#1
<NULL>#!#<NULL>#!#1
~~END~~


-- COUNT(*) takes no parameters and does not support the use of DISTINC, expect error
SELECT COUNT(DISTINCT *) from t3;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error at or near "*")~~

SELECT COUNT(ALL *) from t3;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error at or near "*")~~

DROP TABLE t2;
GO
DROP TABLE t3;
GO

-- clean up
drop function test_increment;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "test_increment")~~

drop function test_increment1;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "test_increment1")~~

drop table dateadd_table;
GO
drop procedure dateadd_procedure;
GO

-- test inline table-valued functions
-- simple case
create function itvf1 (@number int) returns table as return (select 1 as a, 2 as b);
GO
select * from itvf1(5);
GO
~~START~~
int#!#int
1#!#2
~~END~~

-- should fail because column names are not specified
create function itvf2 (@number int) returns table as return (select 1, 2);
GO
~~ERROR (Code: 4514)~~

~~ERROR (Message: CREATE FUNCTION failed because a column name is not specified for column 1)~~


-- select from a table
create table example_table(name text, age int);
GO
insert into example_table values('hello', 3);
GO
~~ROW COUNT: 1~~

-- should have 'a' and 'b' as result column names
create function itvf3 (@number int) returns table as return (select name as a, age as b from example_table);
GO
select * from itvf3(5);
GO
~~START~~
text#!#int
hello#!#3
~~END~~

-- test returning multiple rows
insert into example_table values('hello1', 4);
insert into example_table values('hello2', 5);
insert into example_table values('hello3', 6);
select * from itvf3(5);
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~START~~
text#!#int
hello#!#3
hello1#!#4
hello2#!#5
hello3#!#6
~~END~~


-- invoke a function
create function itvf4 (@number int) returns table as
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<EOF>' at line 3 and character position 0)~~

return (select sys.serverproperty(N'collation') as property1, sys.serverproperty(N'IsSingleUser') as property2);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: subquery must return only one column)~~

select * from itvf4(5);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function itvf4(integer) does not exist)~~


-- case where the return table has only one column - Postgres considers these as
-- scalar functions
create or replace function itvf5 (@number int) returns table as return (select 1 as a);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'replace' at line 3 and character position 10)~~

select * from itvf5(5);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function itvf5(integer) does not exist)~~

create or replace function itvf6 (@number int) returns table as
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'replace' at line 1 and character position 10)~~

return (select sys.serverproperty(N'collation') as property);
GO
select * from itvf6(5);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function itvf6(integer) does not exist)~~


-- complex queries with use of function parameter
create table id_name(id int, name text);
GO
insert into id_name values(1001, 'adam');
insert into id_name values(1002, 'bob');
insert into id_name values(1003, 'chaz');
insert into id_name values(1004, 'dave');
insert into id_name values(1005, 'ed');
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


create table id_score(id int, score int);
GO
insert into id_score values(1001, 90);
insert into id_score values(1001, 70);
insert into id_score values(1002, 90);
insert into id_score values(1002, 80);
insert into id_score values(1003, 80);
insert into id_score values(1003, 70);
insert into id_score values(1004, 80);
insert into id_score values(1004, 60);
insert into id_score values(1005, 80);
insert into id_score values(1005, 100);
GO
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


create function itvf7 (@number int) returns table as return (
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '<EOF>' at line 2 and character position 0)~~

select n.id, n.name as first_name, sum(s.score) as total_score
from id_name as n
join id_score as s
on n.id = s.id
where s.id <= @number
group by n.id, n.name
order by n.id
);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ')' at line 8 and character position 0)~~


select * from itvf7(1004);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function itvf7(integer) does not exist)~~


-- test inline table-valued function with table-valued parameter
create type tableType as table(
	a text not null,
	b int primary key,
	c int);
GO

create function itvf8 (@number int, @tableVar tableType READONLY) returns table as return (
select n.id, n.name as first_name, sum(s.score) as total_score
from id_name as n
join id_score as s
on n.id = s.id
where s.id <= @number and s.id in (select c from @tableVar)
group by n.id, n.name
order by n.id
);
GO

create procedure itvf8_proc as
begin
	declare @tableVariable tableType
	insert into @tableVariable values('hello1', 1, 1001)
	insert into @tableVariable values('hello2', 2, 1002)
	select * from itvf8(1004, @tableVariable)
end;
GO

EXEC itvf8_proc();
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near ')' at line 1 and character position 16)~~


-- test using parameter in projection list
create function itvf9(@number int) returns table as return (
select @number as a from id_name
);
GO

select * from itvf9(1);
GO
~~START~~
int
1
1
1
1
1
~~END~~


-- test invalid ITVFs
-- function does not have RETURN QUERY
create function itvf10(@number int) returns table as BEGIN select * from id_name END;
GO
~~ERROR (Code: 487)~~

~~ERROR (Message: syntax error near 'BEGIN' at line 3 and character position 53)~~

-- function has more than one RETURN QUERY
create function itvf11(@number int) returns table as
BEGIN
	return select * from id_name
	return select id from id_name
END;
GO
~~ERROR (Code: 487)~~

~~ERROR (Message: syntax error near 'BEGIN' at line 3 and character position 0)~~


-- test creating ITVF in a transaction and rollback - should still work as
-- normal despite the function validator's modification of the pg_proc entry
begin transaction;
create function itvf12(@number int) returns table as return (
select @number as a from id_name
);
rollback;
select * from itvf12(1);
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'function' at line 4 and character position 7)~~


-- "AS" keyword is optional in TSQL function
\tsql on
create function babel651_f() returns int
begin
  return 1
end
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '\' at line 2 and character position 0)~~

create table babel651_t(a int);
go
create function babel651_itvf() returns table
  return (select * from babel651_t)
go
create function babel651_mstvf(@i int) returns @tableVar table
(
	a text not null
)
begin
	insert into @tableVar values('hello1');
end;
go

select babel651_f();
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function babel651_f() does not exist)~~

select * from babel651_itvf();
go
~~START~~
int
~~END~~

select * from babel651_mstvf(1);
go
~~START~~
text
hello1
~~END~~


\tsql off
-- clean up
drop function itvf1;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '\' at line 1 and character position 0)~~

drop table example_table;
GO
drop function itvf3;
GO
drop function itvf4;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "itvf4")~~

drop function itvf5;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "itvf5")~~

drop function itvf6;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "itvf6")~~

drop table id_name;
GO
drop table id_score;
GO
drop function itvf7;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "itvf7")~~

drop procedure itvf8_proc;
GO
drop function itvf8;
GO
drop type tableType;
GO
drop function itvf9;
GO
drop table babel651_t;
GO
drop function babel651_f;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "babel651_f")~~

drop function babel651_itvf;
GO
drop function babel651_mstvf;
GO

-- test RETURN not followed by a semicolon
\tsql on
create function test_return1(@stringToSplit VARCHAR(MAX))
RETURNS @returnList TABLE([Name] [nvarchar] (500))
AS
BEGIN
	RETURN
END
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near '\' at line 2 and character position 0)~~

select * from test_return1('test');
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function test_return1(unknown) does not exist)~~

drop function test_return1;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a function named "test_return1")~~

create function test_return2(@stringToSplit VARCHAR(MAX))
RETURNS @returnList TABLE([Name] [nvarchar] (500))
AS
BEGIN
	RETURN;
END
GO
select * from test_return2('test');
GO
~~START~~
nvarchar
~~END~~

drop function test_return2;
GO
create function test_return3(@a int)
RETURNS @returnList TABLE([Name] [nvarchar] (500))
AS
BEGIN
	IF @a = 1
		RETURN
	SELECT @a = 2
	INSERT into @returnList values('abc')
	RETURN
END
GO
select * from test_return3(1);
GO
~~START~~
nvarchar
~~END~~

select * from test_return3(2);
GO
~~START~~
nvarchar
abc
~~END~~

drop function test_return3;
GO
create function test_return4(@a int)
RETURNS @returnList TABLE([Name] [nvarchar] (500))
AS
BEGIN
	IF @a = 1
		RETURN
	ELSE
		SELECT @a = 2
		INSERT into @returnList values('abc')
		RETURN
END
GO
select * from test_return4(1);
GO
~~START~~
nvarchar
~~END~~

select * from test_return4(2);
GO
~~START~~
nvarchar
abc
~~END~~

drop function test_return4;
GO
