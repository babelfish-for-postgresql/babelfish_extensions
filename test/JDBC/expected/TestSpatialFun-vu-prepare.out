CREATE TABLE YourTableTemp ( ID INT PRIMARY KEY, PointColumn geometry ); 

INSERT INTO YourTableTemp (ID, PointColumn) VALUES (1, geometry::Point(3.0, 4.0, 4326)), (2, geometry::Point(5.0, 6.0, 4326));
~~ROW COUNT: 2~~


CREATE TABLE YourTableTemp1 ( ID INT PRIMARY KEY, STX geometry ); 
INSERT INTO YourTableTemp1 (ID, STX) VALUES (1, geometry::Point(3.0, 4.0, 4326)), (2, geometry::Point(5.0, 6.0, 4326));
~~ROW COUNT: 2~~


CREATE TABLE YourTableTemp2 ( ID INT PRIMARY KEY, PointColumn1 geometry, PointColumn2 geometry ); 
INSERT INTO YourTableTemp2 (ID, PointColumn1, PointColumn2) VALUES (1, geometry::Point(3.0, 4.0, 4326), geometry::Point(4.0, 5.0, 4326));
~~ROW COUNT: 1~~


CREATE TABLE TableATemp (ID INT PRIMARY KEY, PointA geometry); 
CREATE TABLE TableBTemp (ID INT PRIMARY KEY, PointB geometry);
INSERT INTO TableATemp (ID, PointA) VALUES (1, geometry::Point(1.0, 2.0, 4326)); 
~~ROW COUNT: 1~~

INSERT INTO TableBTemp (ID, PointB) VALUES (1, geometry::Point(3.0, 4.0, 4326));
~~ROW COUNT: 1~~


CREATE TABLE SPATIALPOINTGEOG_dttemp (location geography)

INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -22.34900)', 4326) )
~~ROW COUNT: 1~~


INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(1.0 2.0)', 4326) )
~~ROW COUNT: 1~~


#Negative Test for STGeomFromText for Geography with SRID 0
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -22.34900)', 0) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Inavalid SRID)~~


#Negative Test for STGeomFromText for Geography when lat > 90 or < -90
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -122.34900)', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Latitude values must be between -90 and 90 degrees)~~


#Negative Test for STGeomFromText when SRID is not provided
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -22.34900)') )
~~ERROR (Code: 8146)~~

~~ERROR (Message: function geography__stgeomfromtext has no parameters and arguments were supplied.)~~


#Negative Test for STGeomFromText when cast is not provided
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( STGeomFromText('Point(47.65100 -22.34900)', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function stgeomfromtext(unknown, integer) does not exist)~~


#Negative Test for STGeomFromText when incorrect cast is provided
#INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geometry::STGeomFromText('Point(47.65100 -22.34900)', 4326) )

#Negative Test for STGeomFromText when SRID >= 10^6
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -22.34900)', 1000000000 ) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Inavalid SRID)~~


#Negative Test for STGeomFromText with SRID < 0
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -22.34900)', -1) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Inavalid SRID)~~


#Negative Test for STGeomFromText when a coordinate is missing
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Point(1.0 )', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: parse error - invalid geometry)~~


#Negative Test for STGeomFromText when invalid type is provided
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText('Pnt', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: parse error - invalid geometry)~~


#Test for STGeomFromText when null Point is Given -> Returns NBCRow
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STGeomFromText(null, 4326) )
~~ROW COUNT: 1~~


#Positive Test for STPointFromText with SRID 4326. Rest are same as STGeomFromText
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STPointFromText('Point(47.65100 -22.34900)', 4326) )
~~ROW COUNT: 1~~


INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STPointFromText('Point(1.0 2.0)', 4326) )
~~ROW COUNT: 1~~


#Negative Test for STPointFromText for Geography when lat > 90 or < -90
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::STPointFromText('Point(47.65100 122.34900)', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Latitude values must be between -90 and 90 degrees)~~


#Positive Test for Point with SRID 4326
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::Point(47.65100, -22.34900, 4326) )
~~ROW COUNT: 1~~


#Negative Test for Point for Geography when lat > 90 or < -90
INSERT INTO SPATIALPOINTGEOG_dttemp (location) VALUES ( geography::Point(147.65100, -22.34900, 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Latitude values must be between -90 and 90 degrees)~~



CREATE TABLE SPATIALPOINTGEOM_dttemp (location geometry)

#Geometry Test Cases

#Positive Test for STGeomFromText with SRID 4326
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(47.65100 -22.34900)', 4326) )
~~ROW COUNT: 1~~


INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(1.0 2.0)', 4326) )
~~ROW COUNT: 1~~


#Positive Test for STGeomFromText with SRID 0
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(47.65100 -22.34900)', 0) )
~~ROW COUNT: 1~~


#Negative Test for STGeomFromText when SRID is not provided
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(47.65100 -22.34900)') )
~~ERROR (Code: 8146)~~

~~ERROR (Message: function geometry__stgeomfromtext has no parameters and arguments were supplied.)~~


#Negative Test for STGeomFromText when SRID >= 10^6
#SRID should be between 0 to 999999
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(47.65100 -22.34900)', 1000000000 ) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: SRID value should be between 0 and 999999)~~


#Negative Test for STGeomFromText with SRID < 0
#SRID should be between 0 to 999999
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(47.65100 -22.34900)', -1) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: SRID value should be between 0 and 999999)~~


#Negative Test for STGeomFromText when a coordinate is missing
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Point(1.0 )', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: parse error - invalid geometry)~~


#Negative Test for STGeomFromText when invalid type is provided
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText('Pnt', 4326) )
~~ERROR (Code: 33557097)~~

~~ERROR (Message: parse error - invalid geometry)~~


#Test for STGeomFromText when null Point is Given -> Returns NBCRow
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STGeomFromText(null, 4326) )
~~ROW COUNT: 1~~


#Negative Test for STGeomFromText when Incorrect cast is provided
#INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geography::STGeomFromText('Point(47.65100 -22.34900)', 4326) )

#Positive Test for STPointFromText with SRID 4326. Rest are same as STGeomFromText
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STPointFromText('Point(47.65100 -22.34900)', 4326) )
~~ROW COUNT: 1~~


INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::STPointFromText('Point(1.0 2.0)', 4326) )
~~ROW COUNT: 1~~



#Positive Test for Point with SRID 4326
INSERT INTO SPATIALPOINTGEOM_dttemp (location) VALUES ( geometry::Point(47.65100, -22.34900, 4326) )
~~ROW COUNT: 1~~




CREATE VIEW point_equality1Temp AS SELECT STEquals( p1.location, p2.location ) AS equality FROM SPATIALPOINTGEOM_dttemp p1 CROSS JOIN SPATIALPOINTGEOM_dttemp p2;

CREATE VIEW isInTemp AS SELECT STContains( p1.location, p2.location ) AS isIN FROM SPATIALPOINTGEOM_dttemp p1 CROSS JOIN SPATIALPOINTGEOM_dttemp p2 ORDER BY p1.location.STX;

CREATE VIEW ValFromGeomTemp AS SELECT location.STArea() FROM SPATIALPOINTGEOM_dttemp ORDER BY location.STX;

CREATE VIEW TextFromGeogTemp AS SELECT  STArea(location) AS Area FROM SPATIALPOINTGEOG_dttemp ORDER BY location.Lat;

CREATE VIEW point_EqualityTemp AS SELECT STEquals( p1.location, p2.location ) AS Equality FROM SPATIALPOINTGEOG_dttemp p1 CROSS JOIN SPATIALPOINTGEOG_dttemp p2 ORDER BY p1.location.Lat;

CREATE VIEW point_inTemp AS SELECT STContains( p1.location, p2.location ) AS isIn FROM SPATIALPOINTGEOG_dttemp p1 CROSS JOIN SPATIALPOINTGEOG_dttemp p2;
