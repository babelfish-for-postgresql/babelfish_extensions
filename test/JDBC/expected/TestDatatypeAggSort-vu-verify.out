SELECT * FROM TestDatatypeAggSort_vu_prepare_char_view_max
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The string size for the given CHAR/NCHAR data is not defined. Please use an explicit CAST or CONVERT to CHAR(n)/NCHAR(n))~~

SELECT * FROM TestDatatypeAggSort_vu_prepare_char_view_min
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The string size for the given CHAR/NCHAR data is not defined. Please use an explicit CAST or CONVERT to CHAR(n)/NCHAR(n))~~


SELECT * FROM TestDatatypeAggSort_vu_prepare_varchar_view_max
go
~~START~~
varchar
xyz
~~END~~

SELECT * FROM TestDatatypeAggSort_vu_prepare_varchar_view_min
go
~~START~~
varchar
abc
~~END~~


SELECT * FROM TestDatatypeAggSort_vu_prepare_datetime_view_max
go
~~START~~
datetime
2023-11-06 00:00:00.0
~~END~~

SELECT * FROM TestDatatypeAggSort_vu_prepare_datetime_view_min
go
~~START~~
datetime
1900-01-01 00:00:00.0
~~END~~


SELECT * FROM TestDatatypeAggSort_vu_prepare_datetime2_view_max
go
~~START~~
datetime2
2023-11-06 00:00:00.0000000
~~END~~

SELECT * FROM TestDatatypeAggSort_vu_prepare_datetime2_view_min
go
~~START~~
datetime2
1900-01-01 00:00:00.0000000
~~END~~


SELECT * FROM TestDatatypeAggSort_vu_prepare_datetimeoffset_view_max
go
~~START~~
datetimeoffset
2023-11-06 00:00:00.0000000 +00:00
~~END~~

SELECT * FROM TestDatatypeAggSort_vu_prepare_datetimeoffset_view_min
go
~~START~~
datetimeoffset
1900-01-01 00:00:00.0000000 +00:00
~~END~~


SELECT * FROM TestDatatypeAggSort_vu_prepare_smalldatetime_view_max
go
~~START~~
smalldatetime
2023-11-06 00:00:00.0
~~END~~

SELECT * FROM TestDatatypeAggSort_vu_prepare_smalldatetime_view_min
go
~~START~~
smalldatetime
1900-01-01 00:00:00.0
~~END~~


EXEC TestDatatypeAggSort_vu_prepare_proc
go
~~ROW COUNT: 1~~

~~ROW COUNT: 1~~


SELECT * FROM TestDatatypeAggSort_vu_prepare_tbl2 ORDER BY max_min
go
~~START~~
varchar#!#char#!#varchar#!#datetime#!#datetime2#!#datetimeoffset#!#smalldatetime
max#!#xyz       #!#xyz#!#2023-11-06 00:00:00.0#!#2023-11-06 00:00:00.0000000#!#2023-11-06 00:00:00.0000000 +00:00#!#2023-11-06 00:00:00.0
min#!#abc       #!#abc#!#1900-01-01 00:00:00.0#!#1900-01-01 00:00:00.0000000#!#1900-01-01 00:00:00.0000000 +00:00#!#1900-01-01 00:00:00.0
~~END~~


-- This is failing because of BABEL-4332
SELECT MAX(char_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The string size for the given CHAR/NCHAR data is not defined. Please use an explicit CAST or CONVERT to CHAR(n)/NCHAR(n))~~

SELECT MIN(char_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The string size for the given CHAR/NCHAR data is not defined. Please use an explicit CAST or CONVERT to CHAR(n)/NCHAR(n))~~


SELECT MAX(varchar_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
go
~~START~~
varchar
stu
~~END~~

SELECT MIN(varchar_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col > 'xxx'
go
~~START~~
varchar
xyz
~~END~~


SELECT MAX(datetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime_col <= '2020-12-31 23:59:59'
go
~~START~~
datetime
2020-01-01 00:00:00.0
~~END~~

SELECT MIN(datetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime_col > '2020-12-31 23:59:59'
go
~~START~~
datetime
2023-11-06 00:00:00.0
~~END~~


SELECT MAX(datetime2_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime2_col <= '2020-12-31 23:59:59'
go
~~START~~
datetime2
2020-01-01 00:00:00.0000000
~~END~~

SELECT MIN(datetime2_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime2_col > '2020-12-31 23:59:59'
go
~~START~~
datetime2
2023-11-06 00:00:00.0000000
~~END~~


SELECT MAX(datetimeoffset_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetimeoffset_col <= '2020-12-31 23:59:59'
go
~~START~~
datetimeoffset
2020-01-01 00:00:00.0000000 +00:00
~~END~~

SELECT MIN(datetimeoffset_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetimeoffset_col > '2020-12-31 23:59:59'
go
~~START~~
datetimeoffset
2023-11-06 00:00:00.0000000 +00:00
~~END~~


SELECT MAX(smalldatetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE smalldatetime_col <= '2020-12-31 23:59:59'
go
~~START~~
smalldatetime
2020-01-01 00:00:00.0
~~END~~

SELECT MIN(smalldatetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE smalldatetime_col > '2020-12-31 23:59:59'
go
~~START~~
smalldatetime
2023-11-06 00:00:00.0
~~END~~


-- Check plans of the above queries, all aggregations should be optimized 
-- into LIMIT + index scan.
SELECT set_config('enable_seqscan', 'off', false)
go
~~START~~
text
off
~~END~~

SET babelfish_showplan_all ON
go

-- This is failing because of BABEL-4332
SELECT MAX(char_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
go
~~START~~
text
Query Text: SELECT MAX(char_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
Result  (cost=4.20..4.21 rows=1 width=32)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..4.20 rows=1 width=32)
          ->  Index Scan Backward using testdatatypeaggsort_vu_prepare_dfe0e13041c6c2fe825a6c8e994bab36 on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..12.32 rows=3 width=32)
                Index Cond: (char_col IS NOT NULL)
                Filter: (varchar_col <= 'xxx'::"varchar")
~~END~~

SELECT MIN(char_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
go
~~START~~
text
Query Text: SELECT MIN(char_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
Result  (cost=4.20..4.21 rows=1 width=32)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..4.20 rows=1 width=32)
          ->  Index Scan using testdatatypeaggsort_vu_prepare_dfe0e13041c6c2fe825a6c8e994bab36 on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..12.32 rows=3 width=32)
                Index Cond: (char_col IS NOT NULL)
                Filter: (varchar_col <= 'xxx'::"varchar")
~~END~~


SELECT MAX(varchar_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
go
~~START~~
text
Query Text: SELECT MAX(varchar_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col <= 'xxx'
Result  (cost=2.82..2.83 rows=1 width=32)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=32)
          ->  Index Only Scan Backward using testdatatypeaggsort_vu_prepare_e5a21ed567824677061b60d520a5f6ef on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=32)
                Index Cond: ((varchar_col IS NOT NULL) AND (varchar_col <= 'xxx'::"varchar"))
~~END~~

SELECT MIN(varchar_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col > 'xxx'
go
~~START~~
text
Query Text: SELECT MIN(varchar_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE varchar_col > 'xxx'
Result  (cost=2.82..2.83 rows=1 width=32)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=32)
          ->  Index Only Scan using testdatatypeaggsort_vu_prepare_e5a21ed567824677061b60d520a5f6ef on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=32)
                Index Cond: ((varchar_col IS NOT NULL) AND (varchar_col > 'xxx'::"varchar"))
~~END~~


SELECT MAX(datetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime_col <= '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MAX(datetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime_col <= '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=8)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=8)
          ->  Index Only Scan Backward using testdatatypeaggsort_vu_prepare_12f48d3e028e99c3619ba6b5547257d6 on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=8)
                Index Cond: ((datetime_col IS NOT NULL) AND (datetime_col <= '2020-12-31 23:59:59'::datetime))
~~END~~

SELECT MIN(datetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime_col > '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MIN(datetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime_col > '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=8)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=8)
          ->  Index Only Scan using testdatatypeaggsort_vu_prepare_12f48d3e028e99c3619ba6b5547257d6 on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=8)
                Index Cond: ((datetime_col IS NOT NULL) AND (datetime_col > '2020-12-31 23:59:59'::datetime))
~~END~~


SELECT MAX(datetime2_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime2_col <= '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MAX(datetime2_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime2_col <= '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=8)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=8)
          ->  Index Only Scan Backward using testdatatypeaggsort_vu_prepare_d965d7ac24d7a943b9b1d6f5dffb130b on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=8)
                Index Cond: ((datetime2_col IS NOT NULL) AND (datetime2_col <= '2020-12-31 23:59:59'::datetime2))
~~END~~

SELECT MIN(datetime2_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime2_col > '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MIN(datetime2_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetime2_col > '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=8)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=8)
          ->  Index Only Scan using testdatatypeaggsort_vu_prepare_d965d7ac24d7a943b9b1d6f5dffb130b on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=8)
                Index Cond: ((datetime2_col IS NOT NULL) AND (datetime2_col > '2020-12-31 23:59:59'::datetime2))
~~END~~


SELECT MAX(datetimeoffset_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetimeoffset_col <= '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MAX(datetimeoffset_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetimeoffset_col <= '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=10)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=10)
          ->  Index Only Scan Backward using testdatatypeaggsort_vu_prepare_be5308b9bd2258e4810b06615b0ecf3b on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=10)
                Index Cond: ((datetimeoffset_col IS NOT NULL) AND (datetimeoffset_col <= '2020-12-31 23:59:59 +00:00'::datetimeoffset))
~~END~~

SELECT MIN(datetimeoffset_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetimeoffset_col > '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MIN(datetimeoffset_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE datetimeoffset_col > '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=10)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=10)
          ->  Index Only Scan using testdatatypeaggsort_vu_prepare_be5308b9bd2258e4810b06615b0ecf3b on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=10)
                Index Cond: ((datetimeoffset_col IS NOT NULL) AND (datetimeoffset_col > '2020-12-31 23:59:59 +00:00'::datetimeoffset))
~~END~~


SELECT MAX(smalldatetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE smalldatetime_col <= '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MAX(smalldatetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE smalldatetime_col <= '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=8)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=8)
          ->  Index Only Scan Backward using testdatatypeaggsort_vu_prepare_89f665964cdb0b3fa54693cb53718971 on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=8)
                Index Cond: ((smalldatetime_col IS NOT NULL) AND (smalldatetime_col <= '2021-01-01 00:00:00'::smalldatetime))
~~END~~

SELECT MIN(smalldatetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE smalldatetime_col > '2020-12-31 23:59:59'
go
~~START~~
text
Query Text: SELECT MIN(smalldatetime_col) FROM TestDatatypeAggSort_vu_prepare_tbl WHERE smalldatetime_col > '2020-12-31 23:59:59'
Result  (cost=2.82..2.83 rows=1 width=8)
  InitPlan 1 (returns $0)
    ->  Limit  (cost=0.14..2.82 rows=1 width=8)
          ->  Index Only Scan using testdatatypeaggsort_vu_prepare_89f665964cdb0b3fa54693cb53718971 on testdatatypeaggsort_vu_prepare_tbl  (cost=0.14..8.20 rows=3 width=8)
                Index Cond: ((smalldatetime_col IS NOT NULL) AND (smalldatetime_col > '2021-01-01 00:00:00'::smalldatetime))
~~END~~


-- Reset
SET babelfish_showplan_all OFF
go
SELECT set_config('enable_seqscan', 'on', false)
go
~~START~~
text
on
~~END~~

