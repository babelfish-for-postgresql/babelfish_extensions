
-- psql

--
-- SELECT_INTO
--
SELECT *
   INTO TABLE sitmp1
   FROM master_dbo.onek
   WHERE master_dbo.onek.unique1 < 2;
GO
~~ROW COUNT: 2~~


DROP TABLE sitmp1;
GO

SELECT *
   INTO TABLE sitmp1
   FROM master_dbo.onek2
   WHERE master_dbo.onek2.unique1 < 2;
GO
~~ROW COUNT: 2~~


DROP TABLE sitmp1;
GO

--
-- SELECT INTO and INSERT permission, if owner is not allowed to insert.
--
CREATE SCHEMA selinto_schema;
GO
CREATE USER regress_selinto_user;
GO
ALTER DEFAULT PRIVILEGES FOR ROLE regress_selinto_user
	  REVOKE INSERT ON TABLES FROM regress_selinto_user;
GO
GRANT ALL ON SCHEMA selinto_schema TO public;
GO

SET SESSION AUTHORIZATION regress_selinto_user;
GO
-- WITH DATA, passes.
CREATE TABLE selinto_schema.tbl_withdata1 (a)
  AS SELECT generate_series(1,3) WITH DATA;
GO
~~ROW COUNT: 3~~

INSERT INTO selinto_schema.tbl_withdata1 VALUES (4);
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: permission denied for table tbl_withdata1
    Server SQLState: 42501)~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_withdata2 (a) AS
  SELECT generate_series(1,3) WITH DATA;
GO
~~START~~
text
Gather (actual rows=3 loops=1)
  Workers Planned: 1
  Workers Launched: 1
  Single Copy: true
  ->  ProjectSet (actual rows=3 loops=1)
        ->  Result (actual rows=1 loops=1)
~~END~~

-- WITH NO DATA, passes.
CREATE TABLE selinto_schema.tbl_nodata1 (a) AS
  SELECT generate_series(1,3) WITH NO DATA;
GO
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_nodata2 (a) AS
  SELECT generate_series(1,3) WITH NO DATA;
GO
~~START~~
text
Gather (never executed)
  Workers Planned: 1
  Workers Launched: 0
  Single Copy: true
  ->  ProjectSet (never executed)
        ->  Result (never executed)
~~END~~

-- EXECUTE and WITH DATA, passes.
PREPARE data_sel AS SELECT generate_series(1,3);
GO
CREATE TABLE selinto_schema.tbl_withdata3 (a) AS
  EXECUTE data_sel WITH DATA;
GO
~~ROW COUNT: 3~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_withdata4 (a) AS
  EXECUTE data_sel WITH DATA;
GO
~~START~~
text
Gather (actual rows=3 loops=1)
  Workers Planned: 1
  Workers Launched: 1
  Single Copy: true
  ->  ProjectSet (actual rows=3 loops=1)
        ->  Result (actual rows=1 loops=1)
~~END~~

-- EXECUTE and WITH NO DATA, passes.
CREATE TABLE selinto_schema.tbl_nodata3 (a) AS
  EXECUTE data_sel WITH NO DATA;
GO
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_nodata4 (a) AS
  EXECUTE data_sel WITH NO DATA;
GO
~~START~~
text
Gather (never executed)
  Workers Planned: 1
  Workers Launched: 0
  Single Copy: true
  ->  ProjectSet (never executed)
        ->  Result (never executed)
~~END~~

RESET SESSION AUTHORIZATION;
GO

ALTER DEFAULT PRIVILEGES FOR ROLE regress_selinto_user
	  GRANT INSERT ON TABLES TO regress_selinto_user;
GO

SET SESSION AUTHORIZATION regress_selinto_user;
GO
RESET SESSION AUTHORIZATION;
GO

DEALLOCATE data_sel;
GO
DROP SCHEMA selinto_schema CASCADE;
GO
~~WARNING (Code: 0)~~

~~WARNING (Message: drop cascades to 8 other objects  Server SQLState: 00000)~~

DROP USER regress_selinto_user;
GO

-- Tests for WITH NO DATA and column name consistency
CREATE TABLE ctas_base (i int, j int);
GO
INSERT INTO ctas_base VALUES (1, 2);
GO
~~ROW COUNT: 1~~

CREATE TABLE ctas_nodata (ii, jj, kk) AS SELECT i, j FROM ctas_base; -- Error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: too many column names were specified
    Server SQLState: 42601)~~

CREATE TABLE ctas_nodata (ii, jj, kk) AS SELECT i, j FROM ctas_base WITH NO DATA; -- Error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: too many column names were specified
    Server SQLState: 42601)~~

CREATE TABLE ctas_nodata (ii, jj) AS SELECT i, j FROM ctas_base; -- OK
GO
~~ROW COUNT: 1~~

CREATE TABLE ctas_nodata_2 (ii, jj) AS SELECT i, j FROM ctas_base WITH NO DATA; -- OK
GO
CREATE TABLE ctas_nodata_3 (ii) AS SELECT i, j FROM ctas_base; -- OK
GO
~~ROW COUNT: 1~~

CREATE TABLE ctas_nodata_4 (ii) AS SELECT i, j FROM ctas_base WITH NO DATA; -- OK
GO
SELECT * FROM ctas_nodata;
GO
~~START~~
int4#!#int4
1#!#2
~~END~~

SELECT * FROM ctas_nodata_2;
GO
~~START~~
int4#!#int4
~~END~~

SELECT * FROM ctas_nodata_3;
GO
~~START~~
int4#!#int4
1#!#2
~~END~~

SELECT * FROM ctas_nodata_4;
GO
~~START~~
int4#!#int4
~~END~~

DROP TABLE ctas_base;
GO
DROP TABLE ctas_nodata;
GO
DROP TABLE ctas_nodata_2;
GO
DROP TABLE ctas_nodata_3;
GO
DROP TABLE ctas_nodata_4;
GO

--
-- CREATE TABLE AS/SELECT INTO as last command in a SQL function
-- have been known to cause problems
--
CREATE FUNCTION make_table() RETURNS VOID
AS $$
  CREATE TABLE created_table AS SELECT * FROM master_dbo.int8_tbl;
$$ LANGUAGE SQL;
GO

SELECT make_table();
GO
~~START~~
void
<NULL>
~~END~~


SELECT * FROM created_table;
GO
~~START~~
int8#!#int8
123#!#456
123#!#4567890123456789
4567890123456789#!#123
4567890123456789#!#4567890123456789
4567890123456789#!#-4567890123456789
~~END~~


-- Try EXPLAIN ANALYZE SELECT INTO and EXPLAIN ANALYZE CREATE TABLE AS
-- WITH NO DATA, but hide the outputs since they won't be stable.
DO $$
BEGIN
	EXECUTE 'EXPLAIN ANALYZE SELECT * INTO TABLE easi FROM master_dbo.int8_tbl';
	EXECUTE 'EXPLAIN ANALYZE CREATE TABLE easi2 AS SELECT * FROM master_dbo.int8_tbl WITH NO DATA';
END$$;
GO

DROP TABLE created_table;
GO
DROP TABLE easi, easi2;
GO

--
-- Disallowed uses of SELECT ... INTO.  All should fail
--
DECLARE foo CURSOR FOR SELECT 1 INTO master_dbo.int4_tbl;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: SELECT ... INTO is not allowed here
  Position: 100
    Server SQLState: 42601)~~

COPY (SELECT 1 INTO frak UNION SELECT 2) TO 'blob';
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: COPY (SELECT INTO) is not supported
    Server SQLState: 0A000)~~

SELECT * FROM (SELECT 1 INTO f) bar;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: SELECT ... INTO is not allowed here
  Position: 30
    Server SQLState: 42601)~~

CREATE VIEW foo AS SELECT 1 INTO master_dbo.int4_tbl;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: views must not contain SELECT INTO
    Server SQLState: 0A000)~~

INSERT INTO master_dbo.int4_tbl SELECT 1 INTO f;
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: SELECT ... INTO is not allowed here
  Position: 47
    Server SQLState: 42601)~~


-- Test CREATE TABLE AS ... IF NOT EXISTS
CREATE TABLE ctas_ine_tbl AS SELECT 1;
GO
~~ROW COUNT: 1~~

CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0; -- error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: relation "ctas_ine_tbl" already exists
    Server SQLState: 42P07)~~

CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0; -- ok
GO
~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA; -- error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: relation "ctas_ine_tbl" already exists
    Server SQLState: 42P07)~~

CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA; -- ok
GO
~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0; -- error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: relation "ctas_ine_tbl" already exists
    Server SQLState: 42P07)~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0; -- ok
GO
~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

~~START~~
text
~~END~~

~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA; -- error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: relation "ctas_ine_tbl" already exists
    Server SQLState: 42P07)~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA; -- ok
GO
~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

~~START~~
text
~~END~~

~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

PREPARE ctas_ine_query AS SELECT 1 / 0;
GO
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE ctas_ine_tbl AS EXECUTE ctas_ine_query; -- error
GO
~~ERROR (Code: 0)~~

~~ERROR (Message: ERROR: relation "ctas_ine_tbl" already exists
    Server SQLState: 42P07)~~

EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS EXECUTE ctas_ine_query; -- ok
GO
~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

~~START~~
text
~~END~~

~~WARNING (Code: 0)~~

~~WARNING (Message: relation "ctas_ine_tbl" already exists, skipping  Server SQLState: 42P07)~~

DROP TABLE ctas_ine_tbl;
GO
