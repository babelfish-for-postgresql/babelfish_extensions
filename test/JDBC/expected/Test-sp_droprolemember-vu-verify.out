-- tsql
CREATE ROLE sp_droprolemember_r1;
GO

CREATE ROLE sp_droprolemember_r2;
GO

CREATE LOGIN sp_droprolemember_login WITH PASSWORD = '123';
GO

CREATE USER sp_droprolemember_user FOR LOGIN sp_droprolemember_login;
GO

-- sp_droprolemember_r1 -> sp_droprolemember_r2
ALTER ROLE sp_droprolemember_r1 ADD MEMBER sp_droprolemember_r2;
GO

-- sp_droprolemember_r1 -> sp_droprolemember_user
ALTER ROLE sp_droprolemember_r1 ADD MEMBER sp_droprolemember_user;
GO

-- Throw error if no argument or more than 1 argument are passed to sp_droprolemember procedure
EXEC sp_droprolemember;
GO
~~ERROR (Code: 201)~~

~~ERROR (Message: procedure sp_droprolemember expects parameter "@rolename", which was not supplied.)~~


EXEC sp_droprolemember NULL;
GO
~~ERROR (Code: 201)~~

~~ERROR (Message: procedure sp_droprolemember expects parameter "@membername", which was not supplied.)~~


EXEC sp_droprolemember '';
GO
~~ERROR (Code: 201)~~

~~ERROR (Message: procedure sp_droprolemember expects parameter "@membername", which was not supplied.)~~


EXEC sp_droprolemember '','','';
GO
~~ERROR (Code: 8144)~~

~~ERROR (Message: procedure sp_droprolemember has too many arguments specified.)~~


-- Throw error if rolename is empty after removing trailing spaces
EXEC sp_droprolemember '     ', 'sp_addrolemember_role_doesnot_exist';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


EXEC sp_droprolemember 'sp_addrolemember_role_doesnot_exist', '     ';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


-- Throw an error is role/member is empty
EXEC sp_droprolemember '', '';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


EXEC sp_droprolemember 'sp_droprolemember_role_doesnot_exist', '';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


EXEC sp_droprolemember '', 'sp_droprolemember_role_doesnot_exist';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


EXEC sp_droprolemember NULL, NULL;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


EXEC sp_droprolemember 'sp_droprolemember_role_doesnot_exist', NULL;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


EXEC sp_droprolemember NULL, 'sp_droprolemember_role_doesnot_exist';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Name cannot be NULL.)~~


-- Throw an error if member does not exist
EXEC sp_droprolemember 'sp_droprolemember_r1', 'sp_droprolemember_role_doesnot_exist';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the principal 'sp_droprolemember_role_doesnot_exist', because it does not exist or you do not have permission.)~~


-- Throw an error if role does not exist or user/login is passed as role
EXEC sp_droprolemember 'sp_droprolemember_role_doesnot_exist', 'sp_droprolemember_r1';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the role 'sp_droprolemember_role_doesnot_exist', because it does not exist or you do not have permission.)~~


EXEC sp_droprolemember 'sp_droprolemember_user', 'sp_droprolemember_r1';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the role 'sp_droprolemember_user', because it does not exist or you do not have permission.)~~


EXEC sp_droprolemember 'sp_droprolemember_login', 'sp_droprolemember_r1';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the role 'sp_droprolemember_login', because it does not exist or you do not have permission.)~~


EXEC sp_droprolemember 'sp_droprolemember_role_doesnot_exist_1', 'sp_droprolemember_role_doesnot_exist_2';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the role 'sp_droprolemember_role_doesnot_exist_1', because it does not exist or you do not have permission.)~~


-- Test whether sp_droprolemember_r2 is rolemember of sp_droprolemember_r1
SELECT IS_ROLEMEMBER('sp_droprolemember_r1', 'sp_droprolemember_r2')
GO
~~START~~
int
1
~~END~~


EXEC sp_droprolemember 'sp_droprolemember_r1', 'sp_droprolemember_r2';
GO

-- Test whether sp_droprolemember_r2 is rolemember of sp_droprolemember_r1
SELECT IS_ROLEMEMBER('sp_droprolemember_r1', 'sp_droprolemember_r2')
GO
~~START~~
int
0
~~END~~


EXEC sp_droprolemember 'sp_droprolemember_r1', 'sp_droprolemember_user';
GO

-- Test whether sp_droprolemember_user is rolemember of sp_droprolemember_r1
SELECT IS_ROLEMEMBER('sp_droprolemember_r1', 'sp_droprolemember_user')
GO
~~START~~
int
0
~~END~~


-- case insensitivity check
-- role 'sp_droprolemember_r1', 'sp_droprolemember_r2' exists in DB
EXEC sp_droprolemember 'SP_DROPROLEMEMBER_R1', 'sp_droprolemember_r2';
GO

EXEC sp_droprolemember 'sp_droprolemember_r1', 'SP_DROPROLEMEMBER_R2';
GO

-- procedure does not remove leading spaces but removes trailing whitespaces if exists in rolename/membername
EXEC sp_droprolemember ' sp_droprolemember_r1', 'sp_droprolemember_r2';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot alter the role ' sp_droprolemember_r1', because it does not exist or you do not have permission.)~~


EXEC sp_droprolemember 'sp_droprolemember_r1 ', 'sp_droprolemember_r2';
GO

EXEC sp_droprolemember 'sp_droprolemember_r1', ' sp_droprolemember_r2';
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot drop the principal ' sp_droprolemember_r2', because it does not exist or you do not have permission.)~~


EXEC sp_droprolemember 'sp_droprolemember_r1', 'sp_droprolemember_r2 ';
GO
