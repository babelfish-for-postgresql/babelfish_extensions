-- check if primary key index is used for query with order by clause
SET NOCOUNT ON
GO
-- column constraint
CREATE TABLE babel_4940_t1(id INT PRIMARY KEY, c1 VARCHAR(5) DEFAULT 'a')
GO
INSERT INTO babel_4940_t1 (id) VALUES(generate_series(1,100000))
GO

-- table constraint
CREATE TABLE babel_4940_t2(id INT, PRIMARY KEY(id), c1 VARCHAR(5) DEFAULT 'a')
GO
INSERT INTO babel_4940_t2 (id) VALUES(generate_series(1,100000))
GO

-- table constraint multiple column
CREATE TABLE babel_4940_t3(id INT, id1 INT, PRIMARY KEY(id, id1), c1 VARCHAR(5) DEFAULT 'a')
GO
SET NOCOUNT ON
DECLARE @i INT=0;
WHILE (@i<1000)
BEGIN
    INSERT INTO babel_4940_t3 (id, id1) VALUES(@i,@i+1)
    INSERT INTO babel_4940_t3 (id, id1) VALUES(@i,@i+2)
    INSERT INTO babel_4940_t3 (id, id1) VALUES(@i,@i+3)
    SET @i = @i + 1;
END
GO


-- same test as above but create primary key using alter table add constraints
-- column constraint
CREATE TABLE babel_4940_t4(id INT PRIMARY KEY, c1 VARCHAR(5) DEFAULT 'a')
GO
ALTER TABLE babel_4940_t4 DROP COLUMN id
GO
ALTER TABLE babel_4940_t4 ADD id INT PRIMARY KEY
GO
INSERT INTO babel_4940_t4 (id) VALUES(generate_series(1,100000))
GO

-- table constraint
CREATE TABLE babel_4940_t5(id INT, c1 VARCHAR(5) DEFAULT 'a')
GO
ALTER TABLE babel_4940_t5 ADD CONSTRAINT c PRIMARY KEY (id)
GO
INSERT INTO babel_4940_t5 (id) VALUES(generate_series(1,100000))
GO

-- table constraint multiple column
CREATE TABLE babel_4940_t6(id INT, id1 INT, c1 VARCHAR(5) DEFAULT 'a')
GO
ALTER TABLE babel_4940_t6 ADD CONSTRAINT c1 PRIMARY KEY(id, id1 DESC)
GO
DECLARE @i INT=0;
WHILE (@i<1000)
BEGIN
    INSERT INTO babel_4940_t6 (id, id1) VALUES(@i,@i+1)
    INSERT INTO babel_4940_t6 (id, id1) VALUES(@i,@i+2)
    INSERT INTO babel_4940_t6 (id, id1) VALUES(@i,@i+3)
    SET @i = @i + 1;
END
GO

-- All these queries should use primary key index
SELECT set_config('babelfishpg_tsql.explain_costs', 'off', false)
SELECT set_config('babelfishpg_tsql.explain_timing', 'off', false)
SELECT set_config('babelfishpg_tsql.explain_summary', 'off', false)
SELECT set_config('enable_seqscan', 'off', false);
SELECT set_config('enable_bitmapscan', 'off', false);
SET BABELFISH_STATISTICS PROFILE ON;
GO
~~START~~
text
off
~~END~~

~~START~~
text
off
~~END~~

~~START~~
text
off
~~END~~

~~START~~
text
off
~~END~~

~~START~~
text
off
~~END~~


SELECT TOP 10 * FROM babel_4940_t1 ORDER BY id
GO
~~START~~
int#!#varchar
1#!#a
2#!#a
3#!#a
4#!#a
5#!#a
6#!#a
7#!#a
8#!#a
9#!#a
10#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t1 ORDER BY id
Limit (actual rows=10 loops=1)
  ->  Index Scan using babel_4940_t1_pkey on babel_4940_t1 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t1 ORDER BY id DESC
GO
~~START~~
int#!#varchar
100000#!#a
99999#!#a
99998#!#a
99997#!#a
99996#!#a
99995#!#a
99994#!#a
99993#!#a
99992#!#a
99991#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t1 ORDER BY id DESC
Limit (actual rows=10 loops=1)
  ->  Index Scan Backward using babel_4940_t1_pkey on babel_4940_t1 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t2 ORDER BY id 
GO
~~START~~
int#!#varchar
1#!#a
2#!#a
3#!#a
4#!#a
5#!#a
6#!#a
7#!#a
8#!#a
9#!#a
10#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t2 ORDER BY id
Limit (actual rows=10 loops=1)
  ->  Index Scan using babel_4940_t2_pkey on babel_4940_t2 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t2 ORDER BY id DESC
GO
~~START~~
int#!#varchar
100000#!#a
99999#!#a
99998#!#a
99997#!#a
99996#!#a
99995#!#a
99994#!#a
99993#!#a
99992#!#a
99991#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t2 ORDER BY id DESC
Limit (actual rows=10 loops=1)
  ->  Index Scan Backward using babel_4940_t2_pkey on babel_4940_t2 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t3 ORDER BY id, id1
GO
~~START~~
int#!#int#!#varchar
0#!#1#!#a
0#!#2#!#a
0#!#3#!#a
1#!#2#!#a
1#!#3#!#a
1#!#4#!#a
2#!#3#!#a
2#!#4#!#a
2#!#5#!#a
3#!#4#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t3 ORDER BY id, id1
Limit (actual rows=10 loops=1)
  ->  Index Scan using babel_4940_t3_pkey on babel_4940_t3 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t3 ORDER BY id DESC, id1 DESC
GO
~~START~~
int#!#int#!#varchar
999#!#1002#!#a
999#!#1001#!#a
999#!#1000#!#a
998#!#1001#!#a
998#!#1000#!#a
998#!#999#!#a
997#!#1000#!#a
997#!#999#!#a
997#!#998#!#a
996#!#999#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t3 ORDER BY id DESC, id1 DESC
Limit (actual rows=10 loops=1)
  ->  Index Scan Backward using babel_4940_t3_pkey on babel_4940_t3 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t4 ORDER BY id
GO
~~START~~
varchar#!#int
a#!#1
a#!#2
a#!#3
a#!#4
a#!#5
a#!#6
a#!#7
a#!#8
a#!#9
a#!#10
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t4 ORDER BY id
Limit (actual rows=10 loops=1)
  ->  Index Scan using babel_4940_t4_pkey on babel_4940_t4 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t4 ORDER BY id DESC
GO
~~START~~
varchar#!#int
a#!#100000
a#!#99999
a#!#99998
a#!#99997
a#!#99996
a#!#99995
a#!#99994
a#!#99993
a#!#99992
a#!#99991
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t4 ORDER BY id DESC
Limit (actual rows=10 loops=1)
  ->  Index Scan Backward using babel_4940_t4_pkey on babel_4940_t4 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t5 ORDER BY id 
GO
~~START~~
int#!#varchar
1#!#a
2#!#a
3#!#a
4#!#a
5#!#a
6#!#a
7#!#a
8#!#a
9#!#a
10#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t5 ORDER BY id
Limit (actual rows=10 loops=1)
  ->  Index Scan using c on babel_4940_t5 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t5 ORDER BY id DESC
GO
~~START~~
int#!#varchar
100000#!#a
99999#!#a
99998#!#a
99997#!#a
99996#!#a
99995#!#a
99994#!#a
99993#!#a
99992#!#a
99991#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t5 ORDER BY id DESC
Limit (actual rows=10 loops=1)
  ->  Index Scan Backward using c on babel_4940_t5 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t6 ORDER BY id, id1 DESC
GO
~~START~~
int#!#int#!#varchar
0#!#3#!#a
0#!#2#!#a
0#!#1#!#a
1#!#4#!#a
1#!#3#!#a
1#!#2#!#a
2#!#5#!#a
2#!#4#!#a
2#!#3#!#a
3#!#6#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t6 ORDER BY id, id1 DESC
Limit (actual rows=10 loops=1)
  ->  Index Scan using c1 on babel_4940_t6 (actual rows=10 loops=1)
~~END~~

SELECT TOP 10 * FROM babel_4940_t6 ORDER BY id DESC, id1 ASC
GO
~~START~~
int#!#int#!#varchar
999#!#1000#!#a
999#!#1001#!#a
999#!#1002#!#a
998#!#999#!#a
998#!#1000#!#a
998#!#1001#!#a
997#!#998#!#a
997#!#999#!#a
997#!#1000#!#a
996#!#997#!#a
~~END~~

~~START~~
text
Query Text: SELECT TOP 10 * FROM babel_4940_t6 ORDER BY id DESC, id1 ASC
Limit (actual rows=10 loops=1)
  ->  Index Scan Backward using c1 on babel_4940_t6 (actual rows=10 loops=1)
~~END~~



SET BABELFISH_STATISTICS PROFILE OFF;
DROP TABLE babel_4940_t1, babel_4940_t2, babel_4940_t3, babel_4940_t4, babel_4940_t5, babel_4940_t6
GO
