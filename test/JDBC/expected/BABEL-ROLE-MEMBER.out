-- tsql
CREATE DATABASE db1
go

USE db1
go

SELECT DB_NAME()
GO
~~START~~
nvarchar
db1
~~END~~


CREATE PROC babel_role_members AS
BEGIN
	SELECT dp1.name AS RoleName, dp1.type AS RoleType,
		   dp2.name AS MemberName, dp2.type AS MemberType
	FROM sys.database_role_members AS drm
	INNER JOIN sys.database_principals AS dp1
	ON drm.role_principal_id = dp1.principal_id
	INNER JOIN sys.database_principals AS dp2
	ON drm.member_principal_id = dp2.principal_id
	ORDER BY dp1.name, dp2.name
END
GO

CREATE ROLE test_role1
GO
CREATE ROLE test_role2
GO
CREATE ROLE test_role3
GO
CREATE ROLE test_role4 
GO
CREATE ROLE test_role5
GO
CREATE LOGIN test_login1 WITH PASSWORD = '123'
GO
CREATE LOGIN test_login2 WITH PASSWORD = '123'
GO
CREATE LOGIN test_login3 WITH PASSWORD = '123'
GO
CREATE USER test_user1 FOR LOGIN test_login1
GO
CREATE USER test_user2 FOR LOGIN test_login2
GO
CREATE USER test_user3 FOR LOGIN test_login3
GO

-- role1 -> role2 -> role3 -> role4
ALTER ROLE test_role1 ADD MEMBER test_role2
GO
ALTER ROLE test_role2 ADD MEMBER test_role3
GO
ALTER ROLE test_role3 ADD MEMBER test_role4
GO
-- role1 -> user1
ALTER ROLE test_role1 ADD MEMBER test_user1
GO
-- role2 -> user2
ALTER ROLE test_role2 ADD MEMBER test_user2
GO
-- role3 -> user3
ALTER ROLE test_role3 ADD MEMBER test_user3
GO

-- Print the current membership status
EXEC babel_role_members
GO
~~START~~
varchar#!#char#!#varchar#!#char
db_owner#!#R#!#dbo#!#S
test_role1#!#R#!#test_role2#!#R
test_role1#!#R#!#test_user1#!#S
test_role2#!#R#!#test_role3#!#R
test_role2#!#R#!#test_user2#!#S
test_role3#!#R#!#test_role4#!#R
test_role3#!#R#!#test_user3#!#S
~~END~~


-- IS_MEMBER and IS_ROLEMEMBER
-- Basic membership check
SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role3', 'test_role4')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_user1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_user2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role3', 'test_user3')
GO
~~START~~
int
1
~~END~~


-- Not member, should return 0
SELECT IS_ROLEMEMBER('test_role4', 'test_role1')
GO
~~START~~
int
0
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role5')
GO
~~START~~
int
0
~~END~~


-- Nested membership check
SELECT IS_ROLEMEMBER('test_role1', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_user3')
GO
~~START~~
int
1
~~END~~


-- Membership of oneself, should return 1, this also applies to user
SELECT IS_ROLEMEMBER('test_role1', 'test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_user1', 'test_user1')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_ROLEMEMBER('db_owner', 'test_role1')
GO
~~START~~
int
0
~~END~~

SELECT IS_ROLEMEMBER('db_owner', 'test_user1')
GO
~~START~~
int
0
~~END~~


-- Invalid role/principal name, should return NULL
SELECT IS_MEMBER('xxx')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('xxx')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('xxx', 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'xxx')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER(NULL, 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', NULL)
GO
~~START~~
int
<NULL>
~~END~~


-- Given role name is not a real role, should return NULL
SELECT IS_MEMBER('test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_user1', 'test_user2')
GO
~~START~~
int
<NULL>
~~END~~


-- NULL input, should return NULL
SELECT IS_MEMBER(NULL)
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER(NULL, 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', NULL)
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER(NULL, NULL)
GO
~~START~~
int
<NULL>
~~END~~


-- tsql      user=test_login1      password=123
-- Connect with different logins to test membership view permission
-- Test on user1
USE db1
GO
SELECT USER_NAME()
GO
~~START~~
nvarchar
test_user1
~~END~~


-- Should return 1
SELECT IS_MEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_MEMBER('test_user1')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_MEMBER('test_role2')
GO
~~START~~
int
0
~~END~~

SELECT IS_ROLEMEMBER('test_role3')
GO
~~START~~
int
0
~~END~~


-- Doesn't have permission, should return NULL
SELECT IS_ROLEMEMBER('test_role2', 'test_user2')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
<NULL>
~~END~~


USE master
GO

-- tsql      user=test_login2      password=123
-- Test on user2
USE db1
GO
SELECT USER_NAME()
GO
~~START~~
nvarchar
test_user2
~~END~~


-- Should return 1
SELECT IS_MEMBER('test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_MEMBER('test_user2')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_MEMBER('test_role3')
GO
~~START~~
int
0
~~END~~


-- Doesn't have permission, should return NULL 
SELECT IS_ROLEMEMBER('test_role1', 'test_role3')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_role3')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_user1')
GO
~~START~~
int
<NULL>
~~END~~


USE master
GO

-- tsql      user=test_login3      password=123
-- Test on user3
USE db1
GO
SELECT USER_NAME()
GO
~~START~~
nvarchar
test_user3
~~END~~


-- Should return 1
SELECT IS_MEMBER('test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role2')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_ROLEMEMBER('test_role1', 'test_role3')
GO
~~START~~
int
1
~~END~~

SELECT IS_MEMBER('test_user3')
GO
~~START~~
int
1
~~END~~


-- Should return 0
SELECT IS_MEMBER('test_role4')
GO
~~START~~
int
0
~~END~~


-- Doesn't have permission, should return NULL
SELECT IS_ROLEMEMBER('test_role3', 'test_role4')
GO
~~START~~
int
<NULL>
~~END~~

SELECT IS_ROLEMEMBER('test_role2', 'test_user2')
GO
~~START~~
int
<NULL>
~~END~~


USE master
GO

-- tsql
-- Clean up
USE db1
GO
DROP USER test_user1
GO
DROP USER test_user2
GO
DROP USER test_user3
GO
DROP ROLE test_role1
GO
DROP ROLE test_role2
GO
DROP ROLE test_role3
GO
DROP ROLE test_role4
GO
DROP ROLE test_role5
GO
DROP LOGIN test_login1
GO
DROP LOGIN test_login2
GO
DROP LOGIN test_login3
GO
USE master
GO
DROP DATABASE db1
GO
