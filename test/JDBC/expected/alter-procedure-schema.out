-- psql currentSchema=master_dbo,public
-- Test showing error in case we define multiple procs with same name in psql,
-- then alter in tsql
create procedure psql_proc_p1()
LANGUAGE SQL
as $$
    select 1
$$;
go

create procedure psql_proc_p1(a integer)
LANGUAGE SQL
as $$
    select a
$$;
go

-- tsql
alter procedure psql_proc_p1
as
    select 5
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Multiple procedures are defined with the same name and different parameters. Please ensure that there is only one procedure with the target name before calling ALTER PROCEDURE)~~


-- psql currentSchema=master_dbo,public
drop procedure psql_proc_p1()
go

drop procedure psql_proc_p1(a integer)
go

-- tsql
-- Test demonstrating how to alter a function on a schema via login with sysadmin
create login alter_proc_l1 with password = '12345678'
go

ALTER ROLE sysadmin ADD MEMBER alter_proc_l1
GO

-- tsql user=alter_proc_l1 password=12345678
create database alter_proc_db1
go

use alter_proc_db1
go

create schema alter_proc_schema1
go

create proc alter_proc_schema1.p1 @l int as select (@l * 100);
go

-- psql
select schema_name, object_name, permission, grantee, object_type, function_args, grantor from sys.babelfish_schema_permissions where schema_name = 'alter_proc_schema1' collate sys.database_default order by object_name;
go
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#int4#!#"sys"."varchar"#!#bpchar#!#text#!#"sys"."varchar"
~~END~~


-- tsql user=alter_proc_l1 password=12345678
exec alter_proc_schema1.p1 @l = 1
go
~~START~~
int
100
~~END~~


alter procedure alter_proc_schema1.p1 @l int as select (@l + 2);
go

exec alter_proc_schema1.p1 @l = 1
go
~~START~~
int
3
~~END~~


drop proc alter_proc_schema1.p1
go

-- psql
select schema_name, object_name, permission, grantee, object_type, function_args, grantor from sys.babelfish_schema_permissions where schema_name = 'alter_proc_schema1' collate sys.database_default order by object_name;
go
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#int4#!#"sys"."varchar"#!#bpchar#!#text#!#"sys"."varchar"
~~END~~


-- tsql user=alter_proc_l1 password=12345678
drop schema alter_proc_schema1;
go

use master
go

drop database alter_proc_db1
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'alter_proc_l1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go
~~START~~
bool
t
~~END~~


-- Wait to sync with another session
SELECT pg_sleep(1);
go
~~START~~
void

~~END~~


-- tsql 
drop login alter_proc_l1;
go

-- Test demonstrating how grant alter is not supported yet which is why we need the sysadmin workaround
create schema alter_proc_schema2
go

create login alter_proc_l2 with password = '12345678'
go

create user alter_proc_u2 for login alter_proc_l2
go

create proc alter_proc_schema2.p2 @l int as select 1;
go


-- tsql user=alter_proc_l2 password=12345678
exec alter_proc_schema2.p2 @l = 1
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for procedure p2)~~


-- tsql
GRANT EXECUTE ON alter_proc_schema2.p2 TO alter_proc_u2
GO

GRANT EXECUTE ON SCHEMA::alter_proc_schema2 TO alter_proc_u2
GO

-- tsql user=alter_proc_l2 password=12345678
exec alter_proc_schema2.p2 @l = 1
go
~~START~~
int
1
~~END~~


alter procedure alter_proc_schema2.p2 @l datetimeoffset(2), @z int as select 2;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for schema master_alter_proc_schema2)~~


-- tsql
drop proc alter_proc_schema2.p2
go

drop schema alter_proc_schema2;
go

drop user alter_proc_u2;
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'alter_proc_l2' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go
~~START~~
bool
t
~~END~~


-- Wait to sync with another session
SELECT pg_sleep(1);
go
~~START~~
void

~~END~~


-- tsql 
drop login alter_proc_l2;
go

-- tsql
-- Test creating two different procedures on same schema
create login alter_proc_l3 with password = '12345678'
go

ALTER ROLE sysadmin ADD MEMBER alter_proc_l3
GO

-- tsql user=alter_proc_l3 password=12345678
create database alter_proc_db2
go

use alter_proc_db2
go

create schema alter_proc_schema3
go

create proc alter_proc_schema3.p1 @l int as select (@l * 100);
go

create proc alter_proc_schema3.p2 as select 5;
go

-- psql
select schema_name, object_name, permission, grantee, object_type, function_args, grantor from sys.babelfish_schema_permissions where schema_name = 'alter_proc_schema3' collate sys.database_default order by object_name;
go
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#int4#!#"sys"."varchar"#!#bpchar#!#text#!#"sys"."varchar"
~~END~~


-- tsql user=alter_proc_l3 password=12345678
exec alter_proc_schema3.p1 @l = 1
go
~~START~~
int
100
~~END~~


alter procedure alter_proc_schema3.p1 @l int as select (@l + 2);
go

alter procedure alter_proc_schema3.p2 @param int as select @param
go

exec alter_proc_schema3.p1 @l = 1
go
~~START~~
int
3
~~END~~


exec alter_proc_schema3.p2 @param = 200
go
~~START~~
int
200
~~END~~


drop proc alter_proc_schema3.p1
go

drop proc alter_proc_schema3.p2
go

-- psql
select schema_name, object_name, permission, grantee, object_type, function_args, grantor from sys.babelfish_schema_permissions where schema_name = 'alter_proc_schema3' collate sys.database_default order by object_name;
go
~~START~~
"sys"."varchar"#!#"sys"."varchar"#!#int4#!#"sys"."varchar"#!#bpchar#!#text#!#"sys"."varchar"
~~END~~


-- tsql user=alter_proc_l3 password=12345678
drop schema alter_proc_schema3;
go

use master
go

drop database alter_proc_db2
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'alter_proc_l3' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go
~~START~~
bool
t
~~END~~


-- Wait to sync with another session
SELECT pg_sleep(1);
go
~~START~~
void

~~END~~


-- tsql 
drop login alter_proc_l3;
go

-- tsql
-- Test creating two of the same procedures on different schemas
create login alter_proc_l4 with password = '12345678'
go

ALTER ROLE sysadmin ADD MEMBER alter_proc_l4
GO

-- tsql user=alter_proc_l4 password=12345678
create database alter_proc_db3
go

use alter_proc_db3
go

create schema alter_proc_schema4
go

create schema alter_proc_schema5
go

create proc alter_proc_schema4.p1 @l int as select @l;
go

create proc alter_proc_schema5.p1 @l int as select @l;
go

-- tsql user=alter_proc_l4 password=12345678

exec alter_proc_schema4.p1 @l = 10
go
~~START~~
int
10
~~END~~


exec alter_proc_schema5.p1 @l = 10
go
~~START~~
int
10
~~END~~


alter proc alter_proc_schema4.p1 @z nvarchar(10) as select @z
go

alter proc alter_proc_schema5.p1 @z nvarchar(10) as select @z
go

exec alter_proc_schema4.p1 @z = 'test'
go
~~START~~
nvarchar
test
~~END~~


exec alter_proc_schema5.p1 @z = 'test'
go
~~START~~
nvarchar
test
~~END~~


drop proc alter_proc_schema4.p1
go

drop proc alter_proc_schema5.p1
go

-- tsql user=alter_proc_l4 password=12345678
drop schema alter_proc_schema4;
go

drop schema alter_proc_schema5;
go

use master
go

drop database alter_proc_db3
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'alter_proc_l4' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go
~~START~~
bool
t
~~END~~


-- Wait to sync with another session
SELECT pg_sleep(1);
go
~~START~~
void

~~END~~


-- tsql 
drop login alter_proc_l4;
go
