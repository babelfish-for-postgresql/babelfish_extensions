-- tsql
create login dba_login with password='12345678'
go
create login new_OWNER_login with password='12345678'
go
create login new_owner_login2 with password='12345678'
go
alter server role sysadmin add member dba_login
go

-- tsql user=dba_login password=12345678
-- end preparation
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dba_login#!#master
~~END~~

create database change_owner_db
go
alter authorization on database::no_such_db_chgownerdb to new_owner_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot find the database 'no_such_db_chgownerdb', because it does not exist or you do not have permission.)~~

alter authorization on database::change_owner_db to no_such_login_chgownerdb
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot find the principal 'no_such_login_chgownerdb', because it does not exist or you do not have permission.)~~


-- system databases not allowed
alter authorization on database::master to new_owner_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot change the owner of the master, model, tempdb or distribution database.)~~

alter authorization on database::tempdb to new_owner_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot change the owner of the master, model, tempdb or distribution database.)~~

-- allowed for msdb
alter authorization on database::msdb to new_owner_login
go
select name, suser_sname(sid) from sysdatabases where name = 'msdb'
go
~~START~~
text#!#nvarchar
msdb#!#new_OWNER_login
~~END~~


-- tsql
use master
go
declare @cmd varchar(100)
set @cmd = 'alter authorization on database::msdb to ' + suser_name()
execute(@cmd)
go

-- tsql user=dba_login password=12345678
-- before owner change:
select name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
text#!#nvarchar
change_owner_db#!#dba_login
~~END~~

ALTER authorization on database::change_owner_db to new_owner_login
go
-- after owner change:
select name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
text#!#nvarchar
change_owner_db#!#new_OWNER_login
~~END~~


-- change back to current user
alter AUTHORIZATION on database::change_owner_db to dba_login
go
select name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
text#!#nvarchar
change_owner_db#!#dba_login
~~END~~


-- grant ownership to new owner and verify access
-- grant multiple times
alter authorization on DATABASE::change_owner_db to new_owner_LOGIN
go
alter authorization on database::change_owner_db TO new_owner_login
go
alter authorization on database::change_owner_db to new_owner_login
go

-- tsql user=new_owner_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
new_OWNER_login#!#master
~~END~~

use change_owner_db
go
select user_name()
go
~~START~~
nvarchar
dbo
~~END~~

create table t(a int)
insert t values(123)
go
~~ROW COUNT: 1~~


-- tsql user=dba_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dba_login#!#master
~~END~~

alter authorization on database::change_owner_db to dba_login
go

-- tsql user=new_owner_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
new_OWNER_login#!#change_owner_db
~~END~~

select * from t
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: permission denied for table t)~~

create table t2(a int)
go

-- but previous owner should loose access after moving out of the DB 
use master
go
use change_owner_db
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The server principal "new_owner_login" is not able to access the database "change_owner_db" under the current security context)~~


-- tsql user=dba_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dba_login#!#master
~~END~~

-- when new owner has guest access before change, granting ownership is allowed
use master
go
drop database change_owner_db
go
create database CHANGE_OWNER_DB
go
use change_OWNER_db
go
grant connect to guest
go
alter authorization on database::CHANGE_owner_db to NEW_owner_login
go
select name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
text#!#nvarchar
change_owner_db#!#new_OWNER_login
~~END~~


-- tsql user=new_owner_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
new_OWNER_login#!#master
~~END~~

use change_owner_db
go
select user_name()
go
~~START~~
nvarchar
dbo
~~END~~

create table t(a int)
go
use master
go

-- tsql user=dba_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dba_login#!#change_owner_db
~~END~~

-- when new owner is already a DB user, granting ownership is not allowed
use master
go
drop database change_owner_db
go
create database change_owner_db
go
use change_owner_db
go
create user new_owner_login
go
create user another_user for login new_owner_login2
go

-- should raise error
alter authorization on database::change_owner_db to new_owner_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The proposed new database owner is already a user or aliased in the database.)~~

select name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
text#!#nvarchar
change_owner_db#!#dba_login
~~END~~


-- should raise error
alter authorization on database::change_owner_db to new_owner_login2
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: The proposed new database owner is already a user or aliased in the database.)~~

select name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
text#!#nvarchar
change_owner_db#!#dba_login
~~END~~


-- tsql user=dba_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dba_login#!#change_owner_db
~~END~~

use master
go
drop database change_owner_db
go
create database change_owner_db
go
create procedure p_change_db_owner_1
as
begin
	select 'p_change_db_owner_1: before owner change', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'	
	alter authorization on database::change_owner_db to new_owner_login
	select 'p_change_db_owner_1: after owner change', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'	  
end	
go
exec p_change_db_owner_1
go
~~START~~
varchar#!#text#!#nvarchar
p_change_db_owner_1: before owner change#!#change_owner_db#!#dba_login
~~END~~

~~START~~
varchar#!#text#!#nvarchar
p_change_db_owner_1: after owner change#!#change_owner_db#!#new_OWNER_login
~~END~~


-- tsql user=dba_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dba_login#!#master
~~END~~

use master
go
alter authorization on database::change_owner_db to dba_login
go
create procedure p_change_db_owner_2
@dbname nvarchar(50),
@owner nvarchar(50)
as
begin
	declare @cmd nvarchar(100) 
	set @cmd = 'alter authorization on database::' + @dbname + ' to ' + @owner
	select @cmd
	select 'p_change_db_owner_2: before owner change', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'	
	execute(@cmd)
	select 'p_change_db_owner_2: after owner change', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'	  
end	
go
exec p_change_db_owner_2 change_owner_db, new_owner_login
go
~~START~~
nvarchar
alter authorization on database::change_owner_db to new_owner_login
~~END~~

~~START~~
varchar#!#text#!#nvarchar
p_change_db_owner_2: before owner change#!#change_owner_db#!#dba_login
~~END~~

~~START~~
varchar#!#text#!#nvarchar
p_change_db_owner_2: after owner change#!#change_owner_db#!#new_OWNER_login
~~END~~


-- tsql user=new_owner_login password=12345678
select suser_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
new_OWNER_login#!#master
~~END~~

use change_owner_db
go
select user_name(), suser_name()
go
~~START~~
nvarchar#!#nvarchar
dbo#!#new_OWNER_login
~~END~~


-- can grant to yourself when you're owner already (but it's a noop)
alter authorization on database::change_owner_db to new_owner_login
go

-- cannot grant to another owner without sysadmin role, even when you're the owner already
alter authorization on database::change_owner_db to new_owner_login2
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot find the principal 'new_owner_login2', because it does not exist or you do not have permission.)~~


-- ... not even to a sysadmin role login
alter authorization on database::change_owner_db to dba_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Cannot find the principal 'dba_login', because it does not exist or you do not have permission.)~~


use master
go

-- cannot rename the database without sysadmin role, even when you're the owner already
-- ALTER DATABASE is not yet supported in Babelfish:
alter database change_owner_db modify name = change_owner_db_renamed
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER DATABASE' is not currently supported in Babelfish)~~


-- cannot rename the database without sysadmin role, even when you're the owner already
-- sp_rename not yet supported for 'database' type in Babelfish:
sp_rename 'change_owner_db', 'change_owner_db_renamed', 'database'
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Provided @objtype is not currently supported in Babelfish)~~


-- tsql user=dba_login password=12345678
-- roll back owner change in transaction
use master
go
alter authorization on database::change_owner_db to dba_login
go
begin tran
go
select 'before owner change', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
varchar#!#text#!#nvarchar
before owner change#!#change_owner_db#!#dba_login
~~END~~

alter authorization on database::change_owner_db to new_owner_login
go
select 'after owner change', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
varchar#!#text#!#nvarchar
after owner change#!#change_owner_db#!#new_OWNER_login
~~END~~

rollback
go
select 'after rollback', name, suser_sname(sid) from sysdatabases where name = 'change_owner_db'
go
~~START~~
varchar#!#text#!#nvarchar
after rollback#!#change_owner_db#!#dba_login
~~END~~


use master
go
-- non-sysadmin owner can drop database
drop database change_owner_db
go
-- should return NULL
select db_id('change_owner_db')
go
~~START~~
smallint
<NULL>
~~END~~


-- tests for long names and mixed case
create database DB63long_012345678901234567890123456789012345678901234567890123
go
create login    LOGIN63long_345678901234567890123456789012345678901234567890123 with password = '12345678'
go
alter authorization on database::DB63long_012345678901234567890123456789012345678901234567890123 to LOGIN63long_345678901234567890123456789012345678901234567890123
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB63LONG%'
go
~~START~~
text#!#nvarchar
db63long_012345678901234567890123456789012345678901234567890123#!#LOGIN63long_345678901234567890123456789012345678901234567890123
~~END~~

alter authorization on database::[DB63long_012345678901234567890123456789012345678901234567890123] to dba_login
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB63LONG%'
go
~~START~~
text#!#nvarchar
db63long_012345678901234567890123456789012345678901234567890123#!#dba_login
~~END~~

alter authorization on database::[DB63long_012345678901234567890123456789012345678901234567890123] to [LOGIN63long_345678901234567890123456789012345678901234567890123]
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB63LONG%'
go
~~START~~
text#!#nvarchar
db63long_012345678901234567890123456789012345678901234567890123#!#LOGIN63long_345678901234567890123456789012345678901234567890123
~~END~~

set quoted_identifier on
go
alter authorization on database::"DB63long_012345678901234567890123456789012345678901234567890123" to dba_login
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB63LONG%'
go
~~START~~
text#!#nvarchar
db63long_012345678901234567890123456789012345678901234567890123#!#dba_login
~~END~~

alter authorization on database::"DB63long_012345678901234567890123456789012345678901234567890123" to "LOGIN63long_345678901234567890123456789012345678901234567890123"
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB63LONG%'
go
~~START~~
text#!#nvarchar
db63long_012345678901234567890123456789012345678901234567890123#!#LOGIN63long_345678901234567890123456789012345678901234567890123
~~END~~

set quoted_identifier off
go

-- tsql user=LOGIN63long_345678901234567890123456789012345678901234567890123 password=12345678
use DB63long_012345678901234567890123456789012345678901234567890123
go
select user_name(), db_name()
go
~~START~~
nvarchar#!#nvarchar
dbo#!#db63long_012345678901234567890123456789012345678901234567890123
~~END~~

use master
go
drop database DB63long_012345678901234567890123456789012345678901234567890123
go

-- tsql user=dba_login password=12345678
create database DB64long_0123456789012345678901234567890123456789012345678901234
go
create login    LOGIN64long_3456789012345678901234567890123456789012345678901234 with password = '12345678'
go
alter authorization on database::DB64long_0123456789012345678901234567890123456789012345678901234 to LOGIN64long_3456789012345678901234567890123456789012345678901234
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB64LONG%'
go
~~START~~
text#!#nvarchar
db64long_012345678901234567890109e0da63a1cdb0673c21e39afa6178e9#!#LOGIN64long_3456789012345678901234567890123456789012345678901234
~~END~~

alter authorization on database::[DB64long_0123456789012345678901234567890123456789012345678901234] to dba_login
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB64LONG%'
go
~~START~~
text#!#nvarchar
db64long_012345678901234567890109e0da63a1cdb0673c21e39afa6178e9#!#dba_login
~~END~~

alter authorization on database::[DB64long_0123456789012345678901234567890123456789012345678901234] to [LOGIN64long_3456789012345678901234567890123456789012345678901234]
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB64LONG%'
go
~~START~~
text#!#nvarchar
db64long_012345678901234567890109e0da63a1cdb0673c21e39afa6178e9#!#LOGIN64long_3456789012345678901234567890123456789012345678901234
~~END~~

set quoted_identifier on
go
alter authorization on database::"DB64long_0123456789012345678901234567890123456789012345678901234" to dba_login
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB64LONG%'
go
~~START~~
text#!#nvarchar
db64long_012345678901234567890109e0da63a1cdb0673c21e39afa6178e9#!#dba_login
~~END~~

alter authorization on DATABASE::"DB64long_0123456789012345678901234567890123456789012345678901234" to "LOGIN64long_3456789012345678901234567890123456789012345678901234"
go
select name, suser_sname(sid) from sysdatabases where upper(name) like 'DB64LONG%'
go
~~START~~
text#!#nvarchar
db64long_012345678901234567890109e0da63a1cdb0673c21e39afa6178e9#!#LOGIN64long_3456789012345678901234567890123456789012345678901234
~~END~~

set quoted_identifier off
go


-- tsql
-- this connection will fail as it is currently not possible to connect to Babelfish with a login name longer than 63 characters
-- commented out this test since the error message in the Github JDBC tests is different from that in the locally executed JDBC tests
-- commented out: tsql user=LOGIN64long_3456789012345678901234567890123456789012345678901234 password=12345678
-- error msg in local JDBC tests: ~~ERROR (Code: 33557097)~~, -~~ERROR (Message: role "login64long_345678901234567890123456789012345678901234567890123" does not exist )~~
-- error msg in Github JDBC tests: ~~ERROR (Code: 18456)~~, ~~ERROR (Message: Login failed for user "login64long_3456789012345678901234567890123456789012345678901234" )~~
-- use DB64long_0123456789012345678901234567890123456789012345678901234
-- go
-- select user_name(), db_name()
-- go
-- use master
-- go
use master
go
drop database DB64long_0123456789012345678901234567890123456789012345678901234
go

-- other ALTER AUTHORIZATION variants, not supported
alter authorization on database::mydb TO public
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error near 'public' at line 2 and character position 41)~~

alter authorization on database::mydb to schema owner
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER AUTHORIZATION TO SCHEMA OWNER' is not currently supported in Babelfish)~~

alter AUTHORIZATION on mydb to dba_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER AUTHORIZATION on object types other than DATABASE::' is not currently supported in Babelfish)~~

alter AUTHORIZATION on table::mydb to dba_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER AUTHORIZATION on object types other than DATABASE::' is not currently supported in Babelfish)~~

ALTER authorization on database::my.data.base to dba_login
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER AUTHORIZATION with multi-part database name' is not currently supported in Babelfish)~~

create procedure p_change_db_owner_3
as
  alter authorization on database::mydb to schema owner
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER AUTHORIZATION TO SCHEMA OWNER' is not currently supported in Babelfish)~~

declare @cmd varchar(100) = 'alter authorization on database::mydb to schema owner'
execute(@cmd)
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: 'ALTER AUTHORIZATION TO SCHEMA OWNER' is not currently supported in Babelfish)~~



-- tsql
-- cleanup
use master
go
set nocount on
go
-- kill remaining sessions
create table #killed(killed int)
go
declare @spid int, @cmd varchar(30)
while (1=1)
begin 
-- case lower(loginname) = 'dba_login' is not working here. will have to file a seperate JIRA
select @spid = spid from sys.sysprocesses where spid <> @@spid and spid not in (select killed from #killed)
and (lower(loginname) like 'new_owner_login%' or lower(loginname) like 'login6%'  or loginname = 'dba_login')
if @@rowcount = 0 break
insert #killed values(@spid)
set @cmd = 'kill ' + convert(varchar, @spid)
execute(@cmd)
end
go
exec pg_sleep 3
go

use master
go
-- database is expected to have been dropped by the owner, so expecting an error msg here:
drop database change_owner_db
go
~~ERROR (Code: 911)~~

~~ERROR (Message: database "change_owner_db" does not exist)~~

drop login dba_login
go
drop login new_owner_login
go
drop login new_owner_login2
go
drop login LOGIN63long_345678901234567890123456789012345678901234567890123
go
drop login LOGIN64long_3456789012345678901234567890123456789012345678901234
go
drop procedure p_change_db_owner_1
go
drop procedure p_change_db_owner_2
go
-- should raise error as procedure was not created:
drop procedure p_change_db_owner_3
go
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "p_change_db_owner_3")~~

