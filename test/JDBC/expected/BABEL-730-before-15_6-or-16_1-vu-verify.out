-- verify log function return value datatype
SELECT * INTO test_log FROM
         (
            SELECT log(5) AS log, log(100, 10) AS log_2args, log10(100) AS log10
         )AS p
GO

SELECT * FROM test_log
GO
~~START~~
float#!#float#!#float
1.6094379124341005#!#2.0#!#2.0
~~END~~


SELECT TABLE_CATALOG, TABLE_NAME, COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE table_name = 'test_log'
GO
~~START~~
nvarchar#!#nvarchar#!#nvarchar#!#nvarchar
master#!#test_log#!#log#!#float
master#!#test_log#!#log_2args#!#float
master#!#test_log#!#log10#!#float
~~END~~


-- test natural log with zero/negtive value/postive value/float value
SELECT log(0)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot take logarithm of zero)~~


SELECT log(1)
GO
~~START~~
float
0.0
~~END~~


SELECT log(-1)
GO
~~ERROR (Code: 3623)~~

~~ERROR (Message: cannot take logarithm of a negative number)~~


SELECT log(5)
GO
~~START~~
float
1.6094379124341005
~~END~~


SELECT log(5.5)
GO
~~START~~
float
1.7047480922384253
~~END~~


-- test log with base argument
SELECT log(-2, 2)
GO
~~ERROR (Code: 3623)~~

~~ERROR (Message: cannot take logarithm of a negative number)~~


SELECT log(0, 2)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot take logarithm of zero)~~


SELECT log(1, 2)
GO
~~START~~
float
0.0
~~END~~


SELECT log(8, 2)
GO
~~START~~
float
3.0
~~END~~


SELECT log(8.5, 2)
GO
~~START~~
float
3.0874628412503395
~~END~~


SELECT log(1, 10)
GO
~~START~~
float
0.0
~~END~~


SELECT log(10, 10)
GO
~~START~~
float
1.0
~~END~~


SELECT log(100, 10)
GO
~~START~~
float
2.0
~~END~~


SELECT log(100.10, 10)
GO
~~START~~
float
2.000434077479319
~~END~~


SELECT log(-8, -2)
GO
~~ERROR (Code: 3623)~~

~~ERROR (Message: cannot take logarithm of a negative number)~~


SELECT log(-8, 0)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot take logarithm of zero)~~


-- test log10 with zero/negtive value/postive value/float value
SELECT log10(0)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot take logarithm of zero)~~


SELECT log10(1)
GO
~~START~~
float
0.0
~~END~~


SELECT log10(-1)
GO
~~ERROR (Code: 3623)~~

~~ERROR (Message: cannot take logarithm of a negative number)~~


SELECT log10(5)
GO
~~START~~
float
0.6989700043360187
~~END~~


SELECT log10(5.5)
GO
~~START~~
float
0.7403626894942438
~~END~~


SELECT log10(100)
GO
~~START~~
float
2.0
~~END~~


-- test user defined function with log function
SELECT TestLogFunction(5)
GO
~~START~~
float
1.6094379124341005
~~END~~


SELECT TestLogFunctionWithBase(100, 10)
GO
~~START~~
float
2.0
~~END~~


SELECT TestLog10Function(100)
GO
~~START~~
float
2.0
~~END~~


-- test user defined procedure with log function
EXECUTE TestLogProcedure 5
GO
~~START~~
float
1.6094379124341005
~~END~~


EXECUTE TestLogProcedureWithBase 100, 10
GO
~~START~~
float
2.0
~~END~~


EXECUTE TestLog10Procedure 100
GO
~~START~~
float
2.0
~~END~~



-- test string value as input argument of log functions (implicit casting)
SELECT log('5')
GO
~~START~~
float
1.6094379124341005
~~END~~


SELECT log('100', '10')
GO
~~START~~
float
2.0
~~END~~


SELECT log10('100')
GO
~~START~~
float
2.0
~~END~~


-- test variable with log function
DECLARE @num INT = 5
SELECT log(@num)
GO
~~START~~
float
1.6094379124341005
~~END~~


DECLARE @num INT = 100
DECLARE @num2 INT = 10
SELECT log(@num, @num2)
GO
~~START~~
float
2.0
~~END~~


DECLARE @num INT = 100
SELECT log10(@num)
GO
~~START~~
float
2.0
~~END~~


DECLARE @strVar VARCHAR(10) = '5'
SELECT log(@strVar)
GO
~~START~~
float
1.6094379124341005
~~END~~


DECLARE @strVar VARCHAR(10) = '100'
DECLARE @strVar2 VARCHAR(10) = '10'
SELECT log(@strVar, @strVar2)
GO
~~START~~
float
2.0
~~END~~


DECLARE @strVar VARCHAR(10) = '100'
SELECT log10(@strVar)
GO
~~START~~
float
2.0
~~END~~

