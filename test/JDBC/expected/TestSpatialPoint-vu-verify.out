DECLARE @point geometry;
SET @point = geometry::STPointFromText('POINT(-122.34900 47.65100)', 4326);
SELECT STAsText(@point);
SELECT @point.STAsText();
Go
~~START~~
text
POINT(-122.349 47.651)
~~END~~

~~START~~
text
POINT(-122.349 47.651)
~~END~~


DECLARE @point geometry;
SET @point = geometry::POINT(22.34900, -47.65100, 4326);
SELECT STAsText(@point);
SELECT @point.STAsText();
Go
~~START~~
text
POINT(22.349 -47.651)
~~END~~

~~START~~
text
POINT(22.349 -47.651)
~~END~~


DECLARE @point geometry;
SET @point = geometry::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
SELECT stx(@point);
SELECT sty(@point);
SELECT @point.stx;
SELECT @point.sty;
Go
~~START~~
float
-122.349
~~END~~

~~START~~
float
47.651
~~END~~

~~START~~
float
-122.349
~~END~~

~~START~~
float
47.651
~~END~~


DECLARE @point geometry;
SET @point = geometry::POINT(22.34900, -47.65100, 4326);
SELECT stx(@point);
SELECT sty(@point);
SELECT @point.stx;
SELECT @point.sty;
Go
~~START~~
float
22.349
~~END~~

~~START~~
float
-47.651
~~END~~

~~START~~
float
22.349
~~END~~

~~START~~
float
-47.651
~~END~~


DECLARE @point1 geometry, @point2 geometry;
SET @point1 = geometry::STPointFromText('POINT(-122.34900 47.65100)', 4326);
SET @point2 = geometry::STGeomFromText('POINT(-122.35000 47.65000)', 4326);
SELECT STDistance(@point1, @point2);
SELECT @point1.STDistance(@point2);
Go
~~START~~
float
0.0014142135623697993
~~END~~

~~START~~
float
0.0014142135623697993
~~END~~


DECLARE @point geometry;
SET @point = geometry::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
Insert INTO SPATIALPOINTGEOM_dt(location) VALUES(geometry::point(@point.STX, @point.STY,4326))
go
~~ROW COUNT: 1~~


-- Currently it is not supported
-- TODO: Need to support it and make it similar to TSQL
DECLARE @STX geometry;
SET @STX = geometry::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
select geometry::Point(@STX.STX, @STX.STY, 4326).STX, geometry::Point(@STX.STX, @STX.STY, 4326).STY;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error at or near ".")~~


-- Currently it is not supported
-- TODO: Need to support it and make it similar to TSQL
DECLARE @STX geometry;
SET @STX = geometry::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
select geometry::Point(@STX.STX, @STX.STY, 4326).STAsText(), geometry::Point(@STX.STX, @STX.STY, 4326).STAsBinary(), geometry::Point(@STX.STX, @STX.STY, 4326).STDistance(geometry::Point(@STX.STX, @STX.STY, 4326));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error at or near ".")~~


-- Null test for Geospatial functions
DECLARE @point1 geometry, @point2 geometry, @point3 geometry;
SET @point1 = geometry::STPointFromText(null, 4326);
SET @point2 = geometry::STGeomFromText(null, 4326);
SET @point3 = geometry::POINT(22.34900, -47.65100, 4326);
SELECT @point1.STX;
SELECT @point1.STY;
SELECT @point1.STAsText();
SELECT @point1.STAsBinary();
SELECT @point1.STDistance(@point2);
SELECT @point3.STDistance(@point2);
SELECT @point1.STDistance(@point3);
Go
~~START~~
float
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~

~~START~~
text
<NULL>
~~END~~

~~START~~
varbinary
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~


-- Negative test for Geospatial functions
DECLARE @point1 geometry, @point2 varchar(50), @point3 int;
SET @point1 = geometry::POINT(22.34900, -47.65100, 4326);;
SET @point2 = 'Test_String';
SELECT @point1.STDistance(@point2);
Go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: parse error - invalid geometry)~~


SELECT location.LAT from SPATIALPOINTGEOM_dt;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function sys.lat(geometry) does not exist)~~


SELECT * FROM GeomView;
GO
~~START~~
float#!#float
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
<NULL>#!#<NULL>
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
-122.349#!#47.651
~~END~~


SELECT * FROM ValFromGeom;
GO
~~START~~
text#!#varbinary
POINT(47.651 -22.349)#!#010100000017D9CEF753D34740D34D6210585936C0
POINT(1 2)#!#0101000000000000000000F03F0000000000000040
POINT(47.651 -22.349)#!#010100000017D9CEF753D34740D34D6210585936C0
<NULL>#!#<NULL>
POINT(47.651 -22.349)#!#010100000017D9CEF753D34740D34D6210585936C0
POINT(1 2)#!#0101000000000000000000F03F0000000000000040
POINT(47.651 -22.349)#!#010100000017D9CEF753D34740D34D6210585936C0
POINT(47.651 -22.349)#!#010100000017D9CEF753D34740D34D6210585936C0
POINT(1 2)#!#0101000000000000000000F03F0000000000000040
POINT(47.651 -22.349)#!#010100000017D9CEF753D34740D34D6210585936C0
POINT(-122.349 47.651)#!#01010000007593180456965EC017D9CEF753D34740
~~END~~


EXEC dbo.p_getcoordinates;
GO
~~ROW COUNT: 11~~

~~START~~
float#!#float
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
<NULL>#!#<NULL>
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
-122.349#!#47.651
~~END~~


SELECT * FROM TextFromGeom;
GO
~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
<NULL>
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
POINT(-122.349 47.651)
~~END~~


SELECT * FROM BinaryFromGeom;
GO
~~START~~
varbinary
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
<NULL>
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
01010000007593180456965EC017D9CEF753D34740
~~END~~


SELECT * FROM CoordsFromGeom;
GO
~~START~~
float#!#float
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
<NULL>#!#<NULL>
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
-122.349#!#47.651
~~END~~


SELECT * FROM equal_geom;
GO
~~START~~
geometry
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C000000000000F03F0000000000000040
E6100000010C000000000000F03F0000000000000040
E6100000010C000000000000F03F0000000000000040
00000000010C17D9CEF753D34740D34D6210585936C0
00000000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C000000000000F03F0000000000000040
E6100000010C000000000000F03F0000000000000040
E6100000010C000000000000F03F0000000000000040
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C000000000000F03F0000000000000040
E6100000010C000000000000F03F0000000000000040
E6100000010C000000000000F03F0000000000000040
00000000010C17D9CEF753D34740D34D6210585936C0
00000000010C17D9CEF753D34740D34D6210585936C0
E6100000010C7593180456965EC017D9CEF753D34740
~~END~~


SELECT * FROM point_distances_geom;
GO
~~START~~
geometry#!#geometry#!#float
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010C000000000000F03F0000000000000040#!#52.62309000809436
~~ERROR (Code: 33557097)~~

~~ERROR (Message: ST_Distance: Operation on mixed SRID geometries (Point, 4326) != (Point, 0))~~


SELECT location.STX from SPATIALPOINTGEOM_dt;
GO
~~START~~
float
47.651
1.0
47.651
<NULL>
47.651
1.0
47.651
47.651
1.0
47.651
-122.349
~~END~~


SELECT SPATIALPOINTGEOM_dt.location.STY from SPATIALPOINTGEOM_dt;
GO
~~START~~
float
-22.349
2.0
-22.349
<NULL>
-22.349
2.0
-22.349
-22.349
2.0
-22.349
47.651
~~END~~


SELECT location.STAsText() from SPATIALPOINTGEOM_dt;
GO
~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
<NULL>
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
POINT(-122.349 47.651)
~~END~~


SELECT location.STAsBinary() from SPATIALPOINTGEOM_dt;
GO
~~START~~
varbinary
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
<NULL>
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
01010000007593180456965EC017D9CEF753D34740
~~END~~


SELECT location.STDistance(geometry::STGeomFromText('POINT(-122.34900 47.65100)', 4326)) from SPATIALPOINTGEOM_dt;
GO
~~START~~
float
183.84776310850236
131.52562336670374
~~ERROR (Code: 33557097)~~

~~ERROR (Message: ST_Distance: Operation on mixed SRID geometries (Point, 0) != (Point, 4326))~~


SELECT [SPATIALPOINTGEOM_dt].[location].[STX] from [SPATIALPOINTGEOM_dt];
GO
~~START~~
float
47.651
1.0
47.651
<NULL>
47.651
1.0
47.651
47.651
1.0
47.651
-122.349
~~END~~


SELECT [location].[STY] from [SPATIALPOINTGEOM_dt];
GO
~~START~~
float
-22.349
2.0
-22.349
<NULL>
-22.349
2.0
-22.349
-22.349
2.0
-22.349
47.651
~~END~~


SELECT location FROM SPATIALPOINTGEOM_dt; 
GO
~~START~~
geometry
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C000000000000F03F0000000000000040
00000000010C17D9CEF753D34740D34D6210585936C0
<NULL>
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C000000000000F03F0000000000000040
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C000000000000F03F0000000000000040
00000000010C17D9CEF753D34740D34D6210585936C0
E6100000010C7593180456965EC017D9CEF753D34740
~~END~~


-- Create Type Test Case currently Babelfish supports it but TSQL doesn't for spatial Types, Although it doesn't break anything
-- TODO: Make it similar to T-SQL
SELECT * FROM TypeTable;
GO
~~START~~
int#!#geometry
1#!#E6100000010C000000000000F03F0000000000000040
~~END~~


SELECT * FROM GeomToVarbinary;
GO
~~START~~
varbinary
~~END~~

SELECT * FROM GeomTochar;
GO
~~START~~
char
~~END~~

SELECT * FROM GeomToVarchar;
GO
~~START~~
varchar
~~END~~

SELECT * FROM TypeToGeom;
GO
~~START~~
geometry
E6100000010C17D9CEF753D34740D34D6210585936C0
00000000010C000000000000F03F0000000000000040
00000000010C000000000000F03F0000000000000040
~~END~~


-- Testing Explicit CASTs to and from Geometry data type
-- Supported CASTs to and from Geometry data type
Select CAST(CAST (0xE6100000010C17D9CEF753D34740D34D6210585936C0 AS binary) as geometry)
GO
~~START~~
geometry
E6100000010C17D9CEF753D34740D34D6210585936C0
~~END~~

Select CAST(CAST (0xE6100000010C17D9CEF753D34740D34D6210585936C0 AS varbinary(MAX)) as geometry)
GO
~~START~~
geometry
E6100000010C17D9CEF753D34740D34D6210585936C0
~~END~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS varbinary(MAX))
GO
~~START~~
varbinary
E6100000010C000000000000F03F0000000000000040
~~END~~

Select CAST(CAST ('POINT(1 2)' AS char) as geometry)
GO
~~START~~
geometry
00000000010C000000000000F03F0000000000000040
~~END~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS char)
GO
~~START~~
char
POINT(1 2)                    
~~END~~

Select CAST(CAST ('POINT(1 2)' AS nchar) as geometry)
GO
~~START~~
geometry
00000000010C000000000000F03F0000000000000040
~~END~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS nchar)
GO
~~START~~
nchar
POINT(1 2)                    
~~END~~

Select CAST(CAST ('POINT(1 2)' AS varchar) as geometry)
GO
~~START~~
geometry
00000000010C000000000000F03F0000000000000040
~~END~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS varchar)
GO
~~START~~
varchar
POINT(1 2)
~~END~~

Select CAST(CAST ('POINT(1 2)' AS nvarchar) as geometry)
GO
~~START~~
geometry
00000000010C000000000000F03F0000000000000040
~~END~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS nvarchar)
GO
~~START~~
nvarchar
POINT(1 2)
~~END~~


-- UnSupported CASTs to and from Geometry data type
Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS datetime)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to datetime)~~

Select CAST(CAST (0001-01-01 AS datetime) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type datetime to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS decimal)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to "decimal")~~

Select CAST(CAST (20.0 AS decimal) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type "decimal" to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS bigInt)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to bigint)~~

Select CAST(CAST (20 AS bigInt) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type bigint to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS bigInt)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to bigint)~~

Select CAST(CAST (20 AS bigInt) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type bigint to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS money)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to money)~~

Select CAST(CAST ($1 AS money) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type money to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS bit)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to "bit")~~

Select CAST(CAST (1 AS bit) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type "bit" to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS uniqueidentifier)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to uniqueidentifier)~~

Select CAST(CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS uniqueidentifier) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type uniqueidentifier to geometry)~~

Select CAST(CAST ('POINT(1 2)' AS text) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Explicit Conversion from data type Text to sys.Geometry is not allowed.)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS text)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Explicit Conversion from data type sys.Geometry to Text is not allowed.)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS sql_variant)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to sql_variant)~~

Select CAST(CAST ('POINT(1 2)' AS sql_variant) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type sql_variant to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS xml)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to xml)~~

Select CAST(CAST ('<head>point(1 2)</head>' AS xml) as geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type xml to geometry)~~

Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geometry to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS geometry)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to geometry)~~


-- UnSupported CASTs which are currently supported for geometry
-- This is because Image type is created as -> CREATE DOMAIN sys.IMAGE AS sys.BBF_VARBINARY; so it is always converted to it's baseType i.e. varbinary
Select CAST (geometry::STGeomFromText('POINT(1.0 2.0)', 4326) AS image)
GO
~~START~~
image
E6100000010C000000000000F03F0000000000000040
~~END~~

Select CAST(CAST (0xE6100000010C17D9CEF753D34740D34D6210585936C0 AS image) as geometry)
GO
~~START~~
geometry
E6100000010C17D9CEF753D34740D34D6210585936C0
~~END~~


DECLARE @point geography;
SET @point = geography::STGeomFromText('POINT(-122.34900 47.65100)', 4326);
SELECT STAsText(@point);
SELECT @point.STAsText();
Go
~~START~~
text
POINT(-122.349 47.651)
~~END~~

~~START~~
text
POINT(-122.349 47.651)
~~END~~


DECLARE @point geography;
SET @point = geography::POINT(22.34900, -47.65100, 4326);
SELECT STAsText(@point);
SELECT @point.STAsText();
Go
~~START~~
text
POINT(-47.651 22.349)
~~END~~

~~START~~
text
POINT(-47.651 22.349)
~~END~~


DECLARE @point geography;
SET @point = geography::STPointFromText('POINT(-122.34900 47.65100)', 4326);
SELECT long(@point);
SELECT lat(@point);
SELECT @point.long;
SELECT @point.lat;
Go
~~START~~
float
-122.349
~~END~~

~~START~~
float
47.651
~~END~~

~~START~~
float
-122.349
~~END~~

~~START~~
float
47.651
~~END~~


DECLARE @point geography;
SET @point = geography::POINT(22.34900, -47.65100, 4326);
SELECT long(@point);
SELECT lat(@point);
SELECT @point.long;
SELECT @point.lat;
Go
~~START~~
float
-47.651
~~END~~

~~START~~
float
22.349
~~END~~

~~START~~
float
-47.651
~~END~~

~~START~~
float
22.349
~~END~~


DECLARE @point1 geography, @point2 geography;
SET @point1 = geography::STPointFromText('POINT(-122.34900 47.65100)', 4326);
SET @point2 = geography::STGeomFromText('POINT(-122.35000 47.65000)', 4326);
SELECT STDistance(@point1, @point2);
SELECT @point1.STDistance(@point2);
Go
~~START~~
float
134.1864008701007
~~END~~

~~START~~
float
134.1864008701007
~~END~~


DECLARE @point geography;
SET @point = geography::STGeomFromText('POINT(-22.34900 47.65100)', 4326);
Insert INTO SPATIALPOINTGEOG_dt(location) VALUES(geography::point(@point.LONG, @point.LAT, 4326))
go
~~ROW COUNT: 1~~


-- Currently it is not supported
-- TODO: Need to support it and make it similar to TSQL
DECLARE @LAT geography;
SET @LAT = geography::STGeomFromText('POINT(-22.34900 47.65100)', 4326);
select geography::Point(@LAT.LONG, @LAT.LAT, 4326).LONG, geography::Point(@LAT.LONG, @LAT.LAT, 4326).LAT;
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error at or near ".")~~


-- Currently it is not supported
-- TODO: Need to support it and make it similar to TSQL
DECLARE @LAT geography;
SET @LAT = geography::STGeomFromText('POINT(-22.34900 47.65100)', 4326);
select geography::Point(@LAT.LONG, @LAT.LAT, 4326).STAsText(), geography::Point(@LAT.LONG, @LAT.LAT, 4326).STAsBinary(), geography::Point(@LAT.LONG, @LAT.LAT, 4326).STDistance(geography::Point(@LAT.LONG, @LAT.LAT, 4326));
go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: syntax error at or near ".")~~


SELECT
    SpatialData.ID,
    SPATIALPOINTGEOG_dt.location.LAT,
    SpatialLocation.STDistance(SPATIALPOINTGEOG_dt.location)
FROM
    SpatialData
JOIN
    SPATIALPOINTGEOG_dt ON SPATIALPOINTGEOG_dt.location.long - SpatialData.SpatialLocation.lat <= 10;
GO
~~START~~
int#!#float#!#float
1#!#2.0#!#156876.14940188668
2#!#2.0#!#351485.0664919168
3#!#2.0#!#647017.0083805197
4#!#2.0#!#953316.5401136167
5#!#2.0#!#1261960.137843746
1#!#2.0#!#156876.14940188668
2#!#2.0#!#351485.0664919168
3#!#2.0#!#647017.0083805197
4#!#2.0#!#953316.5401136167
5#!#2.0#!#1261960.137843746
1#!#47.651#!#5678803.288585193
2#!#47.651#!#5557193.284430087
3#!#47.651#!#5446042.320579326
4#!#47.651#!#5345543.26741007
5#!#47.651#!#5255813.671417903
1#!#2.0#!#156876.14940188668
2#!#2.0#!#351485.0664919168
3#!#2.0#!#647017.0083805197
4#!#2.0#!#953316.5401136167
5#!#2.0#!#1261960.137843746
~~END~~


WITH RegionLocations AS (
    SELECT
        SpatialData.ID,
        SPATIALPOINTGEOG_dt.location.LAT
    FROM
        SpatialData
    JOIN
        SPATIALPOINTGEOG_dt ON SPATIALPOINTGEOG_dt.location.long - SpatialData.SpatialLocation.lat <= 10
)
SELECT
    lat,
    COUNT(ID) AS LocationCount
FROM
    RegionLocations
GROUP BY
    lat;
GO
~~START~~
float#!#int
47.651#!#5
2.0#!#15
~~END~~


-- Test with CTE
with mycte (a)
as (select SPATIALPOINTGEOG_dt.location from SPATIALPOINTGEOG_dt)
select a.STAsText()
				from mycte x inner join SPATIALPOINTGEOG_dt y on x.a.lat >= y.location.long;
go
~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(47.651 -22.349)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(47.651 -22.349)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(47.651 -22.349)
~~END~~


-- Test with tvf
select f.STAsText()
                from testspatial_tvf(1) f inner join SPATIALPOINTGEOG_dt t on f.location.lat >= t.location.long;
go
~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(47.651 -22.349)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(-22.349 47.651)
POINT(47.651 -22.349)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(1 2)
POINT(47.651 -22.349)
~~END~~


-- Null test for Geospatial functions
DECLARE @point1 geography, @point2 geography, @point3 geography;
SET @point1 = geography::STPointFromText(null, 4326);
SET @point2 = geography::STGeomFromText(null, 4326);
SET @point3 = geography::POINT(22.34900, -47.65100, 4326);
SELECT @point1.LONG;
SELECT @point1.LAT;
SELECT @point1.STAsText();
SELECT @point1.STAsBinary();
SELECT @point1.STDistance(@point2);
SELECT @point3.STDistance(@point2);
SELECT @point1.STDistance(@point3);
Go
~~START~~
float
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~

~~START~~
text
<NULL>
~~END~~

~~START~~
varbinary
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~

~~START~~
float
<NULL>
~~END~~


-- Negative test for Geospatial functions
DECLARE @point1 geography, @point2 varchar(50), @point3 int;
SET @point1 = geography::POINT(22.34900, -47.65100, 4326);
SET @point2 = 'Test_String';
SELECT @point2.STDistance(@point1);
Go
~~ERROR (Code: 33557097)~~

~~ERROR (Message: parse error - invalid geometry)~~


SELECT location.STY from SPATIALPOINTGEOG_dt;
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: function sys.sty(geography) does not exist)~~


SELECT * FROM GeogView;
GO
~~START~~
float#!#float
47.651#!#-22.349
1.0#!#2.0
<NULL>#!#<NULL>
47.651#!#-22.349
1.0#!#2.0
-22.349#!#47.651
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
~~END~~


EXEC dbo.proc_getdata;
GO
~~ROW COUNT: 9~~

~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
<NULL>
POINT(47.651 -22.349)
POINT(1 2)
POINT(-22.349 47.651)
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
~~END~~


SELECT * FROM TextFromGeog;
GO
~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
<NULL>
POINT(47.651 -22.349)
POINT(1 2)
POINT(-22.349 47.651)
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
~~END~~


SELECT * FROM BinaryFromGeog;
GO
~~START~~
varbinary
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
<NULL>
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
0101000000D34D6210585936C017D9CEF753D34740
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
~~END~~


SELECT * FROM CoordsFromGeog;
GO
~~START~~
float#!#float
47.651#!#-22.349
1.0#!#2.0
<NULL>#!#<NULL>
47.651#!#-22.349
1.0#!#2.0
-22.349#!#47.651
47.651#!#-22.349
1.0#!#2.0
47.651#!#-22.349
~~END~~


SELECT * FROM TransformFromGeog;
GO
~~START~~
geography
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
<NULL>
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010CD34D6210585936C017D9CEF753D34740
~~END~~


SELECT * FROM equal_geog;
GO
~~START~~
geography
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010CD34D6210585936C017D9CEF753D34740
~~END~~


SELECT * FROM point_distances_geog;
GO
~~START~~
geography#!#geography#!#float
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#1.04243622548279E7
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#5535965.307328846
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#1.04243622548279E7
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#5535965.307328846
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#1.04243622548279E7
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010C0000000000000040000000000000F03F#!#5535965.307328846
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#1.04243622548279E7
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010C0000000000000040000000000000F03F#!#5535965.307328846
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#1.04243622548279E7
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010C0000000000000040000000000000F03F#!#5535965.307328846
E6100000010C17D9CEF753D34740D34D6210585936C0#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#1.04243622548279E7
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#1.04243622548279E7
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#5535965.307328846
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010C0000000000000040000000000000F03F#!#E6100000010CD34D6210585936C017D9CEF753D34740#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#1.04243622548279E7
E6100000010CD34D6210585936C017D9CEF753D34740#!#E6100000010C0000000000000040000000000000F03F#!#5736178.674863189
~~END~~


SELECT location.LAT from SPATIALPOINTGEOG_dt;
GO
~~START~~
float
-22.349
2.0
<NULL>
-22.349
2.0
47.651
-22.349
2.0
-22.349
~~END~~


SELECT SPATIALPOINTGEOG_dt.location.LONG from SPATIALPOINTGEOG_dt;
GO
~~START~~
float
47.651
1.0
<NULL>
47.651
1.0
-22.349
47.651
1.0
47.651
~~END~~


SELECT location.STAsText() from SPATIALPOINTGEOG_dt;
GO
~~START~~
text
POINT(47.651 -22.349)
POINT(1 2)
<NULL>
POINT(47.651 -22.349)
POINT(1 2)
POINT(-22.349 47.651)
POINT(47.651 -22.349)
POINT(1 2)
POINT(47.651 -22.349)
~~END~~


SELECT location.STAsBinary() from SPATIALPOINTGEOG_dt;
GO
~~START~~
varbinary
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
<NULL>
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
0101000000D34D6210585936C017D9CEF753D34740
010100000017D9CEF753D34740D34D6210585936C0
0101000000000000000000F03F0000000000000040
010100000017D9CEF753D34740D34D6210585936C0
~~END~~


SELECT location.STDistance(geography::STGeomFromText('POINT(-122.34900 47.65100)', 4326)) from SPATIALPOINTGEOG_dt;
GO
~~START~~
float
1.7059874617785625E7
1.2255731559616795E7
<NULL>
1.7059874617785625E7
1.2255731559616795E7
6929242.948674276
1.7059874617785625E7
1.2255731559616795E7
1.7059874617785625E7
~~END~~


SELECT [SPATIALPOINTGEOG_dt].[location].[LONG] from [SPATIALPOINTGEOG_dt];
GO
~~START~~
float
47.651
1.0
<NULL>
47.651
1.0
-22.349
47.651
1.0
47.651
~~END~~


SELECT [location].[LAT] from [SPATIALPOINTGEOG_dt];
GO
~~START~~
float
-22.349
2.0
<NULL>
-22.349
2.0
47.651
-22.349
2.0
-22.349
~~END~~


SELECT location FROM SPATIALPOINTGEOG_dt;
GO
~~START~~
geography
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
<NULL>
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010CD34D6210585936C017D9CEF753D34740
E6100000010C0000000000000040000000000000F03F
E6100000010CD34D6210585936C017D9CEF753D34740
~~END~~


SELECT * FROM GeogToVarbinary;
GO
~~START~~
varbinary
~~END~~

SELECT * FROM GeogTochar;
GO
~~START~~
char
~~END~~

SELECT * FROM GeogToVarchar;
GO
~~START~~
varchar
~~END~~

SELECT * FROM TypeToGeog;
GO
~~START~~
geography
E6100000010C17D9CEF753D34740D34D6210585936C0
E6100000010C0000000000000040000000000000F03F
E6100000010C0000000000000040000000000000F03F
~~END~~


-- Testing Explicit CASTs to and from Geography data type
-- Supported CASTs to and from Geography data type
Select CAST(CAST (0xE6100000010C17D9CEF753D34740D34D6210585936C0 AS binary) as geography)
GO
~~START~~
geography
E6100000010C17D9CEF753D34740D34D6210585936C0
~~END~~

Select CAST(CAST (0xE6100000010C17D9CEF753D34740D34D6210585936C0 AS varbinary(MAX)) as geography)
GO
~~START~~
geography
E6100000010C17D9CEF753D34740D34D6210585936C0
~~END~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS varbinary(MAX))
GO
~~START~~
varbinary
E6100000010C0000000000000040000000000000F03F
~~END~~

Select CAST(CAST ('POINT(1 2)' AS char) as geography)
GO
~~START~~
geography
E6100000010C0000000000000040000000000000F03F
~~END~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS char)
GO
~~START~~
char
POINT(1 2)                    
~~END~~

Select CAST(CAST ('POINT(1 2)' AS nchar) as geography)
GO
~~START~~
geography
E6100000010C0000000000000040000000000000F03F
~~END~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS nchar)
GO
~~START~~
nchar
POINT(1 2)                    
~~END~~

Select CAST(CAST ('POINT(1 2)' AS varchar) as geography)
GO
~~START~~
geography
E6100000010C0000000000000040000000000000F03F
~~END~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS varchar)
GO
~~START~~
varchar
POINT(1 2)
~~END~~

Select CAST(CAST ('POINT(1 2)' AS nvarchar) as geography)
GO
~~START~~
geography
E6100000010C0000000000000040000000000000F03F
~~END~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS nvarchar)
GO
~~START~~
nvarchar
POINT(1 2)
~~END~~


-- UnSupported CASTs to and from Geography data type
Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS datetime)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to datetime)~~

Select CAST(CAST (0001-01-01 AS datetime) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type datetime to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS decimal)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to "decimal")~~

Select CAST(CAST (20.0 AS decimal) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type "decimal" to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS bigInt)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to bigint)~~

Select CAST(CAST (20 AS bigInt) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type bigint to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS bigInt)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to bigint)~~

Select CAST(CAST (20 AS bigInt) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type bigint to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS money)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to money)~~

Select CAST(CAST ($1 AS money) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type money to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS bit)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to "bit")~~

Select CAST(CAST (1 AS bit) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type "bit" to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS uniqueidentifier)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to uniqueidentifier)~~

Select CAST(CAST ('6F9619FF-8B86-D011-B42D-00C04FC964FF' AS uniqueidentifier) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type uniqueidentifier to geography)~~

Select CAST(CAST ('POINT(1 2)' AS text) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Explicit Conversion from data type Text to sys.Geography is not allowed.)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS text)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: Explicit Conversion from data type sys.Geography to Text is not allowed.)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS sql_variant)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to sql_variant)~~

Select CAST(CAST ('POINT(1 2)' AS sql_variant) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type sql_variant to geography)~~

Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS xml)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type geography to xml)~~

Select CAST(CAST ('<head>point(1 2)</head>' AS xml) as geography)
GO
~~ERROR (Code: 33557097)~~

~~ERROR (Message: cannot cast type xml to geography)~~


-- UnSupported CASTs which are currently supported for geography
-- This is because Image type is created as -> CREATE DOMAIN sys.IMAGE AS sys.BBF_VARBINARY; so it is always converted to it's baseType i.e. varbinary
Select CAST (geography::STGeomFromText('POINT(1.0 2.0)', 4326) AS image)
GO
~~START~~
image
E6100000010C0000000000000040000000000000F03F
~~END~~

Select CAST(CAST (0xE6100000010C17D9CEF753D34740D34D6210585936C0 AS image) as geography)
GO
~~START~~
geography
E6100000010C17D9CEF753D34740D34D6210585936C0
~~END~~


SELECT
    GeomColumn.STX AS XCoordinate,
    GeomColumn.STY AS YCoordinate,
    PrimaryKey,
    GeogColumn.STDistance(geography::Point(7, 8, 4326)) AS DistanceToFixedPoint
FROM
    SPATIALPOINT_dt;
GO
~~START~~
float#!#float#!#int#!#float
47.651#!#-22.349#!#1#!#<NULL>
<NULL>#!#<NULL>#!#2#!#5405374.929245813
1.0#!#2.0#!#3#!#953316.5401136167
47.651#!#-22.349#!#4#!#<NULL>
<NULL>#!#<NULL>#!#5#!#5405374.929245813
1.0#!#2.0#!#6#!#953316.5401136167
~~END~~


DECLARE @sql NVARCHAR(MAX);
SET @sql = 
    N'SELECT ' +
    N'GeomColumn.STX AS XCoordinate, ' +
    N'GeomColumn.STY AS YCoordinate, ' +
    N'PrimaryKey, ' +
    N'GeogColumn.STDistance(geography::Point(7, 8, 4326)) AS DistanceToFixedPoint ' +
    N'FROM SPATIALPOINT_dt';
    
-- Execute the dynamic SQL
EXEC sp_executesql @sql;
GO
~~START~~
float#!#float#!#int#!#float
47.651#!#-22.349#!#1#!#<NULL>
<NULL>#!#<NULL>#!#2#!#5405374.929245813
1.0#!#2.0#!#3#!#953316.5401136167
47.651#!#-22.349#!#4#!#<NULL>
<NULL>#!#<NULL>#!#5#!#5405374.929245813
1.0#!#2.0#!#6#!#953316.5401136167
~~END~~


SELECT * FROM SPATIALPOINT_dt;
GO
~~START~~
int#!#geometry#!#geography
1#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#<NULL>
2#!#<NULL>#!#E6100000010CD34D6210585936C017D9CEF753D34740
3#!#E6100000010C000000000000F03F0000000000000040#!#E6100000010C0000000000000040000000000000F03F
4#!#E6100000010C17D9CEF753D34740D34D6210585936C0#!#<NULL>
5#!#<NULL>#!#E6100000010CD34D6210585936C017D9CEF753D34740
6#!#E6100000010C000000000000F03F0000000000000040#!#E6100000010C0000000000000040000000000000F03F
~~END~~


INSERT INTO babelfish_migration_mode_table SELECT current_setting('babelfishpg_tsql.migration_mode')
GO
~~ROW COUNT: 1~~


-- test multi-db mode
SELECT set_config('role', 'jdbc_user', false);
GO
~~START~~
text
jdbc_user
~~END~~

SELECT set_config('babelfishpg_tsql.migration_mode', 'multi-db', false);
GO
~~START~~
text
multi-db
~~END~~


CREATE DATABASE db1;
GO

CREATE DATABASE db2;
GO

USE db1;
GO

CREATE TABLE SpatialData
(
    SpatialPoint GEOMETRY,
    PrimaryKey INT
);
GO

INSERT INTO SpatialData (SpatialPoint, PrimaryKey)
VALUES
    (geometry::Point(1, 2, 0), 1),
    (geometry::Point(3, 4, 0), 2),
    (geometry::Point(5, 6, 0), 3);
GO
~~ROW COUNT: 3~~


USE db2;
GO

CREATE TABLE SpatialData
(
    SpatialPoint GEOMETRY,
    PrimaryKey INT
);
GO

INSERT INTO SpatialData (SpatialPoint, PrimaryKey)
VALUES
    (geometry::Point(7, 8, 0), 4),
    (geometry::Point(9, 10, 0), 5),
    (geometry::Point(11, 12, 0), 6);
GO
~~ROW COUNT: 3~~


DECLARE @sql NVARCHAR(MAX);
SET @sql = 
    N'SELECT ' +
    N'[SpatialPoint].[STX] AS XCoordinate, ' +
    N'[SpatialPoint].[STY] AS YCoordinate, ' +
    N'[PrimaryKey] ' +
    N'FROM [db1].[dbo].[SpatialData] ' +
    N'UNION ALL ' +
    N'SELECT ' +
    N'[SpatialPoint].[STX] AS XCoordinate, ' +
    N'[SpatialPoint].[STY] AS YCoordinate, ' +
    N'[PrimaryKey] ' +
    N'FROM [db2].[dbo].[SpatialData]';
-- Execute the dynamic SQL
EXEC sp_executesql @sql;
GO
~~START~~
float#!#float#!#int
1.0#!#2.0#!#1
3.0#!#4.0#!#2
5.0#!#6.0#!#3
7.0#!#8.0#!#4
9.0#!#10.0#!#5
11.0#!#12.0#!#6
~~END~~


USE master
GO

DROP DATABASE db1;
GO

DROP DATABASE db2;
GO

SELECT set_config('role', 'jdbc_user', false);
GO
~~START~~
text
jdbc_user
~~END~~


-- Reset migration mode to default
DECLARE @mig_mode VARCHAR(10)
SET @mig_mode = (SELECT mig_mode FROM babelfish_migration_mode_table WHERE id_num = 1)
SELECT CASE WHEN (SELECT set_config('babelfishpg_tsql.migration_mode', @mig_mode, false)) IS NOT NULL THEN 1 ELSE 0 END
GO
~~START~~
int
1
~~END~~

