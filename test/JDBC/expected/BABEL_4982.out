-- psql
CREATE SCHEMA s1
GO

CREATE TABLE s1.babel_4982_t (id VARCHAR(100))
GO



CREATE FUNCTION babel_4982_ddl_trigger()
RETURNS event_trigger AS
$$
BEGIN
INSERT INTO babel_4982_t VALUES (current_setting('search_path'));
END;
$$
SECURITY DEFINER
SET search_path = s1, pg_catalog, pg_temp
LANGUAGE plpgsql;
CREATE EVENT TRIGGER babel_4982_ddl_trigger
	ON ddl_command_end
	EXECUTE PROCEDURE babel_4982_ddl_trigger();
SELECT set_config('search_path', 'master_dbo, sys, '||current_setting('search_path'), false);
GO
~~START~~
text
master_dbo, sys, "$user", public
~~END~~


SHOW search_path
GO
~~START~~
text
master_dbo, sys, "$user", public
~~END~~


CREATE TABLE babel_4982_t2 (id INT)
GO

SHOW search_path
GO
~~START~~
text
master_dbo, sys, "$user", public
~~END~~


BEGIN
GO

SHOW search_path
GO
~~START~~
text
master_dbo, sys, "$user", public
~~END~~


DROP TABLE babel_4982_t2
GO

SHOW search_path
GO
~~START~~
text
master_dbo, sys, "$user", public
~~END~~


COMMIT
GO

-- two entries since two DDLs after trigger was created
SELECT * FROM s1.babel_4982_t
GO
~~START~~
varchar
s1, pg_catalog, pg_temp
s1, pg_catalog, pg_temp
~~END~~


DROP EVENT TRIGGER babel_4982_ddl_trigger
GO

DROP FUNCTION babel_4982_ddl_trigger
GO

DROP TABLE s1.babel_4982_t
GO

DROP SCHEMA s1
GO
