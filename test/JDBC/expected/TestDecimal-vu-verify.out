SELECT * FROM testdecimal_table1;
~~START~~
numeric
3.00
123.46
123.40
123.00
123.45
<NULL>
-123.46
-123.40
-123.00
-1.00
-123.00
~~END~~


SELECT * FROM testdecimal_table2;
~~START~~
numeric
3.000
123.456
123.400
123.000
123.450
<NULL>
-123.456
-123.400
-123.000
-1.000
-123.000
2147483647.000
-2147483647.000
2147483646.000
-2147483646.000
2147483648.000
-2147483648.000
~~END~~


# JIRA 507, WORKING FOR BABEL
SELECT * FROM testdecimal_table3;
~~START~~
numeric
3.00000000000000000000
123.45600000000000000000
123.40000000000000000000
123.00000000000000000000
123.45000000000000000000
<NULL>
-123.45600000000000000000
-123.40000000000000000000
-123.00000000000000000000
-1.00000000000000000000
-123.00000000000000000000
2147483647.00000000000000000000
~~END~~


SELECT * FROM testdecimal_table4;
~~START~~
numeric
3.00000000000000000000
123.45600000000000000000
123.40000000000000000000
123.00000000000000000000
123.45000000000000000000
<NULL>
-123.45600000000000000000
-123.40000000000000000000
-123.00000000000000000000
-1.00000000000000000000
-123.00000000000000000000
2147483647.00000000000000000000
~~END~~


SELECT * FROM testdecimal_table5;
~~START~~
numeric
3.000000000000000000000
123.456000000000000000000
123.400000000000000000000
123.000000000000000000000
123.450000000000000000000
<NULL>
-123.456000000000000000000
-123.400000000000000000000
-123.000000000000000000000
-1.000000000000000000000
-123.000000000000000000000
2147483647.000000000000000000000
~~END~~


SELECT * FROM testdecimal_table6;
~~START~~
numeric
3.0000000000000000000000
123.4560000000000000000000
123.4000000000000000000000
123.0000000000000000000000
123.4500000000000000000000
<NULL>
-123.4560000000000000000000
-123.4000000000000000000000
-123.0000000000000000000000
-1.0000000000000000000000
-123.0000000000000000000000
2147483647.0000000000000000000000
~~END~~


SELECT * FROM testdecimal_table7;
~~START~~
numeric
3.00000000000000000000000
123.45600000000000000000000
123.40000000000000000000000
123.00000000000000000000000
123.45000000000000000000000
<NULL>
-123.45600000000000000000000
-123.40000000000000000000000
-123.00000000000000000000000
-1.00000000000000000000000
-123.00000000000000000000000
2147483647.00000000000000000000000
~~END~~


SELECT * FROM testdecimal_table8;
~~START~~
numeric
3.0000000000000000000000000
123.4560000000000000000000000
123.4000000000000000000000000
123.0000000000000000000000000
123.4500000000000000000000000
<NULL>
-123.4560000000000000000000000
-123.4000000000000000000000000
-123.0000000000000000000000000
-1.0000000000000000000000000
-123.0000000000000000000000000
247483647.0000000000000000000000000
-247483647.0000000000000000000000000
~~END~~


SELECT * FROM testdecimal_table9;
~~START~~
numeric
2147483647.0000000000000000000000000
-2147483647.0000000000000000000000000
2147483646.0000000000000000000000000
-2147483646.0000000000000000000000000
2147483648.0000000000000000000000000
-2147483648.0000000000000000000000000
0E-25
0E-25
0E-25
~~END~~


# BABEL-3074
SELECT count(*), sum(amount) FROM testdecimal_overflow_test1;
~~START~~
int#!#numeric
2#!#11000.00
~~END~~


# BABEL-3157
#testing default precision for both sum() and avg()
#o/p scale = 2 [i/p scale for sum()], o/p scale = 6 [max(6, i/p scale) for avg()]
With Top10 as (select top (10) * from testdecimal_overflow_test2) select sum(amount), avg(amount) from Top10;
~~START~~
numeric#!#numeric
99999.90#!#9999.990000
~~END~~

With Top11 as (select top (11) * from testdecimal_overflow_test2) select sum(amount), avg(amount) from Top11;
~~START~~
numeric#!#numeric
109999.89#!#9999.990000
~~END~~


#testing resultant scale when i/p scale > 6
#o/p scale = 8 [i/p scale for sum()], o/p scale = 8 [max(6, i/p scale) for avg()]
SELECT sum(amount) from testdecimal_overflow_test3;
~~START~~
numeric
100.24600000
~~END~~

SELECT avg(amount) from testdecimal_overflow_test3;
~~START~~
numeric
50.12300000
~~END~~


#o/p precision = 38, so sum() won't cause an overflow even when #output digits > input precision
SELECT sum(amount) from testdecimal_overflow_test4;
~~START~~
numeric
1000.24
~~END~~

SELECT avg(amount) from testdecimal_overflow_test4;
~~START~~
numeric
500.120000
~~END~~


select sum(amount1), sum(amount2), sum(amount3), avg(amount1), avg(amount2), avg(amount3) from testdecimal_overflow_test5;
~~START~~
numeric#!#numeric#!#numeric#!#numeric#!#numeric#!#numeric
219999.69#!#21999.978#!#21980.71604916#!#9999.985909#!#999.999000#!#999.12345678
~~END~~

With Top10 as (select top (10) * from testdecimal_overflow_test5) select sum(amount1), sum(amount2), sum(amount3), avg(amount1), avg(amount2), avg(amount3) from Top10;
~~START~~
numeric#!#numeric#!#numeric#!#numeric#!#numeric#!#numeric
99999.90#!#9999.990#!#9991.23456780#!#9999.990000#!#999.999000#!#999.12345678
~~END~~

With Top11 as (select top (11) * from testdecimal_overflow_test5) select sum(amount1), sum(amount2), sum(amount3), avg(amount1), avg(amount2), avg(amount3) from Top11;
~~START~~
numeric#!#numeric#!#numeric#!#numeric#!#numeric#!#numeric
109999.89#!#10999.989#!#10990.35802458#!#9999.990000#!#999.999000#!#999.12345678
~~END~~

