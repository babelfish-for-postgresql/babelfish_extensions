-- single_db_mode_expected
-- tsql
-- Error cases
create role db_datareader; -- Error, this role already exists
go

create role db_datawriter; -- Error, this role already exists
go

-- grants not allowed on these special roles
grant select on schema::dbo to db_datareader; -- Error, no grant on special roles
go

grant execute on schema::dbo to db_datawriter; -- Error, no grant on special roles
go

revoke select on schema::dbo from db_datareader; -- Error, no grant on special roles
go

revoke execute on schema::dbo from db_datawriter; -- Error, no grant on special roles
go

grant select on object::t1 to db_datareader; -- Error, no grant on special roles
go

grant insert on object::t1 to db_datawriter; -- Error, no grant on special roles
go

grant execute on object::t1 to db_datareader; -- Error, no grant on special roles
go

revoke select on object::t1 to db_datareader; -- Error, no grant on special roles
go

revoke insert on object::t1 to db_datawriter; -- Error, no grant on special roles
go

revoke execute on object::t1 to db_datareader; -- Error, no grant on special roles
go

drop role db_datareader; -- Error, should not be dropped
go

drop role db_datawriter; -- Error, should not be dropped
go

-- create login, user and add members
create database db_roles_db1;
go

use db_roles_db1;
go

create login db_roles_l1 with password = '123';
go

create login db_roles_l2 with password = '123';
go

create login db_roles_l3 with password = '123';
go

create login db_roles_l4 with password = '123';
go

create login db_roles_l5 with password = '123';
go

create user db_roles_u4 for login db_roles_l4;
go

create user db_roles_u5 for login db_roles_l5;
go

alter server role sysadmin add member db_roles_l2;
go

create user db_datareader for login db_roles_l1; -- Error, this role already exists
go

create user db_datawriter for login db_roles_l1; -- Error, this role already exists
go

create user db_roles_u1 for login db_roles_l1;
go

create role db_roles_r1;
go

alter role db_roles_r1 add member db_roles_u5;
go

create schema db_roles_schema_1;
go

create schema db_roles_schema_2 authorization db_roles_u4;
go

create table db_roles_schema_1.before_t1(a int);
go

create view db_roles_schema_1.before_v1 as select 2;
go

create table db_roles_schema_2.before_created_by_dbo_t1(a int);
go

create view db_roles_schema_2.before_created_by_dbo_v1 as select 2;
go

create table before_t1(a int);
go

create view before_v1 as select 2;
go

use master;
go

-- tsql user=db_roles_l4 password=123
use db_roles_db1;
go

create table db_roles_schema_2.before_created_by_u4_t1(a int);
go

create view db_roles_schema_2.before_created_by_u4_v1 as select 2;
go

use master;
go

-- tsql
use db_roles_db1
go

alter role db_datareader add member db_roles_u1;
go

alter role db_datawriter add member db_roles_u1;
go

alter role db_datareader add member db_roles_r1; 
go

alter role db_datawriter add member db_roles_r1; 
go

use master
go

-- tsql user=db_roles_l4 password=123
use db_roles_db1;
go

create table db_roles_schema_2.after_created_by_u4_t1(a int);
go

create view db_roles_schema_2.after_created_by_u4_v1 as select 1;
go

use master;
go

-- tsql
use db_roles_db1
go

create table after_t1(a int);
go

create view after_v1 as select 2;
go

create table db_roles_schema_1.after_t1(a int);
go

create view db_roles_schema_1.after_v1 as select 2;
go

create table db_roles_schema_2.after_created_by_dbo_t1(a int);
go

create view db_roles_schema_2.after_created_by_dbo_v1 as select 2;
go

use master;
go

-- tsql user=db_roles_l2 password=123
-- member of sysadmin can add/drop user as a member of db_datareader/db_datawriter
use db_roles_db1;
go

alter role db_datareader drop member db_roles_u1;
go

alter role db_datawriter drop member db_roles_u1;
go

alter role db_datareader add member db_roles_u1;
go

alter role db_datawriter add member db_roles_u1;
go

exec sp_droprolemember 'db_datareader', 'db_roles_u1';
go

exec sp_droprolemember 'db_datawriter', 'db_roles_u1';
go

exec sp_addrolemember 'db_datareader', 'db_roles_u1';
go

exec sp_addrolemember 'db_datawriter', 'db_roles_u1';
go

use master;
go

-- tsql
alter authorization on database::db_roles_db1 to db_roles_l3;
go

-- tsql user=db_roles_l3 password=123
use db_roles_db1
go

create schema db_roles_schema_3;
go

create table db_roles_schema_3.db_roles_t1(a int);
go

create view db_roles_schema_3.db_roles_v1 as select 2;
go

-- database owner can add other roles as a member of database roles
alter role db_datareader drop member db_roles_u1;
go

alter role db_datawriter drop member db_roles_u1;
go

alter role db_datareader add member db_roles_u1; 
go

alter role db_datawriter add member db_roles_u1; 
go

exec sp_droprolemember 'db_datareader', 'db_roles_u1';
go

exec sp_droprolemember 'db_datawriter', 'db_roles_u1';
go

exec sp_addrolemember 'db_datareader', 'db_roles_u1';
go

exec sp_addrolemember 'db_datawriter', 'db_roles_u1';
go

-- remove select privilege on the schema and object, still the objects should be accessible
revoke select on schema::db_roles_schema_1 from db_roles_u1;
go

revoke select on object::db_roles_schema_1.before_t1 from db_roles_u1;
go

use master;
go

-- tsql user=db_roles_l1 password=123
use db_roles_db1
go

-- members of db_datareader/db_datawriter cannot add another role/user as its member
alter role db_datareader drop member db_roles_r1;
go

alter role db_datawriter drop member db_roles_r1;
go

alter role db_datareader add member db_roles_r1; 
go

alter role db_datawriter add member db_roles_r1; 
go

exec sp_droprolemember 'db_datareader', 'db_roles_r1';
go

exec sp_droprolemember 'db_datawriter', 'db_roles_r1';
go

exec sp_addrolemember 'db_datareader', 'db_roles_r1';
go

exec sp_addrolemember 'db_datawriter', 'db_roles_r1';
go

-- Basic membership check
SELECT IS_MEMBER('db_datareader')
GO

SELECT IS_MEMBER('db_datawriter')
GO

-- user is a member of db_datareader/db_datawriter, objects should be accessible
-- objects created before and after adding the user to db roles should be accessible.
select * from after_t1; -- allowed
go

select * from after_v1; -- allowed
go

insert into before_t1 values(1); -- allowed
go

update before_t1 set a = 2 where a = 1; -- allowed
go

delete from before_t1 where a = 2; -- allowed
go

select * from before_t1; -- allowed
go

select * from before_v1; -- allowed
go

insert into after_t1 values(1); -- allowed
go

update after_t1 set a = 2 where a = 1; -- allowed
go

delete from after_t1 where a = 2; -- allowed
go

select * from db_roles_schema_1.after_t1; -- allowed
go

select * from db_roles_schema_1.after_v1; -- allowed
go

insert into db_roles_schema_1.before_t1 values(1); -- allowed
go

update db_roles_schema_1.before_t1 set a = 2 where a = 1; -- allowed
go

delete from db_roles_schema_1.before_t1 where a = 2; -- allowed
go

select * from db_roles_schema_2.before_created_by_dbo_t1; -- allowed
go

select * from db_roles_schema_2.before_created_by_dbo_v1; -- allowed
go

insert into db_roles_schema_2.before_created_by_dbo_t1 values(1); -- allowed
go

update db_roles_schema_2.before_created_by_dbo_t1 set a = 2 where a = 1; -- allowed
go

delete from db_roles_schema_2.before_created_by_dbo_t1 where a = 2; -- allowed
go

select * from db_roles_schema_2.after_created_by_dbo_t1; -- allowed
go

select * from db_roles_schema_2.after_created_by_dbo_v1; -- allowed
go

insert into db_roles_schema_2.after_created_by_dbo_t1 values(1); -- allowed
go

update db_roles_schema_2.after_created_by_dbo_t1 set a = 2 where a = 1; -- allowed
go

delete from db_roles_schema_2.after_created_by_dbo_t1 where a = 2; -- allowed
go

select * from db_roles_schema_2.before_created_by_u4_t1; -- allowed
go

select * from db_roles_schema_2.before_created_by_u4_v1; -- allowed
go

insert into db_roles_schema_2.before_created_by_u4_t1 values(1); -- allowed
go

update db_roles_schema_2.before_created_by_u4_t1 set a = 2 where a = 1; -- allowed
go

delete from db_roles_schema_2.before_created_by_u4_t1 where a = 2; -- allowed
go

select * from db_roles_schema_2.after_created_by_u4_t1; -- allowed
go

select * from db_roles_schema_2.after_created_by_u4_v1; -- allowed
go

insert into db_roles_schema_2.after_created_by_u4_t1 values(1); -- allowed
go

update db_roles_schema_2.after_created_by_u4_t1 set a = 2 where a = 1; -- allowed
go

delete from db_roles_schema_2.after_created_by_u4_t1 where a = 2; -- allowed
go

-- objects created by the database owner should be accessible too.
select * from db_roles_schema_3.db_roles_t1; -- allowed
go

select * from db_roles_schema_3.db_roles_v1; -- allowed
go

insert into db_roles_schema_3.db_roles_t1 values(1); -- allowed
go

update db_roles_schema_3.db_roles_t1 set a = 2 where a = 1; -- allowed
go

delete from db_roles_schema_3.db_roles_t1 where a = 2; -- allowed
go

use master;
go

-- tsql
-- Basic membership check
use db_roles_db1;
go

SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_r1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_r1')
GO

alter role db_datareader drop member db_roles_u1;
go

alter role db_datawriter drop member db_roles_u1;
go

alter role db_datareader drop member db_roles_r1;
go

alter role db_datawriter drop member db_roles_r1;
go

-- Basic membership check
SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_r1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_r1')
GO

use master;
go

-- tsql user=db_roles_l1 password=123
-- Basic membership check
use db_roles_db1
go

SELECT IS_MEMBER('db_datareader')
GO

SELECT IS_MEMBER('db_datawriter')
GO

-- user is not a member of db_datareader/db_datawriter, objects should not be accessible
select * from after_t1;  -- not allowed
go

select * from after_v1;  -- not allowed
go

select * from before_t1; -- not allowed
go

select * from before_v1; -- not allowed
go

insert into before_t1 values(1); -- not allowed
go

update before_t1 set a = 2 where a = 1; -- not allowed
go

delete from before_t1 where a = 2; -- not allowed
go

insert into after_t1 values(1); -- not allowed
go

update after_t1 set a = 2 where a = 1; -- not allowed
go

delete from after_t1 where a = 2; -- not allowed
go

select * from db_roles_schema_1.after_t1;  -- not allowed
go

select * from db_roles_schema_1.before_t1; -- not allowed
go

select * from db_roles_schema_1.after_v1;  -- not allowed
go

select * from db_roles_schema_1.before_v1; -- not allowed
go

insert into db_roles_schema_1.before_t1 values(1); -- not allowed
go

update db_roles_schema_1.before_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_1.before_t1 where a = 2; -- not allowed
go

insert into db_roles_schema_1.after_t1 values(1); -- not allowed
go

update db_roles_schema_1.after_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_1.after_t1 where a = 2; -- not allowed
go

select * from db_roles_schema_2.before_created_by_dbo_t1; -- not allowed
go

select * from db_roles_schema_2.before_created_by_dbo_v1; -- not allowed
go

insert into db_roles_schema_2.before_created_by_dbo_t1 values(1); -- not allowed
go

update db_roles_schema_2.before_created_by_dbo_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_2.before_created_by_dbo_t1 where a = 2; -- not allowed
go

select * from db_roles_schema_2.after_created_by_dbo_t1; -- not allowed
go

select * from db_roles_schema_2.after_created_by_dbo_v1; -- not allowed
go

insert into db_roles_schema_2.after_created_by_dbo_t1 values(1); -- not allowed
go

update db_roles_schema_2.after_created_by_dbo_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_2.after_created_by_dbo_t1 where a = 2; -- not allowed
go

select * from db_roles_schema_2.before_created_by_u4_t1; -- not allowed
go

select * from db_roles_schema_2.before_created_by_u4_v1; -- not allowed
go

insert into db_roles_schema_2.before_created_by_u4_t1 values(1); -- not allowed
go

update db_roles_schema_2.before_created_by_u4_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_2.before_created_by_u4_t1 where a = 2; -- not allowed
go

select * from db_roles_schema_2.after_created_by_u4_t1; -- not allowed
go

select * from db_roles_schema_2.after_created_by_u4_v1; -- not allowed
go

insert into db_roles_schema_2.after_created_by_u4_t1 values(1); -- not allowed
go

update db_roles_schema_2.after_created_by_u4_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_2.after_created_by_u4_t1 where a = 2; -- not allowed
go

-- objects created by the database owner should not be accessible
select * from db_roles_schema_3.db_roles_t1; -- not allowed
go

select * from db_roles_schema_3.db_roles_v1; -- not allowed
go

insert into db_roles_schema_3.db_roles_t1 values(1); -- not allowed
go

update db_roles_schema_3.db_roles_t1 set a = 2 where a = 1; -- not allowed
go

delete from db_roles_schema_3.db_roles_t1 where a = 2; -- not allowed
go

use master;
go

-- tsql
use db_roles_db1;
go

exec sp_addrolemember 'db_datareader', 'db_roles_u1';
go

exec sp_addrolemember 'db_datawriter', 'db_roles_u1';
go

exec sp_addrolemember 'db_datareader', 'db_roles_r1';
go

exec sp_addrolemember 'db_datawriter', 'db_roles_r1';
go

use master;
go

-- tsql user=db_roles_l1 password=123
-- Basic membership check
use db_roles_db1
go

SELECT IS_MEMBER('db_datareader')
GO

SELECT IS_MEMBER('db_datawriter')
GO

-- user is a member of db_datareader/db_datawriter, objects should be accessible
select * from after_t1; -- allowed
go

select * from before_t1; -- allowed
go

select * from after_v1; -- allowed
go

select * from before_v1; -- allowed
go

insert into before_t1 values(1); -- allowed
go

update before_t1 set a = 2 where a = 1; -- allowed
go

delete from before_t1 where a = 2; -- allowed
go

insert into after_t1 values(1); -- allowed
go

update after_t1 set a = 2 where a = 1; -- allowed
go

delete from after_t1 where a = 2; -- allowed
go

use master;
go

-- tsql user=db_roles_l5 password=123
-- Basic membership check
use db_roles_db1
go

SELECT IS_MEMBER('db_datareader')
GO

SELECT IS_MEMBER('db_datawriter')
GO

-- user is a member of role which is a member of db_datareader/db_datawriter, objects should be accessible
select * from after_t1; -- allowed
go

select * from before_t1; -- allowed
go

select * from after_v1; -- allowed
go

select * from before_v1; -- allowed
go

insert into before_t1 values(1); -- allowed
go

update before_t1 set a = 2 where a = 1; -- allowed
go

delete from before_t1 where a = 2; -- allowed
go

insert into after_t1 values(1); -- allowed
go

update after_t1 set a = 2 where a = 1; -- allowed
go

delete from after_t1 where a = 2; -- allowed
go

use master;
go

-- tsql
-- Basic membership check
use db_roles_db1
go

SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_r1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_r1')
GO

exec sp_droprolemember 'db_datareader', 'db_roles_u1';
go

exec sp_droprolemember 'db_datawriter', 'db_roles_u1';
go

exec sp_droprolemember 'db_datareader', 'db_roles_r1';
go

exec sp_droprolemember 'db_datawriter', 'db_roles_r1';
go

-- Basic membership check
SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_u1')
GO

SELECT IS_ROLEMEMBER('db_datareader', 'db_roles_r1')
GO

SELECT IS_ROLEMEMBER('db_datawriter', 'db_roles_r1')
GO

use master;
go

-- tsql user=db_roles_l5 password=123
-- Basic membership check
use db_roles_db1
go

SELECT IS_MEMBER('db_datareader')
GO

SELECT IS_MEMBER('db_datawriter')
GO

-- user is a member of role which is not a member of db_datareader/db_datawriter, objects should not be accessible
select * from after_t1; -- not allowed
go

select * from before_t1; -- not allowed
go

select * from after_v1; -- not allowed
go

select * from before_v1; -- not allowed
go

insert into before_t1 values(1); -- not allowed
go

update before_t1 set a = 2 where a = 1; -- not allowed
go

delete from before_t1 where a = 2; -- not allowed
go

insert into after_t1 values(1); -- not allowed
go

update after_t1 set a = 2 where a = 1; -- not allowed
go

delete from after_t1 where a = 2; -- not allowed
go

use master;
go

-- tsql user=db_roles_l1 password=123
-- Basic membership check
use db_roles_db1
go

SELECT IS_MEMBER('db_datareader')
GO

SELECT IS_MEMBER('db_datawriter')
GO

-- user is not a member of db_datareader/db_datawriter, objects should not be accessible
select * from after_t1; -- not allowed
go

select * from before_t1; -- not allowed
go

select * from after_v1; -- not allowed
go

select * from before_v1; -- not allowed
go

insert into before_t1 values(1); -- not allowed
go

update before_t1 set a = 2 where a = 1; -- not allowed
go

delete from before_t1 where a = 2; -- not allowed
go

insert into after_t1 values(1); -- not allowed
go

update after_t1 set a = 2 where a = 1; -- not allowed
go

delete from after_t1 where a = 2; -- not allowed
go

use master;
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'db_roles_l1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- Wait to sync with another session
SELECT pg_sleep(1);
go

-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'db_roles_l2' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- Wait to sync with another session
SELECT pg_sleep(1);
go

-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'db_roles_l3' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- Wait to sync with another session
SELECT pg_sleep(1);
go

-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'db_roles_l4' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- Wait to sync with another session
SELECT pg_sleep(1);
go

-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'db_roles_l5' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- Wait to sync with another session
SELECT pg_sleep(1);
go

-- tsql
-- drop objects
use db_roles_db1
go

drop table db_roles_schema_1.before_t1;
go

drop table db_roles_schema_1.after_t1;
go

drop table db_roles_schema_2.before_created_by_dbo_t1;
go

drop table db_roles_schema_2.after_created_by_dbo_t1;
go

drop table db_roles_schema_2.before_created_by_u4_t1;
go

drop table db_roles_schema_2.after_created_by_u4_t1;
go

drop table db_roles_schema_3.db_roles_t1;
go

drop view db_roles_schema_1.before_v1;
go

drop view db_roles_schema_1.after_v1;
go

drop view db_roles_schema_2.before_created_by_dbo_v1;
go

drop view db_roles_schema_2.after_created_by_dbo_v1;
go

drop view db_roles_schema_2.before_created_by_u4_v1;
go

drop view db_roles_schema_2.after_created_by_u4_v1;
go

drop view db_roles_schema_3.db_roles_v1;
go

drop schema db_roles_schema_1;
go

drop schema db_roles_schema_2;
go

drop schema db_roles_schema_3;
go

drop table before_t1;
go

drop table after_t1;
go

drop view before_v1;
go

drop view after_v1;
go

drop user db_roles_u1;
go

drop user db_roles_u4;
go

drop user db_roles_u5;
go

drop role db_roles_r1;
go

drop login db_roles_l1;
go

drop login db_roles_l2;
go

drop login db_roles_l3;
go

drop login db_roles_l4;
go

drop login db_roles_l5;
go

use master;
go

drop database db_roles_db1;
go