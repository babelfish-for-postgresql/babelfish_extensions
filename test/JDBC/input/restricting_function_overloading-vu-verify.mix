-- tsql
-- Overloaded function with no argument
CREATE FUNCTION OverloadedFunction() RETURNS INT AS BEGIN RETURN 1 END
GO

CREATE FUNCTION OverloadedFunction() RETURNS INT AS BEGIN RETURN 2 END
GO

CREATE PROCEDURE OverloadedFunction AS BEGIN SELECT 1 END
GO

-- Overloaded function with same number of argument and same argument type
CREATE PROCEDURE OverloadedFunction_1 @num1 INT AS BEGIN SELECT @num1 + 1 END
GO

CREATE FUNCTION OverloadedFunction_1(@num1 INT) RETURNS INT AS BEGIN RETURN @num1 + 1 END
GO

CREATE FUNCTION OverloadedFunction_1(@num1 INT) RETURNS INT AS BEGIN RETURN @num1 + 2 END
GO

-- Overloaded procedures
CREATE PROCEDURE OverloadedProcedure AS BEGIN SELECT 1 END
GO

CREATE PROCEDURE OverloadedProcedure @num1 INT AS BEGIN SELECT @num1 + 1 END
GO

-- Objects with same name table, function and procedure
CREATE TABLE OverloadedObject(a int);
GO

CREATE PROCEDURE OverloadedObject AS BEGIN SELECT 1 END
GO

CREATE FUNCTION OverloadedObject(@num1 INT) RETURNS INT AS BEGIN RETURN @num1 + 1 END
GO

-- Overloaded function with different number of arguments
CREATE FUNCTION OverloadedFunction_2(@num1 INT) RETURNS INT AS BEGIN RETURN @num1 + 1 END
GO

CREATE FUNCTION OverloadedFunction_2(@num1 INT, @num2 INT) RETURNS INT AS BEGIN RETURN @num1 + @num2 END
GO

CREATE PROCEDURE OverloadedFunction_2 AS BEGIN SELECT 1 END
GO

-- Overloaded function with same number of arguments but different types
CREATE FUNCTION OverloadedFunction_3(@num1 INT, @num2 INT) RETURNS INT AS BEGIN RETURN @num1 + @num2 END
GO

CREATE FUNCTION OverloadedFunction_3(@num1 INT, @num2 FLOAT) RETURNS INT AS BEGIN RETURN @num1 + @num2 END
GO

-- psql
-- Not restricting function overloading via PG port
-- create Overloaded function with same number of arguments
CREATE FUNCTION OverloadedFunction(integer, integer)
RETURNS integer
AS
$$
BEGIN
RETURN $1 + $2;
END;
$$
LANGUAGE plpgsql;
GO

CREATE FUNCTION OverloadedFunction(float, float)
RETURNS float
AS
$$
BEGIN
RETURN $1 + $2;
END;
$$
LANGUAGE plpgsql;
GO

DROP FUNCTION OverloadedFunction(integer, integer);
GO

DROP FUNCTION OverloadedFunction(float, float);
GO

-- Create or replace function names via PG port
CREATE OR REPLACE FUNCTION OverloadedFunction(integer, integer)
RETURNS integer
AS
$$
BEGIN
RETURN $1 + $2;
END;
$$
LANGUAGE plpgsql;
GO

CREATE OR REPLACE FUNCTION OverloadedFunction(float, float)
RETURNS float
AS
$$
BEGIN
RETURN $1 + $2;
END;
$$
LANGUAGE plpgsql;
GO

DROP FUNCTION OverloadedFunction(integer, integer);
GO

DROP FUNCTION OverloadedFunction(float, float);
GO

-- Overloaded procedures via PG port
CREATE OR REPLACE PROCEDURE OverloadedProcedure(IN a FLOAT, IN b FLOAT, OUT c FLOAT)
LANGUAGE plpgsql
AS 
$$
BEGIN 
c := a + b;
END;
$$;
GO

CREATE OR REPLACE PROCEDURE OverloadedProcedure(IN a INT, IN b INT, OUT c INT)
LANGUAGE plpgsql
AS 
$$
BEGIN
c := a + b;
END;
$$;
GO

DROP PROCEDURE OverloadedProcedure(integer, integer);
GO

DROP PROCEDURE OverloadedProcedure(float, float);
GO

-- tsql
-- Case 1: Function/Procedure Overloading in different schemas
CREATE FUNCTION restrict_func_overloading_s1.overloaded_function() RETURNS INT AS BEGIN RETURN 1; END;
GO

CREATE FUNCTION restrict_func_overloading_s2.overloaded_function() RETURNS INT AS BEGIN RETURN 2; END;
GO

SELECT restrict_func_overloading_s1.overloaded_function();
GO

SELECT restrict_func_overloading_s2.overloaded_function();
GO

CREATE PROCEDURE restrict_func_overloading_s1.overloaded_proc AS BEGIN SELECT 'restrict_func_overloading_s1'; END;
GO

CREATE PROCEDURE restrict_func_overloading_s2.overloaded_proc AS BEGIN SELECT 'restrict_func_overloading_s2'; END;
GO

EXEC restrict_func_overloading_s1.overloaded_proc;
GO

EXEC restrict_func_overloading_s2.overloaded_proc;
GO

-- Case 2: Function/Procedure Overloading in the same schema is not allowed
-- should throw error
CREATE FUNCTION restrict_func_overloading_s1.overloaded_function(@a INT) RETURNS INT AS BEGIN RETURN @a; END;
GO

-- Case 3: Function/Procedure Creation Without specifying schema defaults to current schema i.e. dbo
CREATE FUNCTION overloaded_function() RETURNS INT AS BEGIN RETURN 4; END;
GO

CREATE PROCEDURE overloaded_proc AS BEGIN SELECT 'overloaded proc'; END;
GO

-- should return 4
SELECT dbo.overloaded_function();
GO

EXEC dbo.overloaded_proc;
GO

-- Case 4: Same object name during Function/Procedure creation is not allowed
CREATE FUNCTION restrict_func_overloading_s1.overloaded_object() RETURNS INT AS BEGIN RETURN 6; END;
GO

-- should throw error since same name object already exist in the schema
CREATE PROCEDURE restrict_func_overloading_s1.overloaded_object AS BEGIN SELECT 'same object name'; END;
GO

-- Case 5: Function/Procedure creation with name similar to sys or pg_catalog objects
-- creates function in default schema i.e. dbo
CREATE FUNCTION to_date() RETURNS INT AS BEGIN RETURN 1; END;
GO

CREATE FUNCTION COL_NAME() RETURNS INT AS BEGIN RETURN 2; END;
GO

CREATE PROCEDURE sp_helpdb AS BEGIN SELECT 'sp_helpdb overloaded in different schema'; END;
GO

SELECT to_date();
GO

SELECT pg_catalog.to_date('20170103','YYYYMMDD');
GO

SELECT COL_NAME();
GO

SELECT sys.COL_NAME(CAST((SELECT OBJECT_ID('OverloadedObject')) AS INT), 1);
GO

EXEC sp_helpdb;
GO

EXEC [sys].sp_helpdb 'test';
GO