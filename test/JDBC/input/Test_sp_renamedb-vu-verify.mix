-- tsql
-- sanity checks for metadata stored in babelfish catalog
select owner, name from sys.babelfish_sysdatabases where name = 'sp_renamedb_database1' order by name;
select nspname, orig_name from sys.babelfish_namespace_ext where nspname LIKE 'sp_renamedb_database%' order by nspname;
select rolname, login_name, orig_username, database_name from sys.babelfish_authid_user_ext where rolname LIKE 'sp_renamedb_database%' order by rolname;
select rolname, default_database_name from sys.babelfish_authid_login_ext where default_database_name LIKE 'sp_renamedb_database%' order by rolname;
go

-- sanity check
use sp_renamedb_database1;
go
-- Renaming the current database is also allowed
exec sp_renamedb 'sp_renamedb_database1' , 'sp_renamedb_database2';
go
select db_name()
go
use sp_renamedb_database1;
go
use sp_renamedb_database2;
go
exec sp_renamedb 'sp_renamedb_database2', 'sp_renamedb_database1';
go

use master
go
exec sp_renamedb 'sp_renamedb_database1', 'sp_renamedb_database2';
go
-- should return updated rows
select owner, name from sys.babelfish_sysdatabases where name LIKE 'sp_renamedb_database%' order by name;
select nspname, orig_name from sys.babelfish_namespace_ext where nspname LIKE 'sp_renamedb_database%' order by nspname;
select rolname, login_name, orig_username, database_name from sys.babelfish_authid_user_ext where rolname LIKE 'sp_renamedb_database%' order by rolname;
select rolname, default_database_name from sys.babelfish_authid_login_ext where default_database_name LIKE 'sp_renamedb_database%' order by rolname;
go

-- sanity check to use db
use sp_renamedb_database1;
go
use sp_renamedb_database2;
go

use master
go

-- rollback changes
exec sp_renamedb 'sp_renamedb_database2', 'sp_renamedb_database1'
go

-- sp_renamedb inside transaction is allowed
Begin Transaction;
go
exec sp_renamedb 'sp_renamedb_database2', 'sp_renamedb_database1'
go
-- does not rollback transaction
select @@trancount
go
commit
go

-- exec sp_renamedb inside a function/procedure should pass
create function sp_renamedb_function(@a text, @b text) returns int Begin exec sp_renamedb @a, @b END
go
create procedure sp_renamedb_procedure(@a text, @b text) as exec sp_renamedb @a, @b
go

select sp_renamedb_function('sp_renamedb_database1', 'sp_renamedb_database2');
go
exec sp_renamedb_procedure @a = 'sp_renamedb_database1', @b = 'sp_renamedb_database1'
go

-- Renaming system databases is prohibited
exec sp_renamedb 'master', 'master1';
go
exec sp_renamedb 'tempdb', 'tempdb1';
go
exec sp_renamedb 'msdb', 'msdb1';
go

-- Rename a case sensitive and len>64 database name
exec sp_renamedb '[sp_renamedb_ThisOldDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb]',
 '[sp_renamedb_ThisNewDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb]'
go

-- should return updated rows
select owner, name from sys.babelfish_sysdatabases where name LIKE 'sp_renamedb_this%' order by name;
select nspname, orig_name from sys.babelfish_namespace_ext where nspname LIKE 'sp_renamedb_this%' order by nspname;
select rolname, login_name, orig_username, database_name from sys.babelfish_authid_user_ext where rolname LIKE 'sp_renamedb_this%' order by rolname;
select rolname, default_database_name from sys.babelfish_authid_login_ext where default_database_name LIKE 'sp_renamedb_this%' order by rolname;
go

-- sanity check to use db
use [sp_renamedb_ThisOldDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb];
go
use [sp_renamedb_ThisNewDatabaseNameIsCaseSensitiveAndIsLongerThan64DigitsToTestRenameDb]
go

use master
go

-- tsql user=sp_renamedb_login1 password=1234
use sp_renamedb_database1
go
-- user that does not have access to db, cannot modify name
exec sp_renamedb 'sp_renamedb_database1', 'sp_renamedb_database2';
go

-- tsql
-- give sp_renamedb_login1 permission to the db
alter server role sysadmin add member sp_renamedb_login1
go

-- tsql user=sp_renamedb_login1 password=1234
-- should work now
exec sp_renamedb 'sp_renamedb_database1', 'sp_renamedb_database2';
go
-- connect to the database to test concurrencies
use sp_renamedb_database2
go

-- tsql
-- should throw error since there is an active session using sp_renamedb_database2
exec sp_renamedb 'sp_renamedb_database2', 'sp_renamedb_database1';
go

-- tsql user=sp_renamedb_login1 password=1234
-- now disconnect from that database in the 2nd connection and test alter again
select db_name()
go
use master
go

-- tsql
exec sp_renamedb 'sp_renamedb_database2', 'sp_renamedb_database1';
go

drop function sp_renamedb_function
drop procedure sp_renamedb_procedure
go

-- testing invalid args for sp_renamedb
create database sp_renamedb_db1_temp;
go
-- NULL old_db_name
exec sp_renamedb NULL, 'sp_renamedb_db1_temp';
go
-- NULL new_db_name
exec sp_renamedb 'sp_renamedb_db1_temp  ', NULL;
go
-- both NULL
exec sp_renamedb NULL, NULL;
go
-- empty string old_db_name
exec sp_renamedb '', '     sp_renamedb_db1_temp';
go
-- empty string new_db_name
exec sp_renamedb '    sp_renamedb_db1_temp', '';
go
-- both empty string
exec sp_renamedb '    ', ' '
go
-- 3 part names
exec sp_renamedb ' sp_renamedb_db1_temp.sch1.t1', 'db2      '
go
-- 3 part names
exec sp_renamedb 'sp_renamedb_db1_temp', 'db2.sch2.t2'
go
-- 3 part names
exec sp_renamedb 'db1.sch1.t1', 'db2.sch2.t2'
go
-- valid input, should get db does not exist
exec sp_renamedb '[db1.sch1.t1]', 'sp_renamedb_db1_temp      '
go
-- valid input, should get db does not exist
exec sp_renamedb 'sp_renamedb_db1_temp', '[db2.sch2.t2]     '
go
drop database sp_renamedb_db1_temp
go