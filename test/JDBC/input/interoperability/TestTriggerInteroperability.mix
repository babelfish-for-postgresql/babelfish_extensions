-- tsql
create table test_tbl_trig_bbf_1(a int);
create table test_tbl_trig_bbf_2(a int);
GO

-- psql
create table master_dbo.psql_tbl_1(a int unique);
create table master_dbo.psql_tbl_2(a int);
GO

-- psql
grant all on master_dbo.psql_tbl_1 to public;
GO

-- psql
CREATE OR REPLACE FUNCTION master_dbo.f_trig_pg_1() RETURNS trigger
AS $$
BEGIN
        insert into master_dbo.psql_tbl_1 values (1);
        RETURN NEW;
END;
$$ LANGUAGE plpgsql;
GO

-- psql
CREATE OR REPLACE FUNCTION master_dbo.f_trig_pg_2() RETURNS trigger
AS $$
BEGIN
        insert into master_dbo.psql_tbl_2 values (1);
        RETURN NEW;
END;
$$ LANGUAGE plpgsql;
GO

-- psql
CREATE TRIGGER pg_trigger_1 AFTER INSERT OR DELETE OR UPDATE ON master_dbo.test_tbl_trig_bbf_1 
    FOR EACH ROW EXECUTE FUNCTION master_dbo.f_trig_pg_1();
GO

-- psql
CREATE TRIGGER pg_trigger_2 AFTER INSERT OR DELETE OR UPDATE ON master_dbo.test_tbl_trig_bbf_2 
    FOR EACH ROW EXECUTE FUNCTION master_dbo.f_trig_pg_2();
GO

-- tsql
begin tran;
GO

insert into test_tbl_trig_bbf_1 values (1);
GO

select @@trancount;
GO

commit tran;
GO

select count(*) from test_tbl_trig_bbf_1;
GO

select count(*) from psql_tbl_1;
GO

begin tran;
GO

-- should succeed as login is the owner of underlying table psql_tbl_2
insert into test_tbl_trig_bbf_2 values (1);
GO

select @@trancount
GO

rollback tran;
GO

select count(*) from test_tbl_trig_bbf_2;
GO

begin tran;
GO

-- should throw duplicte entry error
insert into test_tbl_trig_bbf_1 values (1);
GO

select @@trancount;
GO

rollback tran;
GO

select count(*) from test_tbl_trig_bbf_1;
GO

select count(*) from psql_tbl_1;
GO

-- psql
truncate table master_dbo.psql_tbl_1;
truncate table master_dbo.psql_tbl_2;
GO

-- tsql
create table test_tbl_trig_bbf_3(a int);
GO

CREATE TRIGGER tsql_trigger_3 ON test_tbl_trig_bbf_3 AFTER INSERT AS
INSERT INTO test_tbl_trig_bbf_1 VALUES(4);
GO

-- psql
CREATE PROCEDURE master_dbo.psql_interop_proc1()
AS
$$
BEGIN
    insert into test_tbl_trig_bbf_3 values (1);
END
$$ LANGUAGE PLPGSQL;
GO

-- begin tsql insert -> tsql trigger -> pg trigger (without error)
-- tsql
begin tran
GO

insert into test_tbl_trig_bbf_3 values (1);
GO

select @@trancount
GO

commit tran
GO

select count(*) from test_tbl_trig_bbf_3;
GO

select count(*) from test_tbl_trig_bbf_1;
GO

select count(*) from psql_tbl_1;
GO

-- PG proc --> insert --> tsql trigger --> should result in error 
exec psql_interop_proc1
GO

-- begin tsql insert -> tsql trigger -> pg trigger (error)
begin tran
GO

insert into test_tbl_trig_bbf_3 values (1);
GO

select @@trancount
GO

rollback tran
GO

select count(*) from test_tbl_trig_bbf_3;
GO

select count(*) from test_tbl_trig_bbf_1;
GO

select count(*) from psql_tbl_1;
GO

-- psql
truncate table master_dbo.psql_tbl_1;
truncate table master_dbo.psql_tbl_2;
drop procedure master_dbo.psql_interop_proc1;
GO

-- tsql
create table test_tbl_trig_bbf_4(a int);
GO

CREATE PROCEDURE tsql_interop_proc
AS
insert into test_tbl_trig_bbf_4 values (1);
GO

-- psql
CREATE OR REPLACE FUNCTION master_dbo.f_trig_pg_4() RETURNS trigger
AS $$
BEGIN
        insert into master_dbo.test_tbl_trig_bbf_3 values (1);
        RETURN NEW;
END;
$$ LANGUAGE plpgsql;
GO

CREATE TRIGGER pg_trigger_4 AFTER INSERT OR DELETE OR UPDATE ON master_dbo.test_tbl_trig_bbf_4 
    FOR EACH ROW EXECUTE FUNCTION master_dbo.f_trig_pg_4();
GO


-- begin TSQL insert -> PG trigger -> TSQL trigger -> PG trigger (without error)
-- tsql
begin tran
go

insert into test_tbl_trig_bbf_4 values (1);
GO

select @@trancount
GO

commit tran
GO

select count(*) from test_tbl_trig_bbf_4;
GO

select count(*) from test_tbl_trig_bbf_3;
GO

select count(*) from test_tbl_trig_bbf_1;
GO

select count(*) from psql_tbl_1;
GO

-- tsql proc --> insert --> PG trigger --> tsql trigger (should result in error)
-- tsql
exec tsql_interop_proc;
GO

-- tsql
drop procedure tsql_interop_proc;

-- begin TSQL insert -> PG trigger -> TSQL trigger -> PG trigger (error)
begin tran
go

insert into test_tbl_trig_bbf_4 values (1);
GO

select @@trancount
GO

rollback tran
GO

select count(*) from test_tbl_trig_bbf_4;
GO

select count(*) from test_tbl_trig_bbf_3;
GO

select count(*) from test_tbl_trig_bbf_1;
GO

select count(*) from psql_tbl_1;
GO

-- psql
drop function master_dbo.f_trig_pg_1() cascade;
drop function master_dbo.f_trig_pg_2() cascade;
drop function master_dbo.f_trig_pg_4() cascade;
GO

drop table master_dbo.psql_tbl_1;
drop table master_dbo.psql_tbl_2;
GO

-- tsql
drop table test_tbl_trig_bbf_1;
drop table test_tbl_trig_bbf_2;
drop table test_tbl_trig_bbf_3;
drop table test_tbl_trig_bbf_4;
GO