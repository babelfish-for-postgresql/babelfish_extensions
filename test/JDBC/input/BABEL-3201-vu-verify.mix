DBCC CHECKIDENT(babel_3201_t_int, NORESEED);
GO

-- test with mixed case in table name
DBCC CHECKIDENT(BABEL_3201_t_iNt, NORESEED);
GO
DBCC CHECKIDENT(BABEL_3201_T_INT, NORESEED);
GO

-- test with table in quotes (+mixed cases)
DBCC CHECKIDENT('babel_3201_t_int', NORESEED);
GO
DBCC CHECKIDENT('baBEl_3201_T_inT', NORESEED);
GO

-- test with table in brackets (+mixed case)
DBCC CHECKIDENT([babel_3201_t_int], NORESEED);
GO
DBCC CHECKIDENT([baBEL_3201_t_InT], NORESEED);
GO

-- test with table in brackets with quotes (+mixed case)
DBCC CHECKIDENT('[babel_3201_t_int]', NORESEED);
GO
DBCC CHECKIDENT('[BABEL_3201_t_int]', NORESEED);
GO

-- test when trailing space - should work
DBCC CHECKIDENT('babel_3201_t_int      ', NORESEED);
GO
DBCC CHECKIDENT('babel_3201_T_INT      ', NORESEED);
GO

-- test when leading space - should throw error
DBCC CHECKIDENT('   babel_3201_t_int  ', NORESEED);
GO

-- test when table name is empty in quotes
DBCC CHECKIDENT('', NORESEED);
GO

-- same as DBCC CHECKIDENT(<table_name>, RESEED), identity value is not changed
-- if current identity value for a table is less than the maximum identity value
-- stored in the identity column
DBCC CHECKIDENT(babel_3201_t_int);
GO


DBCC CHECKIDENT(babel_3201_t_int, RESEED);
GO

INSERT INTO babel_3201_t_int VALUES (8);
GO

SELECT * FROM babel_3201_t_int;
GO

DBCC CHECKIDENT('babel_3201_sch1.babel_3201_t2');
GO

-- Set identity value to 5 which is less than the maximum value(which is 9) of the identity
-- column, using RESEED option in this case should will reset the identity value
-- to maximum value of the identity column. Value inserted in next insert will
-- be (max_identity_col_value + increament).
DBCC CHECKIDENT(babel_3201_t_bigint, RESEED, 5);
GO
INSERT INTO babel_3201_t_bigint VALUES (8);
GO
SELECT * from babel_3201_t_bigint;
GO

-- This will reset the current identity value(currently 8) to the maximum value of the identity column (currently 9)
DBCC CHECKIDENT(babel_3201_t_bigint, RESEED);
GO
INSERT INTO babel_3201_t_bigint VALUES (9);
GO
SELECT * from babel_3201_t_bigint;
GO

-- no rows have been inserted in the table; both current identity value current
-- column value should be NULL (TO-DO)
BEGIN TRAN;
DBCC CHECKIDENT(babel_3201_t1, NORESEED);
SELECT * FROM babel_3201_t1;
COMMIT;
GO

BEGIN TRAN;
DBCC CHECKIDENT(babel_3201_t1, RESEED);
SELECT * FROM babel_3201_t1;
COMMIT;
GO

-- current identity value should be NULL (TO-DO), identity value inserted in
-- next INSERT operation should be new_reseed_value.
BEGIN TRAN;
DBCC CHECKIDENT(babel_3201_t1, RESEED, 5);
INSERT INTO babel_3201_t1 VALUES (50);
COMMIT;
GO

BEGIN TRAN;
DBCC CHECKIDENT(babel_3201_t1, NORESEED);
select * from babel_3201_t1;
COMMIT;
GO

-- Remove all rows in table using TRUNCATE TABLE, Identity value will become NULL
-- next insert operation should be default identity value if no new_reseed_value is provided.
TRUNCATE TABLE babel_3201_t_int;
GO
dbcc checkident(babel_3201_t_int, NORESEED);
GO
INSERT INTO babel_3201_t_int values(15);
GO
select * from babel_3201_t_int;

-- Remove all rows in table using TRUNCATE TABLE, identity value inserted in
-- next INSERT operation should be new_reseed_value.
TRUNCATE TABLE babel_3201_t_int;
GO
DBCC CHECKIDENT(babel_3201_t_int, RESEED, 10);
GO
INSERT INTO babel_3201_t_int VALUES (5);
GO
SELECT * FROM babel_3201_t_int;
GO


-- Remove all rows in table using DELETE TABLE, identity value inserted in next
-- INSERT operation should be (new_reseed_value + increment).
DELETE FROM babel_3201_t_bigint;
GO
DBCC CHECKIDENT(babel_3201_t_bigint, RESEED, 10);
GO
INSERT INTO babel_3201_t_bigint VALUES (5);
GO
SELECT * FROM babel_3201_t_bigint;
GO

-- Remove all rows in table using DELETE TABLE current identity will not become default identity value, 
-- identity value inserted in next operation should use (default identity value + increament) if no new_reseed_value is provided.
DELETE FROM babel_3201_t_bigint;
GO
dbcc checkident(babel_3201_t_bigint, NORESEED);
GO
INSERT INTO babel_3201_t_bigint VALUES (5);
GO
SELECT * FROM babel_3201_t_bigint;
GO

-- If some rows are present already in the table, identity value inserted in next 
-- INSERT operation should be (new_reseed_value + increament)
DBCC CHECKIDENT(babel_3201_t_bigint, RESEED, 27);
GO
INSERT INTO babel_3201_t_bigint VALUES (32);
GO
SELECT * FROM babel_3201_t_bigint;
GO

-- Incorrect DBCC command option
DBCC CHECKIDENT(babel_3201_t1) WITH NO_INFO;
GO

-- Invalid parameter 1
DBCC CHECKIDENT(5);
GO

DBCC CHECKIDENT(babel_3201_t_int, RESEED, ) WITH NO_INFOMSGS;
GO

-- Invalid keyword
DBCC CHECKIDENT(babel_3201_t1, RESEE);
GO

-- Invalid datatype
DBCC CHECKIDENT(babel_3201_t1, RESEED, 1313abc);
GO

-- Unsupported DBCC command
DBCC CHECKTABLE(babel_3201_t1);
GO

-- Invalid DBCC command
DBCC FAKE_COMMAND(t1);
GO

-- Database undefined
DBCC CHECKIDENT('fake_db.dbo.babel_3201_t1', NORESEED);
GO

-- Schema undefined
DBCC CHECKIDENT('fake_schema.babel_3201_t1', NORESEED);
GO

-- Table undefined
DBCC CHECKIDENT(fake_babel_3201_t1, RESEED);
GO

-- Table does not have identity column
DBCC CHECKIDENT(babel_3201_t2, RESEED);
GO

-- new_reseed_value as expression is not allowed
DBCC CHECKIDENT(babel_3201_t2, RESEED, 4+5);
GO

-- new_reseed_value is out of tinyint datatype range
DBCC CHECKIDENT(babel_3201_t_tinyint, RESEED, 256);
GO

DBCC CHECKIDENT(babel_3201_t_tinyint, RESEED, -1);
GO

-- new_reseed_value is out of smallint datatype range
DBCC CHECKIDENT(babel_3201_t_smallint, RESEED, 32768);
GO

DBCC CHECKIDENT(babel_3201_t_smallint, RESEED, -32769);
GO


-- new_reseed_value is out of int datatype range
DBCC CHECKIDENT(babel_3201_t_int, RESEED, 2147483648);
GO

DBCC CHECKIDENT(babel_3201_t_int, RESEED, -2147483649);
GO

-- new_reseed_value is out of bigint datatype range
DBCC CHECKIDENT(babel_3201_t_bigint, RESEED, 9223372036854775808);
GO

DBCC CHECKIDENT(babel_3201_t_bigint, RESEED, -9223372036854775809);
GO

-- numeric/decimal datatypes are internally converted to bigint, so allowed
-- range is same as that of bigint
DBCC CHECKIDENT(babel_3201_t_numeric, RESEED, 9223372036854775808);
GO

-- When new_reseed_value is a float value, only value before the decimal is used
DBCC CHECKIDENT(babel_3201_t_decimal, RESEED, 15.65);
GO

-- When reseed_value is negative and zero, bbf currently does not support reseed to negative/zero value
dbcc checkident(babel_3201_t_decimal, reseed, -10) 
GO
dbcc checkident(babel_3201_t_decimal, reseed, 0)
Go
dbcc checkident(babel_3201_t_decimal, reseed, .123)
Go
dbcc checkident(babel_3201_t_decimal, reseed, -.123)
Go
dbcc checkident(babel_3201_t_decimal, reseed, .)
GO
dbcc checkident(babel_3201_t_decimal, reseed, -)
GO
dbcc checkident(babel_3201_t_decimal, reseed, .-);
GO

SELECT * FROM babel_3201_t_decimal;
GO

begin tran;
DBCC CHECKIDENT(babel_3201_t_decimal, RESEED, 10);
INSERT INTO babel_3201_t_decimal VALUES (9);
commit;
go

SELECT * FROM babel_3201_t_decimal;
GO

BEGIN TRAN;
    DBCC CHECKIDENT(babel_3201_t_decimal, RESEED, 133ac);
    INSERT INTO babel_3201_t_decimal VALUES (10);
COMMIT;
GO

SELECT * FROM babel_3201_t_decimal;
GO

BEGIN TRAN;
    DBCC CHECKIDENT(babel_3201_t_decimal, RESEED, 20);
    INSERT INTO babel_3201_t_decimal VALUES (11);
ROLLBACK;
GO

-- Check current_identity value after tran rollback 
-- babelfish does not support rolling-back dbcc changes after transection rollback. 
-- Current identity value will be = reseed_value inside the rollbacked transection + increament = 20+3=23
BEGIN TRAN;
dbcc checkident(babel_3201_t_decimal, noreseed);
SELECT * FROM babel_3201_t_decimal;
COMMIT;
GO

EXEC babel_3201_proc1;
GO

INSERT INTO babel_3201_t_tinyint VALUES (10);
GO

SELECT * FROM babel_3201_t_tinyint;
GO

EXEC babel_3201_proc2;
GO

-- testing different scenarios of 3-part name
DBCC CHECKIDENT('dbo.babel_dbcc_check_t1')
GO

DBCC CHECKIDENT('..babel_dbcc_check_t1')
GO

DBCC CHECKIDENT('master.dbo.babel_dbcc_check_t1')
GO

DBCC CHECKIDENT('[master]."dbo".[babel_dbcc_check_t1]')
GO

DBCC CHECKIDENT('"master".[dbo]."babel_dbcc_check_t1"')
GO

DBCC CHECKIDENT('master..babel_dbcc_check_t1')
GO

-- with mixed case names of db, schema, and table.
DBCC CHECKIDENT('dbo.BABEL_DBCC_check_t1')
GO
DBCC CHECKIDENT('master.DBO.BABEL_dbcc_check_t1')
GO
DBCC CHECKIDENT('[MASTER]."dBo".[babel_dbcc_CHECK_t1]')
GO

-- schema and object name containing spaces and dots
DBCC CHECKIDENT('[babel_dbcc_check_t2 .with .dot_an_spaces]');
GO

DBCC CHECKIDENT('master.."babel_dbcc_check_t2 .with .dot_an_spaces"');
GO

DBCC CHECKIDENT('[babel_dbcc_check_schema .with .dot_and_spaces]."babel_dbcc_check_t3 .with .dot_and_spaces"');
GO

-- schema and object name containing spaces and dots + mixed case
DBCC CHECKIDENT('[BABEL_DBCC_CHECK_T2 .with .dOT_AN_SPACES]');
GO

DBCC CHECKIDENT('MASTer.."babel_dbcc_CHECK_T2 .with .dot_an_SPACES"');
GO

DBCC CHECKIDENT('[babel_DBCC_CHECK_schema .with .DOT_and_spaces]."babel_dbcc_CHECK_T3 .with .dot_and_spaces"');
GO

-- db name longer then 63 and doing cross db call
CREATE DATABASE babel_dbcc_checkident_database_longer_than_63_0abcdefgij1abcdefgij2abcdefgij3abcdefgij4abcdefgij5abcdefgij6abcdefgij7abcdefgij8abcdefghij9abcdefghij
GO

USE babel_dbcc_checkident_database_longer_than_63_0abcdefgij1abcdefgij2abcdefgij3abcdefgij4abcdefgij5abcdefgij6abcdefgij7abcdefgij8abcdefghij9abcdefghij
GO

CREATE TABLE babel_3201_longer__name_db_table (a int identity, b int);
GO

USE master;
go

DBCC CHECKIDENT('babel_dbcc_checkident_database_longer_than_63_0abcdefgij1abcdefgij2abcdefgij3abcdefgij4abcdefgij5abcdefgij6abcdefgij7abcdefgij8abcdefghij9abcdefghij.dbo.babel_3201_longer__name_db_table', noreseed);
GO

-- db name longer and mixed case as well. 
DBCC CHECKIDENT('bAbEl_dBcC_ChEcKiDeNt_dAtAbAsE_LoNgEr_tHaN_63_0AbCdEfGiJ1AbCdEfGiJ2AbCdEfGiJ3AbCdEfGiJ4AbCdEfGiJ5AbCdEfGiJ6AbCdEfGiJ7AbCdEfGiJ8AbCdEfGhIj9aBcDeFgHiJ.dbo.babel_3201_longer__name_db_table', noreseed);
GO

-- drop this db because of single_db mode
DROP DATABASE babel_dbcc_checkident_database_longer_than_63_0abcdefgij1abcdefgij2abcdefgij3abcdefgij4abcdefgij5abcdefgij6abcdefgij7abcdefgij8abcdefghij9abcdefghij
GO

-- create database to test cross db behavior.
CREATE DATABASE babel_3201_db1;
GO

USE babel_3201_db1
GO

CREATE TABLE babel_3201_db1_database_table1(a int identity, b int);
GO

CREATE USER babel_3201_db1_log1_usr1 FOR LOGIN babel_3201_log1
GO

-- Should throw - must be owner of schema dbo
-- tsql user=babel_3201_log1 password=12345678
DBCC CHECKIDENT('babel_3201_db1..babel_3201_db1_database_table1', NORESEED);
GO

-- tsql
USE babel_3201_db1
GO
DROP USER babel_3201_db1_log1_usr1
GO


-- Should throw - The server principal "babel_3201_log1" is not able to access the database "babel_3201_db1" under the current security context
-- tsql user=babel_3201_log1 password=12345678
DBCC CHECKIDENT('babel_3201_db1..babel_3201_db1_database_table1', NORESEED);
GO

-- tsql
USE babel_3201_db1
GO
GRANT CONNECT TO GUEST;
GO

-- Permission Check
-- tsql user=babel_3201_log1 password=12345678
USE babel_3201_db1;
GO

-- should throw error - must be owner of schema master_dbo
DBCC CHECKIDENT('master.dbo.babel_3201_t_tinyint', RESEED, 10)
GO

-- tsql
USE master;
GO

ALTER SERVER ROLE sysadmin ADD MEMBER babel_3201_log1;
GO

-- tsql user=babel_3201_log1 password=12345678
USE babel_3201_db1;
GO

-- This should work correctly
DBCC CHECKIDENT('master.dbo.babel_3201_t_tinyint', RESEED, 10)
GO

-- test locks in two connections transaction. 
-- tsql
BEGIN TRAN
DBCC CHECKIDENT('babel_3201_test_locks', noreseed)
GO


-- tsql user=babel_3201_test_locks password=123456
-- This reseed the identity values while the other transaction is not yet completed.
BEGIN TRAN
DBCC CHECKIDENT('babel_3201_test_locks', reseed, 101);
SELECT * FROM babel_3201_test_locks;
COMMIT;
GO

-- tsql
-- This will show the changed values of ident
DBCC CHECKIDENT('babel_3201_test_locks', noreseed);
SELECT * FROM babel_3201_test_locks;
COMMIT;
GO

-- test with user name longer then 64 chars.
-- tsql
USE MASTER
GO
CREATE USER babel_3201_db1_log1_user_name_longer_then_64_char_abdhcdjddjdhskdsh FOR LOGIN babel_3201_log1
GO

-- tsql user=babel_3201_log1 password=12345678
USE babel_3201_db1;
GO
CREATE SCHEMA [babel_3201_user_schema]
GO
CREATE TABLE [babel_3201_db1].[babel_3201_user_schema].[babel_3201_user_table] (a int identity, b int);
GO
-- This should work correctly
DBCC CHECKIDENT('[babel_3201_db1].[babel_3201_user_schema].[babel_3201_user_table]', NORESEED);
GO
DBCC CHECKIDENT('master.dbo.babel_3201_t_tinyint', RESEED, 10)
GO

-- tsql
USE master;
GO
DROP USER babel_3201_db1_log1_user_name_longer_then_64_char_abdhcdjddjdhskdsh
GO
