USE BABEL_ROLE_MEMBER_vu_prepare_db
go

-- Print the current membership status
EXEC BABEL_ROLE_MEMBER_vu_prepare_proc
GO

-- IS_MEMBER and IS_ROLEMEMBER
-- Basic membership check
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3', 'BABEL_ROLE_MEMBER_vu_prepare_role4')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_user2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3', 'BABEL_ROLE_MEMBER_vu_prepare_user3')
GO

-- Not member, should return 0
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role4', 'BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role5')
GO

-- Nested membership check
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_user3')
GO

-- Membership of oneself, should return 1, this also applies to user
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_user1', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('public', 'public')
GO

-- Every db principal is member of PUBLIC
SELECT IS_MEMBER('public')
GO
SELECT IS_ROLEMEMBER('public', 'BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('public', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO

-- Should return 0
SELECT IS_ROLEMEMBER('db_owner', 'BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('db_owner', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO

-- Invalid role/principal name, should return NULL
SELECT IS_MEMBER('xxx')
GO
SELECT IS_ROLEMEMBER('xxx')
GO
SELECT IS_ROLEMEMBER('xxx', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'xxx')
GO
SELECT IS_ROLEMEMBER(NULL, 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', NULL)
GO

-- Given role name is not a real role, should return NULL
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_user1', 'BABEL_ROLE_MEMBER_vu_prepare_user2')
GO

-- NULL input, should return NULL
SELECT IS_MEMBER(NULL)
GO
SELECT IS_ROLEMEMBER(NULL, 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', NULL)
GO
SELECT IS_ROLEMEMBER(NULL, NULL)
GO

-- IS_ROLEMEMBER: Each Input with Trailing Spaces
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1     ', 'BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_role3     ')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3     ', 'BABEL_ROLE_MEMBER_vu_prepare_role4    ')
GO

-- IS_ROLEMEMBER: Each Input with Trailing Spaces - Should return 0
SELECT IS_ROLEMEMBER('db_owner', 'BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('db_owner', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO

-- IS_ROLEMEMBER: Each Input with Trailing Spaces - Should return NULL
SELECT IS_ROLEMEMBER('xxx    ')
GO
SELECT IS_ROLEMEMBER('xxx    ', 'BABEL_ROLE_MEMBER_vu_prepare_user1    ')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1   ', 'xxx    ')
GO

-- IS_MEMBER: Each Input with Trailing Spaces
SELECT IS_MEMBER('public     ')
GO
SELECT IS_MEMBER('xxx    ')
GO

-- IS_ROLEMEMBER, IS_MEMBER: Input with Leading Spaces - should not trim and return NULL
SELECT IS_ROLEMEMBER('    BABEL_ROLE_MEMBER_vu_prepare_role1', '   BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2    ', '   BABEL_ROLE_MEMBER_vu_prepare_role3     ')
GO
SELECT IS_MEMBER('    public')
GO

-- Case insensitive check
SELECT IS_ROLEMEMBER('PUBLIC', 'Babel_role_member_vu_prepare_User1')
GO
SELECT IS_ROLEMEMBER('Babel_role_member_vu_prepare_role1', 'babel_role_member_vu_prepare_ROLE3')
GO
SELECT IS_MEMBER('Public')
GO

-- Connect with different logins to test membership view permission
-- Test on user1
-- tsql      user=BABEL_ROLE_MEMBER_vu_prepare_login1      password=123
USE BABEL_ROLE_MEMBER_vu_prepare_db
GO
SELECT USER_NAME()
GO

-- Should return 1
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_user1')
GO

-- Should return 0
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3')
GO

-- Doesn't have permission, should return NULL
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_user2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role2')
GO

USE master
GO

-- Test on user2
-- tsql      user=BABEL_ROLE_MEMBER_vu_prepare_login2      password=123
USE BABEL_ROLE_MEMBER_vu_prepare_db
GO
SELECT USER_NAME()
GO

-- Should return 1
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_user2')
GO

-- Should return 0
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3')
GO

-- Doesn't have permission, should return NULL 
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_user1')
GO

USE master
GO

-- Test on user3
-- tsql      user=BABEL_ROLE_MEMBER_vu_prepare_login3      password=123
USE BABEL_ROLE_MEMBER_vu_prepare_db
GO
SELECT USER_NAME()
GO

-- Should return 1
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role2')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role1', 'BABEL_ROLE_MEMBER_vu_prepare_role3')
GO
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_user3')
GO

-- Should return 0
SELECT IS_MEMBER('BABEL_ROLE_MEMBER_vu_prepare_role4')
GO

-- Doesn't have permission, should return NULL
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role3', 'BABEL_ROLE_MEMBER_vu_prepare_role4')
GO
SELECT IS_ROLEMEMBER('BABEL_ROLE_MEMBER_vu_prepare_role2', 'BABEL_ROLE_MEMBER_vu_prepare_user2')
GO

-- tsql
USE master
GO
