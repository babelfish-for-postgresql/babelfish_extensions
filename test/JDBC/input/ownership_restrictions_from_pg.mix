-- tsql
CREATE LOGIN ownership_restrictions_from_pg_login1 WITH password = '123';
GO

CREATE ROLE ownership_restrictions_from_pg_role1;
GO

CREATE DATABASE ownership_restrictions_from_pg_db;
GO

DECLARE @ownership_restrictions_from_pg_test_variable  int = 100;
GO

-- psql
CREATE USER ownership_restrictions_from_pg_test_user WITH PASSWORD '12345678' inherit;
go

CREATE USER ownership_restrictions_from_pg_test_su_user WITH SUPERUSER LOGIN PASSWORD 'abc';
GO

-- psql user=ownership_restrictions_from_pg_login1 password=12345678
-- If tsql login connected through psql Alter ROLE of an bbf created logins/user/roles for password,
-- connection limit and valid until should be working fine
-- and the rest of alter role operations should throw an error.
DROP ROLE master_ownership_restrictions_from_pg_role1;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 VALID UNTIL 'infinity';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 rename to master_ownership_restrictions_from_pg_role5;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 with ENCRYPTED password '123';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 with password '123';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 with password NULL;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOCREATEROLE;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 CREATEROLE;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOCREATEDB;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 CREATEDB;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOLOGIN;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 LOGIN;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOSUPERUSER;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 SUPERUSER;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOINHERIT;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 INHERIT;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 REPLICATION;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOREPLICATION;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 BYPASSRLS;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOBYPASSRLS;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 WITH CONNECTION LIMIT 1;
GO

ALTER ROLE ALL IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE ALL IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_ROLE IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_USER IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE SESSION_USER IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_ROLE IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_USER IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE SESSION_USER IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE ownership_restrictions_from_pg_login1 RENAME TO ownership_restrictions_from_pg_role2;
GO

ALTER ROLE ownership_restrictions_from_pg_login1 VALID UNTIL 'infinity';
GO

alter role ownership_restrictions_from_pg_login1 with password '123';
GO

ALTER ROLE ownership_restrictions_from_pg_login1 IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE ownership_restrictions_from_pg_login1 IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

-- If the stmt contains a non-allowed option then altering of role not allowed
ALTER ROLE master_ownership_restrictions_from_pg_role1 WITH NOCREATEDB CONNECTION LIMIT 1  password '123';
GO

ALTER ROLE ownership_restrictions_from_pg_login1 WITH NOCREATEDB CONNECTION LIMIT 1  password '123';
GO

-- psql user=ownership_restrictions_from_pg_test_user password=12345678
-- For plain psql user Alter ROLE of an bbf created logins/user/roles for password,
-- connection limit and valid until should be working fine
-- and the rest of alter role operations should throw an error.
DROP ROLE master_ownership_restrictions_from_pg_role1;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 VALID UNTIL 'infinity';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 rename to master_ownership_restrictions_from_pg_role5;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 with ENCRYPTED password '123';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 with password '123';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 with password NULL;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOCREATEROLE;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 CREATEROLE;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOCREATEDB;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 CREATEDB;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOLOGIN;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 LOGIN;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOSUPERUSER;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 SUPERUSER;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOINHERIT;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 INHERIT;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 REPLICATION;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOREPLICATION;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 BYPASSRLS;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 NOBYPASSRLS;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 WITH CONNECTION LIMIT 1;
GO

ALTER ROLE ALL IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE ALL IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_ROLE IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_USER IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE SESSION_USER IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_ROLE IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE CURRENT_USER IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE SESSION_USER IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE ownership_restrictions_from_pg_login1 RENAME TO ownership_restrictions_from_pg_role2;
GO

ALTER ROLE ownership_restrictions_from_pg_login1 VALID UNTIL 'infinity';
GO

alter role ownership_restrictions_from_pg_login1 with password '123';
GO

ALTER ROLE ownership_restrictions_from_pg_login1 IN DATABASE ownership_restrictions_from_pg_db set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

ALTER ROLE ownership_restrictions_from_pg_login1 IN DATABASE jdbc_testdb set babelfishpg_tsql.ownership_restrictions_from_pg_test_variable = 101;
GO

-- If the stmt contains a non-allowed option then altering of role not allowed
ALTER ROLE master_ownership_restrictions_from_pg_role1 WITH NOCREATEDB CONNECTION LIMIT 1  password '123';
GO

ALTER ROLE ownership_restrictions_from_pg_login1 WITH NOCREATEDB CONNECTION LIMIT 1  password '123';
GO

-- psql user=ownership_restrictions_from_pg_test_su_user password=abc
-- Altering of babelfish created logins/roles should suceeded for superuser
ALTER ROLE ownership_restrictions_from_pg_login1 VALID UNTIL 'infinity';
GO

ALTER ROLE master_ownership_restrictions_from_pg_role1 WITH NOCREATEDB CONNECTION LIMIT 1  password '123';
GO

-- psql
-- Dropping login from psql port should fail
DROP ROLE ownership_restrictions_from_pg_login1;
GO

-- Create a non babelfish role that is a member of master_guest
-- and enable dropping
CREATE ROLE ownership_restrictions_from_pg_role2 IN ROLE master_guest, tempdb_guest, msdb_guest;
GO

DROP ROLE ownership_restrictions_from_pg_role2;
GO

SET enable_drop_babelfish_role = true;
GO

DROP ROLE ownership_restrictions_from_pg_role2;
GO

SET enable_drop_babelfish_role = false;
GO


CREATE ROLE ownership_restrictions_from_pg_role3;
GO

GRANT master_guest TO ownership_restrictions_from_pg_role3;
GRANT tempdb_guest TO ownership_restrictions_from_pg_role3;
GRANT msdb_guest TO ownership_restrictions_from_pg_role3;
GO

DROP ROLE ownership_restrictions_from_pg_role3;
GO

SET enable_drop_babelfish_role = true;
GO

DROP ROLE ownership_restrictions_from_pg_role3;
GO

SET enable_drop_babelfish_role = false;
GO

-- Test a regular role
CREATE ROLE ownership_restrictions_from_pg_role4;
GO

DROP ROLE ownership_restrictions_from_pg_role4;
GO

SET enable_drop_babelfish_role = true;
go
DROP USER ownership_restrictions_from_pg_test_su_user;
go
SET enable_drop_babelfish_role = false;
go

DROP USER ownership_restrictions_from_pg_test_user;
GO

-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL) 
WHERE sys.suser_name(usesysid) = 'ownership_restrictions_from_pg_login1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
GO

-- tsql
DROP DATABASE ownership_restrictions_from_pg_db;
DROP ROLE ownership_restrictions_from_pg_role1;
DROP LOGIN ownership_restrictions_from_pg_login1;
GO
