--------------------------------------------------
--- CREATE PARTITION FUNCTION/SCHEME using procedure
--------------------------------------------------
EXEC PartitionProcedureCreatePartitionFunction
GO

EXEC PartitionProcedureCreatePartitionScheme
GO

EXEC PartitionProcedureCreatePartitionFunctionAndScheme
GO

--------------------------------------------------
--- CREATE PARTITION FUNCTION/SCHEME inside Function
--------------------------------------------------
CREATE FUNCTION TestFunctionCreatePartitionFunction()
RETURNS INT
AS
BEGIN
    CREATE PARTITION FUNCTION TestPartitionFunction (int)
    AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
    RETURN 1;
END;
GO

CREATE FUNCTION TestFunctionDropPartitionFunction()
RETURNS INT
AS
BEGIN
    DROP PARTITION FUNCTION IntPartitionFunction;
    RETURN 1;
END;
GO

CREATE FUNCTION TestFunctionCreatePartitionScheme()
RETURNS INT
AS
BEGIN
    CREATE PARTITION SCHEME TestPartitionScheme AS
    PARTITION IntPartitionFunction
    ALL TO ([PRIMARY]);
    RETURN 1;
END;
GO

CREATE FUNCTION TestFunctionDropPartitionScheme()
RETURNS INT
AS
BEGIN
    DROP PARTITION SCHEME IntPartitionScheme;
    RETURN 1;
END;
GO

---------------------------------------------------------
--- CREATE PARTITION FUNCTION/SCHEME using 2-part name
---------------------------------------------------------

CREATE PARTITION FUNCTION [TestDb].[TwoPartParitionFunction](DATE)
AS RANGE RIGHT FOR VALUES ('20230101', '20230201', '20230301', '20230401');
GO

CREATE PARTITION SCHEME [TestDb].[TwoPartParitionScheme]
AS PARTITION [TestDb].[TwoPartPF]
TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY]);
GO

--------------------------------------------------
--- Unsupported Datatypes for Partition Function 
--------------------------------------------------
CREATE PARTITION FUNCTION VarcharMaxPartitionFunction (VARCHAR(MAX)) 
AS RANGE RIGHT FOR VALUES ('A', 'B', 'C', 'D');
GO

CREATE PARTITION FUNCTION NVarcharMaxPartitionFunction (NVARCHAR(MAX)) 
AS RANGE RIGHT FOR VALUES (N'A', N'B', N'C', N'D');
GO

CREATE PARTITION FUNCTION VarbinaryMaxPartitionFunction (VARBINARY(MAX)) 
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 0xC000);
GO

CREATE PARTITION FUNCTION BinaryMaxPartitionFunction (BINARY(MAX))
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 0xC000);
GO

CREATE PARTITION FUNCTION TextPartitionFunction (text)
AS RANGE RIGHT FOR VALUES ('a', 'b', 'c');
GO

CREATE PARTITION FUNCTION NTextPartitionFunction (ntext)
AS RANGE RIGHT FOR VALUES (N'a', N'b', N'c');
GO

CREATE PARTITION FUNCTION ImagePartitionFunction (image)
AS RANGE RIGHT FOR VALUES (0x123456, 0x789ABC, 0xDEF012);
GO

CREATE PARTITION FUNCTION XmlPartitionFunction (xml)
AS RANGE RIGHT FOR VALUES ('<a>1</a>', '<b>2</b>', '<c>3</c>');
GO

CREATE PARTITION FUNCTION GeometryPartitionFunction (GEOMETRY)
AS RANGE RIGHT FOR VALUES (GEOMETRY::STGeomFromText('POINT(1 1)', 0));
go

CREATE PARTITION FUNCTION GeometryPartitionFunction (GEOGRAPHY)
AS RANGE RIGHT FOR VALUES (GEOMETRY::STGeomFromText('POINT(1 1)', 0));
GO

-- to test rowversion and timestamp
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_rowversion', 'ignore', 'false')
go

CREATE PARTITION FUNCTION RowVersionPartitionFunction (ROWVERSION)
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x0000000000000001, 0x0000000000000002);
go

CREATE PARTITION FUNCTION TimestampPartitionFunction (TIMESTAMP)
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x0000000000000001, 0x0000000000000002);
go

-- reset back the escape hatch
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_rowversion', 'strict', 'true')
go

-- user defined type
CREATE TYPE PartitionUserDefinedType FROM VARCHAR(10);
GO

CREATE PARTITION FUNCTION UdtPartitionFunction (PartitionUserDefinedType)
AS RANGE RIGHT FOR VALUES ('a', 'b', 'c');
GO

DROP type PartitionUserDefinedType
GO

------------------------------------------------------------------------------
--- Duplicate range values for all supported datatypes in Partition Function 
------------------------------------------------------------------------------
CREATE PARTITION FUNCTION IntPartitionFunctionContainsDuplicateValue (int) 
AS RANGE RIGHT FOR VALUES (0, 100, 1000, 100);
GO

CREATE PARTITION FUNCTION BigIntPartitionFunctionContainsDuplicateValue (bigint)
AS RANGE RIGHT FOR VALUES (0, 500, 100, 500, 1000);
GO

CREATE PARTITION FUNCTION SmallIntPartitionFunctionContainsDuplicateValue (smallint) 
AS RANGE RIGHT FOR VALUES (32767, 10, -32768, 0, 10);
GO

CREATE PARTITION FUNCTION TinyIntPartitionFunctionContainsDuplicateValue (tinyint)
AS RANGE RIGHT FOR VALUES (0, 255, 128, 255);
GO

CREATE PARTITION FUNCTION DecimalPartitionFunctionContainsDuplicateValue (decimal(10, 5))
AS RANGE RIGHT FOR VALUES (0.0, 300.0, 200.0, 100.0, 300.0);
GO

CREATE PARTITION FUNCTION NumericPartitionFunctionContainsDuplicateValue (numeric(5, 2))
AS RANGE RIGHT FOR VALUES (0.0, 30.0, 10.0, 20.0, 30.0);
GO

CREATE PARTITION FUNCTION DatePartitionFunctionContainsDuplicateValue (date) 
AS RANGE RIGHT FOR VALUES ('2022-07-01', '2022-01-01','2023-01-01','2022-01-01');
GO

CREATE PARTITION FUNCTION DateTimePartitionFunctionContainsDuplicateValue (datetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01 00:00:00', '2019-01-01 00:00:00', '2022-01-01');
GO

CREATE PARTITION FUNCTION DateTime2PartitionFunctionContainsDuplicateValue (datetime2(3))
AS RANGE RIGHT FOR VALUES ('2022-01-01 00:00:00.000', '2022-07-01 00:00:00.000', '2019-01-01 00:00:00.000', '2022-07-01 00:00:00.000');
GO

CREATE PARTITION FUNCTION SmallDateTimePartitionFunctionContainsDuplicateValue (smalldatetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01', '2019-01-01', '2022-07-01');
GO

CREATE PARTITION FUNCTION CharPartitionFunctionContainsDuplicateValue (char(5))
AS RANGE RIGHT FOR VALUES ('A', 'F', 'K', 'P', 'U', 'Z', 'D', 'K');
GO

CREATE PARTITION FUNCTION VarCharPartitionFunctionContainsDuplicateValue (varchar(10))
AS RANGE RIGHT FOR VALUES ('Apple', 'Banana', 'Mango', 'Cherry', 'Date', 'Banana');
GO

CREATE PARTITION FUNCTION NVarCharPartitionFunctionContainsDuplicateValue (nvarchar(10))
AS RANGE RIGHT FOR VALUES (N'Apple', N'Banana', N'Mango', N'Cherry', N'Date', N'Banana');
GO

CREATE PARTITION FUNCTION NCharPartitionFunctionContainsDuplicateValue (nchar(5))
AS RANGE RIGHT FOR VALUES (N'A', N'F', N'K', N'P', N'U', N'Z', N'B',  N'K');
GO

CREATE PARTITION FUNCTION BinaryPartitionFunctionContainsDuplicateValue (binary(4))
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 0xC000, 0x800);
GO

CREATE PARTITION FUNCTION VarBinaryPartitionFunctionContainsDuplicateValue (varbinary(8))
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x8000000000000000, 0x4000000000000000, 0xC000000000000000, 0x8000000000000000);
GO

CREATE PARTITION FUNCTION UniqueIdentifierPartitionFunctionContainsDuplicateValue (uniqueidentifier)
AS RANGE RIGHT FOR VALUES ('00000000-0000-0000-0000-000000000000', '6F9619FF-8B86-D011-B42D-00C04FC964FF', 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF', '6F9619FF-8B86-D011-B42D-00C04FC964FF');
GO

CREATE PARTITION FUNCTION SqlVariantPartitionFunctionContainsDuplicateValue (sql_variant)
AS RANGE RIGHT FOR VALUES (1, 'abc', CONVERT(DATETIME, '2023-05-01'), 'abc');
go

-- duplicate value with different basetype 
CREATE PARTITION FUNCTION SqlVariantPartitionFunctionContainsDuplicateValue (sql_variant)
AS RANGE RIGHT FOR VALUES (1, cast('abc' as varchar(10)), CONVERT(DATETIME, '2023-05-01'), cast('abc' as nvarchar(10)));
go

--------------------------------------------------
--- Unsupported Options with Partition Function 
--------------------------------------------------
-- LEFT option is not supported in Babelfish
CREATE PARTITION FUNCTION PartitionFunctionWithLeft (int)
AS RANGE LEFT FOR VALUES (10, 1000, 10000);
GO

-- by default it is LEFT and it should throw error
CREATE PARTITION FUNCTION PartitionFunctionWithLeft (int)
AS RANGE FOR VALUES (10, 1000, 10000);
GO

--------------------------------------------------
--- Duplicate Create of Partition Function/Scheme
--------------------------------------------------
CREATE PARTITION FUNCTION IntPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
GO

-- duplicate partition function with invalid args
CREATE PARTITION FUNCTION IntPartitionFunction (int)
AS RANGE RIGHT FOR VALUES ('xyz', CONVERT(DATETIME, '2023-05-01'), 0x789ABC);
GO

CREATE PARTITION SCHEME IntPartitionScheme AS
PARTITION IntPartitionFunction 
ALL TO ([PRIMARY]);
GO

-- duplicate partition scheme with invalid Partition function
CREATE PARTITION SCHEME IntPartitionScheme AS
PARTITION PartitionFunctionDoesNotExists 
ALL TO ([PRIMARY]);
GO

-----------------------------------------------------------------------------------
--- Drop of of Partition Function/Scheme when it does not exists
-----------------------------------------------------------------------------------
DROP PARTITION FUNCTION PartitionFunctionDoesNotExists
GO

DROP PARTITION SCHEME PartitionSchemeDoesNotExists
GO

-----------------------------------------------------------------------------------
--- Create of Partition Scheme when provided partition function doesn't exists
-----------------------------------------------------------------------------------
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION PartitionFunctionDoesNotExists
ALL TO ([PRIMARY]);
GO

-----------------------------------------------------------------------------------
--- Drop of of Partition Function when there is dependent Partition Scheme
-----------------------------------------------------------------------------------
DROP PARTITION FUNCTION IntPartitionFunction
GO


-----------------------------------------------
--- Filegroup behaviour with Partition Scheme 
-----------------------------------------------

-- by default user filegroup will be treated as PRIMARY filegroup
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
ALL TO (user_filegroup);
GO

DROP PARTITION SCHEME TestPartitionScheme
GO

-- User can configure the "escape_hatch_storage_options" to STRICT to disallow user filegroups
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_storage_options', 'strict', 'false')
GO

-- should throw error
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
ALL TO (user_filegroup);
GO

-- reset it back
SELECT SET_CONFIG('babelfishpg_tsql.escape_hatch_storage_options', 'ignore', 'false')
GO

-- when more than one filegroup are specified with ALL option
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
ALL TO ([PRIMARY], [PRIMARY], [PRIMARY]);
GO

-- when partition function generates more partition than specified filegroups
CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION IntPartitionFunction
TO ([PRIMARY], [PRIMARY], [PRIMARY]);
GO

---------------------------------
--- Metadata Related Tests
---------------------------------

SELECT * FROM GetPartitionFunctionMetadataView
GO

SELECT * FROM GetRangeMetadataView
GO

SELECT * FROM GetRangeMetadataVarBinaryFunctionView
GO

SELECT * FROM GetParameterMetadataView
GO

SELECT * FROM GetPartitionSchemesMetadataView
GO

SELECT * FROM PartitionFunctionContainsDuplicateName()
GO

SELECT * FROM PartitionFunctionContainsDuplicateIDs()
GO

SELECT * FROM PartitionSchemeContainsDuplicateName()
GO

SELECT * FROM PartitionSchemeContainsDuplicateIDs()
GO



--------------------------------------------------
--- Test Partition Function Argument Limit
--------------------------------------------------
-- create with max allowed limit
DECLARE @partition_count INT = 14998;
DECLARE @partition_interval INT = 1000;
DECLARE @partition_function_definition VARCHAR(MAX) = 'CREATE PARTITION FUNCTION PartitionFunctionWith14999Arg (int) AS RANGE RIGHT FOR VALUES (';

-- Build the partition function definition

DECLARE @i INT = 1;

WHILE @i <= @partition_count

BEGIN
    SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ', '
    SET @i = @i + 1;

END
SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ')'

-- Execute the partition function creation
EXEC (@partition_function_definition)
GO

SELECT fanout FROM sys.partition_functions WHERE name = 'PartitionFunctionWith14999Arg'
GO

DROP PARTITION FUNCTION PartitionFunctionWith14999Arg
GO

-- create when arg > max allowed limit should throw error
DECLARE @partition_count INT = 14999;
DECLARE @partition_interval INT = 1000;
DECLARE @partition_function_definition VARCHAR(MAX) = 'CREATE PARTITION FUNCTION PartitionFunctionWith15000Arg (int) AS RANGE RIGHT FOR VALUES (';

-- Build the partition function definition

DECLARE @i INT = 1;

WHILE @i <= @partition_count

BEGIN
    SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ', '
    SET @i = @i + 1;

END
SET @partition_function_definition = @partition_function_definition + CAST((@i * @partition_interval) AS VARCHAR(10)) + ')'

-- Execute the partition function creation
EXEC (@partition_function_definition)
GO


--------------------------------------------------
--- Test Partition Function/Scheme Name Limit 
--------------------------------------------------
CREATE PARTITION FUNCTION PartitionFunctionNameGreaterThan128abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz (bigint)
AS RANGE RIGHT FOR VALUES (0, 10000, 100, 1000);
GO

CREATE PARTITION SCHEME PartitionSchemeNameGreaterThan128abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz AS
PARTITION PartitionFunctionDoesNotExists 
ALL TO ([PRIMARY]);
GO


--------------------------------------------------
--- TO test Permission
--------------------------------------------------
USE PartitionDb;
GO

CREATE LOGIN partition_l1 WITH PASSWORD = '12345678';
GO

CREATE USER partition_u1 FOR LOGIN partition_l1;
GO

-- tsql     user=partition_l1 password=12345678
USE PartitionDb;
GO

SELECT CURRENT_USER
GO

-- CREATE/DROP should throw permission error
CREATE PARTITION FUNCTION TestPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
Go

CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION PartitionFunctionDoesNotExists
ALL TO ([PRIMARY]);
GO

DROP PARTITION FUNCTION IntPartitionFunction
go

DROP PARTITION SCHEME IntPartitionScheme
go

-- but they can access the metadata 
SELECT 
        name, type, type_desc, fanout, boundary_value_on_right, is_system
    FROM 
        sys.partition_functions
go

SELECT 
       ps.name as scheme_name, pf.name as function_name, ps.type, ps.type_desc, ps.is_default, ps.is_system
    FROM 
        sys.partition_schemes ps
    INNER JOIN 
        sys.partition_functions pf on (ps.function_id = pf.function_id)
go

-- make the user a DB owner
-- tsql
USE PartitionDb;
GO

DROP USER partition_u1;
GO

execute sp_changedbowner 'partition_l1'
GO

-- tsql     user=partition_l1 password=12345678
USE PartitionDb;
GO

SELECT CURRENT_USER
GO
--  CREATE/DROP should work now
CREATE PARTITION FUNCTION TestPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, 10000);
Go

CREATE PARTITION SCHEME TestPartitionScheme AS
PARTITION TestPartitionFunction
ALL TO ([PRIMARY]);
GO

DROP PARTITION SCHEME TestPartitionScheme
go

DROP PARTITION FUNCTION TestPartitionFunction
go

-- tsql
USE master
GO

------------------------------------------------------------------------------------------------------------
--- Test error during Implicit Conversion of range values in Partition Function for each datatypes
------------------------------------------------------------------------------------------------------------
CREATE PARTITION FUNCTION NewIntPartitionFunction (int)
AS RANGE RIGHT FOR VALUES (500, 1000, cast('xyz' as varchar));

-- having duplicates also, but first it should try to convert and fail
CREATE PARTITION FUNCTION NewBigIntPartitionFunction (bigint)
AS RANGE RIGHT FOR VALUES (1000,  1000, 1000, cast('xyz' as varchar), 1000, 1000);
GO

CREATE PARTITION FUNCTION NewSmallIntPartitionFunction (smallint) 
AS RANGE RIGHT FOR VALUES ('xyz', 32767, -32768);
GO

CREATE PARTITION FUNCTION NewTinyIntPartitionFunction (tinyint)
AS RANGE RIGHT FOR VALUES (0, 255, cast('xyz' as varchar));
GO

CREATE PARTITION FUNCTION NewDecimalPartitionFunction (decimal(10, 5))
AS RANGE RIGHT FOR VALUES (0.0, 300.0, 200.0, 'xyz');
GO

CREATE PARTITION FUNCTION NewNumericPartitionFunction (numeric(5, 2))
AS RANGE RIGHT FOR VALUES (0.0, 30.0, 10.0, 'xyz');
GO

CREATE PARTITION FUNCTION NewDatePartitionFunction (date) 
AS RANGE RIGHT FOR VALUES ('2022-07-01', '2022-01-01','xyz');
GO

CREATE PARTITION FUNCTION NewDateTimePartitionFunction (datetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01 00:00:00', 'xyz');
GO

CREATE PARTITION FUNCTION NewDateTime2PartitionFunction (datetime2(3))
AS RANGE RIGHT FOR VALUES ('2022-01-01 00:00:00.000', '2022-07-01 00:00:00.000', 'xyz');
GO

CREATE PARTITION FUNCTION NewSmallDateTimePartitionFunction (smalldatetime)
AS RANGE RIGHT FOR VALUES ('2022-01-01', '2022-07-01', cast(0x123 as binary(4)));
GO

CREATE PARTITION FUNCTION NewCharPartitionFunction (char(5))
AS RANGE RIGHT FOR VALUES ('A', 'F', 'K', 'P', 'U', 'Z', cast(0x123 as binary(4)));
GO

CREATE PARTITION FUNCTION NewNCharPartitionFunction (nchar(5))
AS RANGE RIGHT FOR VALUES (N'A', N'F', N'K', N'P', N'U', N'Z', cast(0x123 as binary(4)));
GO

CREATE PARTITION FUNCTION NewBinaryPartitionFunction (binary(4))
AS RANGE RIGHT FOR VALUES (0x000, 0x800, 0x400, 'xyz');
GO

CREATE PARTITION FUNCTION NewVarBinaryPartitionFunction (varbinary(8))
AS RANGE RIGHT FOR VALUES (0x0000000000000000, 0x8000000000000000, 0x4000000000000000, 'xyz');
GO

CREATE PARTITION FUNCTION NewUniqueIdentifierPartitionFunction (uniqueidentifier)
AS RANGE RIGHT FOR VALUES ('00000000-0000-0000-0000-000000000000', 'FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF', 123);
GO


--------------------------------------------------
--- DROP PARTITION FUNCTION/SCHEME using procedure
--------------------------------------------------
EXEC PartitionProcedureDropPartitionScheme
GO

EXEC PartitionProcedureDropPartitionFunction
GO

EXEC PartitionProcedureDropPartitionFunctionAndScheme
GO