CREATE VIEW atn2_vu_prepare_v1 AS (SELECT ATN2(2, 3));
GO

-- test with all datatypes that could implicity converted to float
CREATE VIEW atn2_vu_prepare_v2 AS (
    SELECT 
        ATN2(CAST(2 AS INT), CAST(3 AS INT)) AS res1,
        ATN2(CAST(2.5 AS FLOAT), CAST(3.5 AS FLOAT)) AS res2,
        ATN2(CAST(2.5 AS REAL), CAST(3.5 AS REAL)) AS res3,
        ATN2(CAST(2.5 AS BIGINT), CAST(3.5 AS BIGINT)) AS res4,
        ATN2(CAST(2.5 AS SMALLINT), CAST(3.5 AS SMALLINT)) AS res5,
        ATN2(CAST(2.5 AS TINYINT), CAST(3.5 AS TINYINT)) AS res6,
        ATN2(CAST('$2.5' AS MONEY), CAST('$3.5' AS MONEY)) AS res7,
        ATN2(CAST('$2.5' AS SMALLMONEY), CAST('$3.5' AS SMALLMONEY)) AS res8,
        ATN2(CAST(2.5 AS DECIMAL), CAST(3.5 AS DECIMAL)) AS res9,
        ATN2(CAST(2.5 AS NUMERIC), CAST(3.5 AS NUMERIC)) AS res10,
        ATN2(CAST('2.5' AS CHAR), CAST('3.5' AS CHAR)) AS res11,
        ATN2(CAST('2.5' AS VARCHAR), CAST('3.5' AS VARCHAR)) AS res12,
        ATN2(CAST('2.5' AS NCHAR), CAST('3.5' AS NCHAR)) AS res13,
        ATN2(CAST('2.5' AS NVARCHAR), CAST('3.5' AS NVARCHAR)) AS res14
    );
GO

-- returns NULL when input is NULL
CREATE VIEW atn2_vu_prepare_v3 AS (
    SELECT 
        ATN2(NULL, 1) AS res1,
        ATN2(1, NULL) AS res2,
        ATN2(NULL, NULL) AS res3
    );
GO

-- expect float overflow error
CREATE VIEW atn2_vu_prepare_v4 AS (SELECT ATN2(1.79E+309, 1));
GO

-- won't over flow
CREATE VIEW atn2_vu_prepare_v5 AS (SELECT ATN2(1.79E+308, 1));
GO


-- test in procedures
CREATE PROCEDURE atn2_vu_prepare_p1 AS (SELECT ATN2(2, 3));
GO

-- test with all datatypes that could implicity converted to float
CREATE PROCEDURE atn2_vu_prepare_p2 AS (SELECT ATN2(CAST(2 AS INT), CAST(3 AS INT)));
GO

CREATE PROCEDURE atn2_vu_prepare_p3 AS (SELECT ATN2(CAST(2.5 AS FLOAT), CAST(3.5 AS FLOAT)));
GO

CREATE PROCEDURE atn2_vu_prepare_p4 AS (SELECT ATN2(CAST(2.5 AS REAL), CAST(3.5 AS REAL)));
GO

CREATE PROCEDURE atn2_vu_prepare_p5 AS (SELECT ATN2(CAST(2.5 AS BIGINT), CAST(3.5 AS BIGINT)));
GO

CREATE PROCEDURE atn2_vu_prepare_p6 AS (SELECT ATN2(CAST(2.5 AS SMALLINT), CAST(3.5 AS SMALLINT)));
GO

CREATE PROCEDURE atn2_vu_prepare_p7 AS (SELECT ATN2(CAST(2.5 AS TINYINT), CAST(3.5 AS TINYINT)));
GO

CREATE PROCEDURE atn2_vu_prepare_p8 AS (SELECT ATN2(CAST('$2.5' AS MONEY), CAST('$3.5' AS MONEY)));
GO

CREATE PROCEDURE atn2_vu_prepare_p9 AS (SELECT ATN2(CAST('$2.5' AS SMALLMONEY), CAST('$3.5' AS SMALLMONEY)));
GO

CREATE PROCEDURE atn2_vu_prepare_p10 AS (SELECT ATN2(CAST(2.5 AS DECIMAL), CAST(3.5 AS DECIMAL)));
GO

CREATE PROCEDURE atn2_vu_prepare_p11 AS (SELECT ATN2(CAST(2.5 AS NUMERIC), CAST(3.5 AS NUMERIC)));
GO

CREATE PROCEDURE atn2_vu_prepare_p12 AS (SELECT ATN2(CAST('2.5' AS CHAR), CAST('3.5' AS CHAR)));
GO

CREATE PROCEDURE atn2_vu_prepare_p13 AS (SELECT ATN2(CAST('2.5' AS VARCHAR), CAST('3.5' AS VARCHAR)));
GO

CREATE PROCEDURE atn2_vu_prepare_p14 AS (SELECT ATN2(CAST('2.5' AS NCHAR), CAST('3.5' AS NCHAR)));
GO

CREATE PROCEDURE atn2_vu_prepare_p15 AS (SELECT ATN2(CAST('2.5' AS NVARCHAR), CAST('3.5' AS NVARCHAR)));
GO

-- returns NULL when input is NULL
CREATE PROCEDURE atn2_vu_prepare_p16 AS (SELECT ATN2(NULL, 1));
GO

CREATE PROCEDURE atn2_vu_prepare_p17 AS (SELECT ATN2(1, NULL));
GO

CREATE PROCEDURE atn2_vu_prepare_p18 AS (SELECT ATN2(NULL, NULL));
GO

-- expect float overflow
CREATE PROCEDURE atn2_vu_prepare_p19 AS (SELECT ATN2(1.79E+309, 1));
GO

-- won't over flow
CREATE PROCEDURE atn2_vu_prepare_p20 AS (SELECT ATN2(1.79E+308, 1));
GO


-- test in functions
CREATE FUNCTION atn2_vu_prepare_f1()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(2, 3));
END;
GO

-- test with all datatypes that could implicity converted to float
CREATE FUNCTION atn2_vu_prepare_f2()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2 AS INT), CAST(3 AS INT)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f3()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS FLOAT), CAST(3.5 AS FLOAT)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f4()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS REAL), CAST(3.5 AS REAL)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f5()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS BIGINT), CAST(3.5 AS BIGINT)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f6()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS SMALLINT), CAST(3.5 AS SMALLINT)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f7()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS TINYINT), CAST(3.5 AS TINYINT)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f8()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST('$2.5' AS MONEY), CAST('$3.5' AS MONEY)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f9()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST('$2.5' AS SMALLMONEY), CAST('$3.5' AS SMALLMONEY)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f10()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS DECIMAL), CAST(3.5 AS DECIMAL)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f11()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST(2.5 AS NUMERIC), CAST(3.5 AS NUMERIC)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f12()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST('2.5' AS CHAR), CAST('3.5' AS CHAR)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f13()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST('2.5' AS VARCHAR), CAST('3.5' AS VARCHAR)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f14()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST('2.5' AS NCHAR), CAST('3.5' AS NCHAR)));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f15()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(CAST('2.5' AS NVARCHAR), CAST('3.5' AS NVARCHAR)));
END;
GO


-- returns NULL when input is NULL
CREATE FUNCTION atn2_vu_prepare_f16()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(NULL, 1));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f17()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(1, NULL));
END;
GO

CREATE FUNCTION atn2_vu_prepare_f18()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(NULL, NULL));
END;
GO

-- expect flout overflow
CREATE FUNCTION atn2_vu_prepare_f19()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(1.79E+309, 1));
END;
GO

-- won't overflow
CREATE FUNCTION atn2_vu_prepare_f20()
RETURNS FLOAT AS
BEGIN
RETURN (SELECT ATN2(1.79E+308, 1));
END;
GO
