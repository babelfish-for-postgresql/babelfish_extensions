-- =============== Setup ===============

-- tsql
DROP TABLE IF EXISTS t_perms_by_name;
GO

CREATE TABLE t_perms_by_name (col1 INT, col2 VARCHAR(16));
GO

CREATE LOGIN user_perms_by_name WITH PASSWORD='test';
GO

CREATE DATABASE db_perms_by_name;
GO

USE db_perms_by_name;
GO

DROP TABLE IF EXISTS t_perms_by_name;
GO

CREATE TABLE t_perms_by_name (col1 INT, col2 VARCHAR(16));
GO

CREATE SCHEMA s_perms_by_name;
GO

CREATE TABLE s_perms_by_name.t_perms_by_name (col1 INT, col2 VARCHAR(16));
GO

DROP TABLE IF EXISTS [.t perms.by.name.];
GO

CREATE TABLE [.t perms.by.name.] ([.column perms.by.name.] INT);
GO

DROP TABLE IF EXISTS [ t.perms by name ];
GO

CREATE TABLE [ t.perms by name ] ([ column perms.by.name ] INT);
GO

DROP VIEW IF EXISTS v_perms_by_name;
GO

CREATE VIEW v_perms_by_name AS
	SELECT * FROM t_perms_by_name;
GO

DROP FUNCTION IF EXISTS scalar_function_perms_by_name;
GO

CREATE FUNCTION scalar_function_perms_by_name()
RETURNS int
AS
BEGIN
   DECLARE @retval int
   SELECT @retval = COUNT(*) FROM t_perms_by_name
   RETURN @retval
END;
GO

DROP FUNCTION IF EXISTS table_function_perms_by_name;
GO

CREATE FUNCTION table_function_perms_by_name(@empid int)
RETURNS table
AS
RETURN
(
	SELECT * FROM t_perms_by_name WHERE col1 = @empid
);
GO

DROP PROCEDURE IF EXISTS proc_perms_by_name;
GO

CREATE procedure proc_perms_by_name AS
	SELECT * FROM t_perms_by_name
GO

DROP USER IF EXISTS user_perms_by_name;
GO

CREATE USER user_perms_by_name FOR LOGIN user_perms_by_name;
GO

GRANT ALL ON t_perms_by_name TO user_perms_by_name;
GO

GRANT ALL ON [.t perms.by.name.] TO user_perms_by_name;
GO

GRANT ALL ON [ t.perms by name ] TO user_perms_by_name;
GO

GRANT ALL ON v_perms_by_name TO user_perms_by_name;
GO

GRANT ALL ON scalar_function_perms_by_name TO user_perms_by_name;
GO

GRANT ALL ON table_function_perms_by_name TO user_perms_by_name;
GO

GRANT ALL ON proc_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT CURRENT_USER;
GO



-- =============== Tables ===============

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'INSERT');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'DELETE');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'REFERENCES');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
SELECT CURRENT_USER
GO

REVOKE SELECT ON OBJECT::db_perms_by_name.dbo.t_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'UPDATE');
GO

-- tsql
REVOKE ALL ON OBJECT::db_perms_by_name.dbo.t_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'ANY');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name]."dbo".[t_perms_by_name]','OBJECT', 'ANY');
GO

-- tsql
GRANT REFERENCES ON OBJECT::db_perms_by_name.dbo.t_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'ANY');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name]."dbo".[t_perms_by_name]','OBJECT', 'ANY');
GO

SELECT HAS_PERMS_BY_NAME('"db_perms_by_name".[dbo]."t_perms_by_name"','OBJECT', 'ANY');
GO

-- tsql
GRANT ALL ON OBJECT::db_perms_by_name.dbo.t_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT');
GO



-- =============== Views ===============

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'INSERT');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'DELETE');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'REFERENCES');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE SELECT ON OBJECT::v_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'UPDATE');
GO

-- tsql
REVOKE ALL ON OBJECT::v_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT REFERENCES ON OBJECT::v_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT ALL ON OBJECT::v_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'SELECT');
GO



-- =============== Columns ===============

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'UPDATE', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'INSERT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'DELETE', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'REFERENCES', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'EXECUTE', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

USE master;
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'SELECT', '[col1]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'SELECT');
GO

-- tsql
REVOKE SELECT ON OBJECT::db_perms_by_name.dbo.t_perms_by_name FROM user_perms_by_name;
GRANT SELECT (col2) ON OBJECT::db_perms_by_name.dbo.t_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('v_perms_by_name','OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col2', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'UPDATE', 'col1', 'COLUMN');
GO

-- tsql
REVOKE ALL ON OBJECT::db_perms_by_name.dbo.t_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'ANY', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name]."dbo".[t_perms_by_name]','OBJECT', 'ANY', '"col1"', 'COLUMN');
GO

-- tsql
GRANT REFERENCES (col1) ON OBJECT::db_perms_by_name.dbo.t_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'ANY', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name]."dbo".[t_perms_by_name]','OBJECT', 'ANY', '"col1"', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('"db_perms_by_name".[dbo]."t_perms_by_name"','OBJECT', 'ANY', '"col1"', 'COLUMN');
GO

-- tsql
GRANT ALL ON OBJECT::db_perms_by_name.dbo.t_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT');
GO



-- =============== Scalar-valued functions ===============

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'INSERT');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'DELETE');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'REFERENCES');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE EXECUTE ON OBJECT::scalar_function_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE ALL ON OBJECT::scalar_function_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT EXECUTE ON OBJECT::scalar_function_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT ALL ON OBJECT::scalar_function_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('scalar_function_perms_by_name','OBJECT', 'EXECUTE');
GO



-- =============== Table-valued functions ===============

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'INSERT');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'DELETE');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'REFERENCES');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE EXECUTE ON OBJECT::table_function_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE ALL ON OBJECT::table_function_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT EXECUTE ON OBJECT::table_function_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT ALL ON OBJECT::table_function_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('table_function_perms_by_name','OBJECT', 'EXECUTE');
GO



-- =============== Procedures ===============

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'INSERT');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'DELETE');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'REFERENCES');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE EXECUTE ON OBJECT::proc_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'EXECUTE');
GO

-- tsql
REVOKE ALL ON OBJECT::proc_perms_by_name FROM user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT EXECUTE ON OBJECT::proc_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'ANY');
GO

-- tsql
GRANT ALL ON OBJECT::proc_perms_by_name TO user_perms_by_name;
GO

-- tsql user=user_perms_by_name password=test
USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('proc_perms_by_name','OBJECT', 'EXECUTE');
GO



-- =============== Database permissions ================

SELECT HAS_PERMS_BY_NAME(db_name(),'DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME(db_name(),'DATABASE', 'CREATE SCHEMA');
GO

-- tsql
USE master;
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CONNECT REPLICATION');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE SCHEMA');
GO

USE msdb;
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE SCHEMA');
GO

USE tempdb;
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE SCHEMA');
GO

USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('msdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('tempdb','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('non_existent_db','DATABASE', 'CREATE SCHEMA');
GO

-- tsql user=user_perms_by_name password=test
USE master;
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE SCHEMA');
GO

USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('master','DATABASE', 'CREATE SCHEMA');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE TABLE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name','DATABASE', 'CREATE SCHEMA');
GO



-- =============== Server permissions ================

-- tsql
USE master;
GO

SELECT HAS_PERMS_BY_NAME(NULL, 'DATABASE', 'VIEW SERVER STATE');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name', NULL, 'VIEW SERVER STATE');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name', 'SERVER', 'VIEW SERVER STATE');
GO

-- Unsupported permission for server
SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'ALTER ANY ENDPOINT');
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'VIEW SERVER STATE');
GO

SELECT HAS_PERMS_BY_NAME(NULL, 'SERVER', 'VIEW SERVER STATE');
GO

USE tempdb;
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'VIEW SERVER STATE');
GO

USE msdb;
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'VIEW SERVER STATE');
GO

USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'VIEW SERVER STATE');
GO

-- tsql user=user_perms_by_name password=test
USE master;
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'VIEW SERVER STATE');
GO

USE db_perms_by_name;
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'VIEW SERVER STATE');
GO



-- =============== Object name splitting ================

-- invalid table spec (five part name or more)
SELECT HAS_PERMS_BY_NAME('invalid.server.db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('server.db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].[dbo].[t_perms_by_name]','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].[dbo].[t_perms_by_name]','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('master.dbo.t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('[dbo].[t_perms_by_name]','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('[dbo].[t_perms_by_name]','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('dbo.t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('dbo.t_perms_by_name','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('s_perms_by_name.t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('[t_perms_by_name]','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('[t_perms_by_name]','OBJECT', 'UPDATE');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.dbo.t_perms_by_name','OBJECT', 'SELECT', '[col1]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].[dbo].[t_perms_by_name]','OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].dbo.[t_perms_by_name]','OBJECT', 'SELECT', '[col1]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.[dbo].[t_perms_by_name]','OBJECT', 'UPDATE', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.[dbo.t_perms_by_name','OBJECT', 'SELECT', '[col1]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].dbo.[t_perms_by_name]','OBJECT', 'SELECT', 'col1]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].dbo.[t_perms_by_name]','OBJECT', 'SELECT', '[col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name]','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('"db_perms_by_name".dbo."t_perms_by_name"','OBJECT', 'SELECT', '"col1"', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name"','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('"t_perms_by_name','OBJECT', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('[db_perms_by_name].dbo."t_perms_by_name"', 'OBJECT', 'SELECT', '"col1"', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('db_perms_by_name.."t_perms_by_name"', 'OBJECT', 'SELECT', '"col1"', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('master..t_perms_by_name', 'OBJECT', 'SELECT', '"col1"', 'COLUMN');
GO



-- =============== Special handling ================

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col1', 'non_existing_sub_securable_class');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'non_existing_column', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'non_existing_permission');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','non_existing_securable_class', 'SELECT');
GO

SELECT HAS_PERMS_BY_NAME('non_existing_table','OBJECT', 'UPDATE');
GO

-- test permission type that only exists in SQL Server
SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'ALTER');
GO

-- test permission type that only exists in Postgres
SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'TRUNCATE');
GO

-- test unsupported securable class
SELECT HAS_PERMS_BY_NAME(db_name(), 'SEARCH PROPERTY LIST', 'CONTROL');
GO

-- test invalid sub-securable_class
SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col1', 'TABLE');
GO

-- test invalid securable class for sub-securable_class
SELECT HAS_PERMS_BY_NAME('t_perms_by_name','DATABASE', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col1', NULL);
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', NULL, 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', NULL, 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name', NULL, 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME(NULL, 'OBJECT', 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME(NULL, NULL, 'SELECT', 'col1', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('dbo.t_perms_by_name     ','OBJECT    ', 'SELECT   ', 'col2   ', 'COLUMN ');
GO

SELECT HAS_PERMS_BY_NAME('dBo.t_PeRmS_bY_nAmE','oBjEcT', 'sElEcT', 'CoL2', 'cOlUmN');
GO

SELECT HAS_PERMS_BY_NAME('  t_perms_by_name','OBJECT', 'SELECT', 'col2', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name',' OBJECT', 'SELECT', 'col2', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', ' SELECT', 'col2', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', ' col2', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('t_perms_by_name','OBJECT', 'SELECT', 'col2', ' COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[.t perms.by.name.]', 'OBJECT', 'SELECT')
GO

SELECT HAS_PERMS_BY_NAME('".t perms.by.name."', 'OBJECT', 'SELECT')
GO

SELECT HAS_PERMS_BY_NAME('[ t.perms by name ]', 'OBJECT', 'SELECT')
GO

SELECT HAS_PERMS_BY_NAME('" t.perms by name "', 'OBJECT', 'SELECT')
GO

SELECT HAS_PERMS_BY_NAME('[.t perms.by.name.]', 'OBJECT', 'SELECT', '".column perms.by.name."', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('".t perms.by.name."', 'OBJECT', 'SELECT', '[.column perms.by.name.]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[.t perms.by.name.]', 'OBJECT', 'ANY', '".column perms.by.name."', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('".t perms.by.name."', 'OBJECT', 'ANY', '[.column perms.by.name.]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[ t.perms by name ]', 'OBJECT', 'SELECT', '" column perms.by.name "', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('" t.perms by name "', 'OBJECT', 'SELECT', '[ column perms.by.name ]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[ t.perms by name ]', 'OBJECT', 'ANY', '" column perms.by.name "', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('" t.perms by name "', 'OBJECT', 'ANY', '[ column perms.by.name ]', 'COLUMN');
GO

SELECT HAS_PERMS_BY_NAME('[ non.existent.db ].".non existent.schema.".[non .. existent table]', 'OBJECT', 'SELECT', '[. non. existent.column]', 'COLUMN');
GO

USE master;
GO



-- =============== Cleanup ===============

-- tsql
USE db_perms_by_name;
GO

DROP PROCEDURE proc_perms_by_name;
GO

DROP FUNCTION table_function_perms_by_name;
GO

DROP FUNCTION scalar_function_perms_by_name;
GO

DROP VIEW IF EXISTS v_perms_by_name;
GO

DROP TABLE IF EXISTS t_perms_by_name;
GO

DROP TABLE IF EXISTS s_perms_by_name.t_perms_by_name;
GO

DROP SCHEMA s_perms_by_name
GO

DROP TABLE IF EXISTS [.t perms.by.name.];
GO

DROP TABLE IF EXISTS [ t.perms by name ];
GO

USE master;
GO

DROP DATABASE db_perms_by_name;
GO

DROP LOGIN user_perms_by_name;
GO

DROP TABLE IF EXISTS t_perms_by_name;
GO
