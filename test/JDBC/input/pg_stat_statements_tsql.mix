-- psql
CREATE EXTENSION pg_stat_statements WITH SCHEMA sys;
go

-- psql
SET sys.pg_stat_statements.track = 'none';
SELECT sys.pg_stat_statements_reset();
go

-- tsql
SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

--
-- simple and compound statements
--

-- tsql
SELECT 1 AS "int";
go


SELECT 'hello'
  -- multiline
  AS "text";
go

SELECT 'world' AS "text";
go

-- transaction
-- BEGIN TRANSACTION;
-- SELECT 1 AS "int";
-- SELECT 'hello' AS "text";
-- COMMIT TRANSACTION;
-- go

-- database
-- CREATE DATABASE pgss_db
-- go
-- DROP DATABASE pgss_db
-- go

-- tsql
-- login
-- CREATE LOGIN  pgss_l1 with password = '12345678'
-- go
-- DROP LOGIN  pgss_l1
-- go

SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- psql
SELECT sys.pg_stat_statements_reset();
go

-- tsql
-- CRUD: INSERT SELECT UPDATE DELETE on test table

-- utility "create table" should not be shown
CREATE TABLE pgss_test (a int, b char(20));
go

-- tsql
CREATE TRIGGER pgss_trigger1 on [dbo].[pgss_test] for insert as
PRINT 'after insert trigger called'
go

INSERT INTO pgss_test VALUES(generate_series(1, 10), 'aaa');
go
UPDATE pgss_test SET b = 'bbb' WHERE a > 7;
DELETE FROM pgss_test WHERE a > 9;
go
TRUNCATE TABLE pgss_test;
go

-- create role & permissions(grant revoke)
CREATE ROLE pgss_test_role
go
GRANT INSERT, UPDATE, SELECT ON pgss_test TO pgss_test_role
go
REVOKE INSERT, UPDATE, SELECT ON pgss_test FROM pgss_test_role
go

-- alter 
ALTER TABLE pgss_test ENABLE TRIGGER pgss_trigger1
go
ALTER TABLE pgss_test DISABLE  TRIGGER pgss_trigger1
go

-- explicit transaction
-- BEGIN TRANSACTION;
-- UPDATE pgss_test SET b = '111' WHERE a = 1 ;
-- COMMIT TRANSACTION;
-- go

-- SELECT without constants
SELECT * FROM pgss_test ORDER BY a;

-- SELECT with IN clause
SELECT * FROM pgss_test WHERE a IN (1, 2, 3, 4, 5);
go

SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- psql
SELECT sys.pg_stat_statements_reset();
go

-- tsql

-- DROP TRIGGER trigger1
DROP TABLE pgss_test;
DROP ROLE pgss_test_role;
go

--group by distinct
SELECT a, b, c
FROM (VALUES (1, 2, 3), (4, NULL, 6), (7, 8, 9)) AS t (a, b, c)
GROUP BY ROLLUP(a, b), rollup(a, c)
ORDER BY a, b, c;
go

SELECT COUNT(*) FROM pg_stat_statements WHERE query LIKE '%GROUP BY%ROLLUP%';
go

--
-- INSERT, UPDATE, DELETE on test table to validate WAL generation metrics
--
-- psql
SELECT sys.pg_stat_statements_reset();
go

-- utility "create table" should not be shown
-- tsql
CREATE TABLE pgss_test (a int, b char(20));

INSERT INTO pgss_test VALUES(generate_series(1, 10), 'aaa');
UPDATE pgss_test SET b = 'bbb' WHERE a > 7;
DELETE FROM pgss_test WHERE a > 9;
-- DROP test table
DROP TABLE pgss_test;
go

-- Check WAL is generated for the above statements
SELECT query, calls, rows
FROM pg_stat_statements where wal_bytes != 0 and wal_records != 0 ORDER BY query COLLATE "C";
go

-- tsql
CREATE TABLE pgss_cust(customerid int not null, name varchar(22), age int, check (age>=18), primary key(customerid))
CREATE TABLE pgss_orders(orderid int not null, customerid int, country varchar(20) default 'INDIA', primary key(orderid), foreign key(customerid) references pgss_cust(customerid))
INSERT INTO pgss_cust values(1, 'ABC', 18),(2,'XYZ', 21), (3, 'LMN', 29),(4, 'PQR', 52),(5, 'STU', 23)
INSERT INTO pgss_orders values(10, 5, 'London'), (11, 3, 'India'), (12, 2, 'USA'), (13, 4, 'Pakistan'),(14, 5, 'Germany'),(15, 1, 'India')
go

-- join
SELECT pgss_cust.name, pgss_orders.orderid, pgss_orders.country from pgss_orders inner join pgss_cust on pgss_cust.customerid = pgss_orders.customerid;
go

SELECT COUNT(*) from pgss_orders where country ='India'
go

CREATE VIEW [India customers] as select customerid from pgss_orders where country = 'India'
go

SELECT * FROM [India customers]
go

SELECT * FROM pgss_cust
go

SELECT AVG(age) FROM pgss_cust
go

SELECT REVERSE(name) FROM pgss_cust
go

SELECT * FROM information_schema.views WHERE TABLE_NAME = 'india customers';
go


-- tsql function
-- CREATE FUNCTION pgss_f1(@a INT) RETURNS INT AS BEGIN RETURN (@a + 1) END; 
-- go

CREATE SEQUENCE [dbo].[newCounter] AS int START WITH 5 increment by 5 
go

SELECT NEXT VALUE FOR [dbo].[newCounter]
go

DROP SEQUENCE [dbo].[newCounter]
go

-- Inline table-valued function
-- create function [dbo].[getCustomers](@age int) returns table as return 
-- (select customers.customerid, customers.name, customers.age from customers
-- where age >= @age)
-- go
-- select * from [dbo].[getCustomers](20)
-- go

-- Temp table
CREATE TABLE #pgss_demo(age int)
go

DROP VIEW  [India customers]
go
-- DROP FUNCTION [dbo].[getCustomers]
-- go
DROP TABLE pgss_orders
go
DROP TABLE pgss_cust
go
-- DROP FUNCTION pgss_f1
-- go

-- tsql
-- CREATE PROC pgss_p1 @a INT, @b FLOAT AS SELECT @a, @b; 
-- go


-- DROP PROCEDURE pgss_p1;
-- go


-- tsql
SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- psql
DROP EXTENSION pg_stat_statements;
go


