-- psql
CREATE EXTENSION pg_stat_statements WITH SCHEMA sys;
go

-- psql
SET sys.pg_stat_statements.track = 'none';
SELECT sys.pg_stat_statements_reset();
go

--
-- simple and compound statements
--

-- tsql
SELECT 1 AS "int";
go


SELECT 'hello'
  -- multiline
  AS "text";
go

SELECT 'world' AS "text";
go

-- transaction
-- BEGIN TRANSACTION;
-- SELECT 1 AS "int";
-- SELECT 'hello' AS "text";
-- COMMIT TRANSACTION;
-- go

-- database
-- CREATE DATABASE test_db
-- go
-- DROP DATABASE test_db
-- go

-- tsql
-- login
-- CREATE LOGIN  l1 with password = '12345678'
-- go
-- DROP LOGIN  l1
-- go

SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- psql
SELECT sys.pg_stat_statements_reset();
go

-- tsql
-- CRUD: INSERT SELECT UPDATE DELETE on test table

-- utility "create table" should not be shown
CREATE TABLE test (a int, b char(20));
go

-- tsql
CREATE TRIGGER trigger1 on [dbo].[test] for insert as
PRINT 'after insert trigger called'
go

INSERT INTO test VALUES(generate_series(1, 10), 'aaa');
go
UPDATE test SET b = 'bbb' WHERE a > 7;
DELETE FROM test WHERE a > 9;
go
TRUNCATE TABLE test;
go

-- create role & permissions(grant revoke)
CREATE ROLE test_role
go
GRANT INSERT, UPDATE, SELECT ON test TO test_role
go
REVOKE INSERT, UPDATE, SELECT ON test FROM test_role
go

-- alter 
ALTER TABLE test ENABLE TRIGGER trigger1
go
ALTER TABLE test DISABLE  TRIGGER trigger1
go

-- explicit transaction
-- BEGIN TRANSACTION;
-- UPDATE test SET b = '111' WHERE a = 1 ;
-- COMMIT TRANSACTION;
-- go

-- SELECT without constants
SELECT * FROM test ORDER BY a;

-- SELECT with IN clause
SELECT * FROM test WHERE a IN (1, 2, 3, 4, 5);
go

SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- psql
SELECT sys.pg_stat_statements_reset();
go

-- tsql

-- DROP TRIGGER trigger1
DROP TABLE test;
DROP ROLE test_role;
go

-- tsql
CREATE TABLE customers(customerid int not null, name varchar(22), age int, check (age>=18), primary key(customerid))
CREATE TABLE orders(orderid int not null, customerid int, country varchar(20) default 'INDIA', primary key(orderid), foreign key(customerid) references customers(customerid))
INSERT INTO customers values(1, 'ABC', 18),(2,'XYZ', 21), (3, 'LMN', 29),(4, 'PQR', 52),(5, 'STU', 23)
INSERT INTO orders values(10, 5, 'London'), (11, 3, 'India'), (12, 2, 'USA'), (13, 4, 'Pakistan'),(14, 5, 'Germany'),(15, 1, 'India')
go

SELECT COUNT(*) from orders where country ='India'
go

CREATE VIEW [India customers] as select customerid from orders where country = 'India'
go

SELECT * FROM [India customers]
go

SELECT * FROM customers
go

SELECT AVG(age) FROM customers
go

SELECT REVERSE(name) FROM customers
go

SELECT * FROM information_schema.views;
go


-- tsql function
-- CREATE FUNCTION f1(@a INT) RETURNS INT AS BEGIN RETURN (@a + 1) END; 
-- go

CREATE SEQUENCE [dbo].[newCounter] AS int START WITH 5 increment by 5 
go

SELECT NEXT VALUE FOR [dbo].[newCounter]
go

DROP SEQUENCE [dbo].[newCounter]
go

-- Inline table-valued function
-- create function [dbo].[getCustomers](@age int) returns table as return 
-- (select customers.customerid, customers.name, customers.age from customers
-- where age >= @age)
-- go
-- select * from [dbo].[getCustomers](20)
-- go

-- Temp table
CREATE TABLE #demo(age int)
go

DROP VIEW  [India customers]
go
-- DROP FUNCTION [dbo].[getCustomers]
-- go
DROP TABLE orders
go
DROP TABLE customers
go
-- DROP FUNCTION f1
-- go

-- tsql
-- CREATE PROC p1 @a INT, @b FLOAT AS SELECT @a, @b; 
-- go


-- DROP PROCEDURE p1;
-- go


-- tsql
SELECT dbid, toplevel, query, calls, rows, plans from pg_stat_statements where queryid != 0 ORDER BY query COLLATE "C";
go

-- psql
DROP EXTENSION pg_stat_statements;
go


