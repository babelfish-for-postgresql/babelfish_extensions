-- tsql
create login no_priv_login1 with password = '12345678'
go

create role dont_drop_role
go

create login no_priv_login2 with password = '12345678'
go

create user no_priv_user2 for login no_priv_login2
go

create login no_priv_login3 with password = '12345678'
go

create user no_priv_user3 for login no_priv_login3
go

create role no_priv_role3;
go

create database restrict_user_db1
go

use restrict_user_db1
go

create role dont_drop_role
go

create user no_priv_user1 for login no_priv_login1
go

use master
go

-- case-1 - when current user is guest
-- permission denied
-- tsql user=no_priv_login1 password=12345678
select current_user,db_name()
go

drop role dont_drop_role
go

drop user no_priv_user2
go

-- tsql
select current_user,db_name()
go

create user no_priv_user1 for login no_priv_login1
go

-- case-2 - when current user has no privilege
-- permission denied
-- tsql user=no_priv_login1 password=12345678
use master
go

select current_user
go

drop role dont_drop_role
go

drop user no_priv_user2
go

-- case-3 - when current login has privilege
-- tsql

-- 3.1 - when login is database owner
Alter authorization on database::restrict_user_db1 to no_priv_login2
go

-- allowed
-- tsql user=no_priv_login2 password=12345678 database=restrict_user_db1
select current_user
go

drop role dont_drop_role
go

drop user no_priv_user1
go

-- error
-- try to drop non existing role/user
drop role fake_role
go

drop user fake_user;
go

drop user db
go

drop role db_own
go

drop user dbo_u1
go

drop role db_owner_r1
go

-- should deny
-- try to drop dbo user, db_owner role
drop role db_owner
go

drop user dbo
go


create role dont_drop_role
go

create user no_priv_user1 for login no_priv_login1
go

-- 3.2 - when login is sysadmin
-- allowed
-- tsql
drop user no_priv_user1
go

drop user no_priv_user2
go

drop role dont_drop_role
go

-- 3.3 - when drop user/role has IF EXISTS clause
-- Should not throw error for the case where IF EXISTS clause is included
drop role if exists fake_role;
go

drop user if exists fake_user;
go

-- both of the following statements should be executed successfully since user/role exists
drop role if exists no_priv_user3;
go

drop user if exists no_priv_user3;
go

drop user if exists no_priv_role3;
go

drop role if exists no_priv_role3;
go

select count(*) from sys.database_principals where name like '%no_priv_%3';
go

-- 3.4 - Try dropping role created from PG role
-- psql
create role master_pguser1;
go

-- tsql
drop user pguser1;
go

drop role pguser1;
go

-- it will still try to drop it, but permission denied will be generated since
-- bbf_role_admin won't have privilege to drop non-babelfish roles
drop user if exists pguser1;
go

drop role if exists pguser1;
go

-- psql
drop role master_pguser1;
go

-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'no_priv_login1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go


-- tsql
drop login no_priv_login1
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'no_priv_login2' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- tsql
drop login no_priv_login2
go

drop login no_priv_login3
go

drop database restrict_user_db1
go

-- 3.5 - Try dropping user created for another database
-- psql
ALTER SYSTEM SET babelfishpg_tsql.migration_mode = 'multi-db';
GO
SELECT pg_reload_conf();
GO
-- Wait to sync with another session
SELECT pg_sleep(1);
GO

-- tsql
create database restrict_user_db1;
go

create database restrict_user_db1_restrict_user_db1;
go

create login restrict_user_l1 with password = '12345678'
go

use restrict_user_db1
go

create user restrict_user_db1_user1 for login restrict_user_l1;
go

use restrict_user_db1_restrict_user_db1
go

drop user user1;
go

drop user if exists user1;
go

use master
go

-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL)
WHERE sys.suser_name(usesysid) = 'restrict_user_l1' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
go

-- tsql
use restrict_user_db1
go

drop user restrict_user_db1_user1;
go

use master
go

drop login restrict_user_l1;
go

drop database restrict_user_db1;
go

drop database restrict_user_db1_restrict_user_db1;
go

-- psql
ALTER SYSTEM SET babelfishpg_tsql.migration_mode = 'single-db';
GO
-- Wait to sync with another session
SELECT pg_sleep(1);
GO