

-- \getenv libdir PG_LIBDIR
-- GO

-- \getenv dlsuffix PG_DLSUFFIX
-- GO

-- \set regresslib :libdir '/regress' :dlsuffix
-- GO


-- tsql
CREATE TABLE CHAR_TBL(f1 char(4));
GO

INSERT INTO CHAR_TBL (f1) VALUES
  ('a'),
  ('ab'),
  ('abcd'),
  ('abcd    ');
GO

-- psql     
VACUUM master_dbo.CHAR_TBL;
GO

-- tsql
CREATE TABLE FLOAT8_TBL(f1 float);
GO

INSERT INTO FLOAT8_TBL(f1) VALUES
  ('0.0'),
  ('-34.84'),
  ('-1004.30'),
  ('-1.2345678901234e+200'),
  ('-1.2345678901234e-200');
GO

-- psql     
VACUUM master_dbo.FLOAT8_TBL;
GO

-- tsql
CREATE TABLE INT2_TBL(f1 int2);
GO

INSERT INTO INT2_TBL(f1) VALUES
  ('0   '),
  ('  1234 '),
  ('    -1234'),
  ('32767'),  -- largest and smallest values
  ('-32767');
GO

-- psql
VACUUM master_dbo.INT2_TBL;
GO

-- tsql
CREATE TABLE INT4_TBL(f1 int);
GO

INSERT INTO INT4_TBL(f1) VALUES
  ('   0  '),
  ('123456     '),
  ('    -123456'),
  ('2147483647'),  -- largest and smallest values
  ('-2147483647');
GO

-- psql
VACUUM master_dbo.INT4_TBL;
GO

-- tsql
CREATE TABLE INT8_TBL(q1 bigint, q2 bigint);
GO

INSERT INTO INT8_TBL VALUES
  ('  123   ','  456'),
  ('123   ','4567890123456789'),
  ('4567890123456789','123'),
  ('+4567890123456789','4567890123456789'),
  ('+4567890123456789','-4567890123456789');
GO

-- psql     
VACUUM master_dbo.INT8_TBL;
GO

-- tsql
CREATE TABLE POINT_TBL(f1 point);
GO

INSERT INTO POINT_TBL(f1) VALUES
  ('(0.0,0.0)'),
  ('(-10.0,0.0)'),
  ('(-3.0,4.0)'),
  ('(5.1, 34.5)'),
  ('(-5.0,-12.0)'),
  ('(1e-300,-1e-300)'),  -- To underflow
  ('(1e+300,Inf)'),  -- To overflow
  ('(Inf,1e+300)'),  -- Transposed
  (' ( Nan , NaN ) '),
  ('10.0,10.0');
GO
-- We intentionally don't vacuum point_tbl here; geometry depends on that

CREATE TABLE TEXT_TBL (f1 varchar(max));
GO

INSERT INTO TEXT_TBL VALUES
  ('doh!'),
  ('hi de ho neighbor');
GO

-- psql     
VACUUM master_dbo.TEXT_TBL;
GO

-- tsql
CREATE TABLE VARCHAR_TBL(f1 varchar(4));
GO


INSERT INTO VARCHAR_TBL (f1) VALUES
  ('a'),
  ('ab'),
  ('abcd'),
  ('abcd    ');
GO

-- psql     
VACUUM master_dbo.VARCHAR_TBL;
GO

-- tsql
CREATE TABLE onek (
	unique1		int,
	unique2		int,
	two			int,
	four		int,
	ten			int,
	twenty		int,
	hundred		int,
	thousand	int,
	twothousand	int,
	fivethous	int,
	tenthous	int,
	odd			int,
	even		int,
	stringu1	name,
	stringu2	name,
	string4		name
);
GO

-- bash   
/bin/bash input/pg_regress/load_onek.sh
GO

-- psql
VACUUM ANALYZE master_dbo.onek;
GO

-- tsql
CREATE TABLE onek2 (
	unique1		int,
	unique2		int,
	two			int,
	four		int,
	ten			int,
	twenty		int,
	hundred		int,
	thousand	int,
	twothousand	int,
	fivethous	int,
	tenthous	int,
	odd			int,
	even		int,
	stringu1	name,
	stringu2	name,
	string4		name
);
GO

insert into onek2 select * from onek;
GO

-- psql     
VACUUM ANALYZE master_dbo.onek2;
GO

-- tsql
CREATE TABLE tenk1 (
	unique1		int,
	unique2		int,
	two			int,
	four		int,
	ten			int,
	twenty		int,
	hundred		int,
	thousand	int,
	twothousand	int,
	fivethous	int,
	tenthous	int,
	odd			int,
	even		int,
	stringu1	name,
	stringu2	name,
	string4		name
);
GO

-- bash   
/bin/bash input/pg_regress/load_tenk.sh
GO

-- psql
VACUUM ANALYZE master_dbo.tenk1;
GO

-- tsql
CREATE TABLE tenk2 (
	unique1		int,
	unique2		int,
	two			int,
	four		int,
	ten			int,
	twenty		int,
	hundred		int,
	thousand	int,
	twothousand	int,
	fivethous	int,
	tenthous	int,
	odd			int,
	even		int,
	stringu1	name,
	stringu2	name,
	string4		name
);
GO

insert into tenk2 select * from tenk1;
GO

-- psql     
VACUUM ANALYZE master_dbo.tenk2;
GO

-- tsql
CREATE TABLE person (
	name 		varchar(max),
	age			int,
	location 	point
);
GO

-- bash   
/bin/bash input/pg_regress/load_person.sh
GO

-- psql
VACUUM ANALYZE master_dbo.person;
GO

-- tsql
CREATE TABLE emp (
    name 		varchar(max),
	age			int,
	location 	point,
	salary 		int,
	manager 	name
) 
GO

-- bash   
/bin/bash input/pg_regress/load_emp.sh
GO

-- psql
VACUUM ANALYZE master_dbo.emp;
GO

-- tsql
CREATE TABLE student (
    name 		varchar(max),
	age			int,
	location 	point,
	gpa 		float
);
GO

-- bash   
/bin/bash input/pg_regress/load_student.sh
GO

-- psql
VACUUM ANALYZE master_dbo.student;
GO

-- tsql

CREATE TABLE stud_emp (
    name 		varchar(max),
	age			int,
	location 	point,
	salary 		int,
	manager 	name,
	gpa 		float,
	[percent] 	int
) ;
GO

-- bash   
/bin/bash input/pg_regress/load_stud_emp.sh
GO

-- psql
VACUUM ANALYZE master_dbo.stud_emp;
GO

-- tsql
CREATE TABLE aggtest (
	a 			int,
	b			float
);
GO

-- bash   
/bin/bash input/pg_regress/load_aggtest.sh
GO

-- psql
VACUUM ANALYZE master_dbo.aggtest;
GO

-- tsql
CREATE TABLE road (
	name		varchar(max),
	thepath 	path
);
GO

-- bash   
/bin/bash input/pg_regress/load_road.sh
GO

-- psql
VACUUM ANALYZE master_dbo.road;
GO

-- CREATE TABLE ihighway () INHERITS (road);

-- INSERT INTO ihighway
--    SELECT *
--    FROM ONLY road
--    WHERE name ~ 'I- .*';
-- VACUUM ANALYZE ihighway;

-- CREATE TABLE shighway (
-- 	surface		text
-- ) INHERITS (road);

-- INSERT INTO shighway
--    SELECT *, 'asphalt'
--    FROM ONLY road
--    WHERE name ~ 'State Hwy.*';
-- VACUUM ANALYZE shighway;


--
-- We must have some enum type in the database for opr_sanity and type_sanity.
--

-- create type stoplight as enum ('red', 'yellow', 'green');

--
-- Also create some non-built-in range types.
--

-- create type float8range as range (subtype = float8, subtype_diff = float8mi);

-- create type textrange as range (subtype = text, collation = "C");

--
-- Create some C functions that will be used by various tests.
--

-- CREATE FUNCTION binary_coercible(oid, oid)
--     RETURNS bool
--     AS :'regresslib', 'binary_coercible'
--     LANGUAGE C STRICT STABLE PARALLEL SAFE;

-- CREATE FUNCTION ttdummy ()
--     RETURNS trigger
--     AS :'regresslib'
--     LANGUAGE C;

-- CREATE FUNCTION get_columns_length(oid[])
--     RETURNS int
--     AS :'regresslib'
--     LANGUAGE C STRICT STABLE PARALLEL SAFE;

-- Use hand-rolled hash functions and operator classes to get predictable
-- result on different machines.  The hash function for int4 simply returns
-- the sum of the values passed to it and the one for text returns the length
-- of the non-empty string value passed to it or 0.

-- create function part_hashint4_noop(value int4, seed int8)
--     returns int8 as $$
--     select value + seed;
--     $$ language sql strict immutable parallel safe;

-- create operator class part_test_int4_ops for type int4 using hash as
--     operator 1 =,
--     function 2 part_hashint4_noop(int4, int8);

-- create function part_hashtext_length(value text, seed int8)
--     returns int8 as $$
--     select length(coalesce(value, ''))::int8
--     $$ language sql strict immutable parallel safe;

-- create operator class part_test_text_ops for type text using hash as
--     operator 1 =,
--     function 2 part_hashtext_length(text, int8);
