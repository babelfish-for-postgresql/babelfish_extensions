-- parallel_query_expected
--
-- SELECT
--

-- btree index
-- awk '{if($1<10){print;}else{next;}}' onek.data | sort +0n -1
--
SELECT * FROM onek
   WHERE onek.unique1 < 10
   ORDER BY onek.unique1;
GO

--
-- awk '{if($1<20){print $1,$14;}else{next;}}' onek.data | sort +0nr -1
--
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 desc;
GO

--
-- awk '{if($1>980){print $1,$14;}else{next;}}' onek.data | sort +1d -2
--
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY stringu1 asc;
GO

--
-- awk '{if($1>980){print $1,$16;}else{next;}}' onek.data |
-- sort +1d -2 +0nr -1
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 asc, unique1 desc;
GO

--
-- awk '{if($1>980){print $1,$16;}else{next;}}' onek.data |
-- sort +1dr -2 +0n -1
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 desc, unique1 asc;
GO

--
-- awk '{if($1<20){print $1,$16;}else{next;}}' onek.data |
-- sort +0nr -1 +1d -2
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 desc, string4 asc;
GO

--
-- awk '{if($1<20){print $1,$16;}else{next;}}' onek.data |
-- sort +0n -1 +1dr -2
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 asc, string4 desc;
GO
--
-- test partial btree indexes
--
-- As of 7.2, planner probably won't pick an indexscan without stats,
-- so ANALYZE first.  Also, we want to prevent it from picking a bitmapscan
-- followed by sort, because that could hide index ordering problems.
--

-- psql
ANALYZE master_dbo.onek2;
GO

-- tsql
select set_config('enable_seqscan', 'off', false);
GO
select set_config('enable_bitmapscan', 'off', false);
GO
select set_config('enable_sort', 'off', false);
GO

--
-- awk '{if($1<10){print $0;}else{next;}}' onek.data | sort +0n -1
--
-- ORDER IS DIFFERENT compared with orginal regression test
SELECT onek2.* FROM onek2 WHERE onek2.unique1 < 10;
GO

--
-- awk '{if($1<20){print $1,$14;}else{next;}}' onek.data | sort +0nr -1
--
SELECT onek2.unique1, onek2.stringu1 FROM onek2
    WHERE onek2.unique1 < 20
    ORDER BY unique1 desc;
GO

--
-- awk '{if($1>980){print $1,$14;}else{next;}}' onek.data | sort +1d -2
--
-- ORDER IS DIFFERENT compared with orginal regression test
SELECT onek2.unique1, onek2.stringu1 FROM onek2
   WHERE onek2.unique1 > 980;
GO

-- RESET enable_seqscan;
-- RESET enable_bitmapscan;
-- RESET enable_sort;
select set_config('enable_seqscan', 'on', false);
GO
select set_config('enable_bitmapscan', 'on', false);
GO
select set_config('enable_sort', 'on', false);
GO

--
-- awk '{print $1,$2;}' person.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - emp.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - student.data |
-- awk 'BEGIN{FS="      ";}{if(NF!=2){print $4,$5;}else{print;}}' - stud_emp.data
--
-- SELECT name, age FROM person*; ??? check if different
-- psql
-- MISSING LAST 8 ROWS compared with orginal regression test
SELECT p.name, p.age FROM master_dbo.person* p;
GO

--
-- awk '{print $1,$2;}' person.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - emp.data |
-- awk '{if(NF!=2){print $3,$2;}else{print;}}' - student.data |
-- awk 'BEGIN{FS="      ";}{if(NF!=1){print $4,$5;}else{print;}}' - stud_emp.data |
-- sort +1nr -2
--
SELECT p.name, p.age FROM master_dbo.person* p ORDER BY age desc, name;
GO

--
-- Test some cases involving whole-row Var referencing a subquery
--
-- psql
select foo from (select 1 offset 0) as foo;
GO
select foo from (select null offset 0) as foo;
GO
select foo from (select 'xyzzy',1,null offset 0) as foo;
GO

--
-- Test VALUES lists
--
select * from master_dbo.onek, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
    WHERE master_dbo.onek.unique1 = v.i and master_dbo.onek.stringu1 = v.j;
GO
-- a more complex case
-- looks like we're coding lisp :-)
select * from master_dbo.onek,
  (values ((select i from
    (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
    order by i asc limit 1))) bar (i)
  where master_dbo.onek.unique1 = bar.i;
GO
-- try VALUES in a subquery
select * from master_dbo.onek
    where (unique1,ten) in (values (1,1), (20,0), (99,9), (17,99))
    order by unique1;
GO
-- VALUES is also legal as a standalone query or a set-operation member
VALUES (1,2), (3,4+4), (7,77.7);
GO

VALUES (1,2), (3,4+4), (7,77.7)
UNION ALL
SELECT 2+2, 57
UNION ALL
TABLE master_dbo.int8_tbl;
GO

-- corner case: VALUES with no columns
CREATE TEMP TABLE nocols();
GO
INSERT INTO nocols DEFAULT VALUES;
GO
SELECT * FROM nocols n, LATERAL (VALUES(n.*)) v;
GO

--
-- Test ORDER BY options
--
-- tsql
CREATE TABLE #foo (f1 int);
GO

INSERT INTO #foo VALUES (42),(3),(10),(7),(null),(null),(1);
GO

SELECT * FROM #foo ORDER BY f1;
GO
SELECT * FROM #foo ORDER BY f1 ASC;	-- same thing
GO
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- GO
SELECT * FROM #foo ORDER BY f1 DESC;
GO
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
-- GO

-- check if indexscans do the right things
CREATE INDEX fooi ON #foo (f1);
GO
select set_config('enable_sort', 'false', false);
GO

SELECT * FROM #foo ORDER BY f1;
GO
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- GO
SELECT * FROM #foo ORDER BY f1 DESC;
GO
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
-- GO

DROP INDEX fooi ON #foo;
GO
CREATE INDEX fooi ON #foo (f1 DESC);
GO

SELECT * FROM #foo ORDER BY f1;
GO
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- GO
SELECT * FROM #foo ORDER BY f1 DESC;
GO
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
-- GO

DROP INDEX fooi ON #foo;
GO
-- CREATE INDEX fooi ON foo (f1 DESC NULLS LAST);
GO

SELECT * FROM #foo ORDER BY f1;
GO
-- SELECT * FROM foo ORDER BY f1 NULLS FIRST;
-- GO
SELECT * FROM #foo ORDER BY f1 DESC;
GO
-- SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;
-- GO

--
-- Test planning of some cases with partial indexes
--

-- partial index is usable
-- psql
explain (costs off)
select * from master_dbo.onek2 where unique2 = 11 and stringu1 = 'ATAAAA' COLLATE "C";
GO
select * from master_dbo.onek2 where unique2 = 11 and stringu1 = 'ATAAAA' COLLATE "C";
GO
-- actually run the query with an analyze to use the partial index
explain (costs off, analyze on, timing off, summary off)
select * from master_dbo.onek2 where unique2 = 11 and stringu1 = 'ATAAAA' COLLATE "C";
GO
explain (costs off)
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 = 'ATAAAA' COLLATE "C";
GO
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 = 'ATAAAA' COLLATE "C";
GO
-- partial index predicate implies clause, so no need for retest
explain (costs off)
select * from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C";
GO
select * from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C";
GO
explain (costs off)
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C";
GO
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C";
GO
-- but if it's an update target, must retest anyway
explain (costs off)
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C" for update;
GO
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C" for update;
GO
-- partial index is not applicable
explain (costs off)
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'C' COLLATE "C";
GO
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'C' COLLATE "C";
GO
-- partial index implies clause, but bitmap scan must recheck predicate anyway
SET enable_indexscan TO off;
GO
explain (costs off)
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C";
GO
select unique2 from master_dbo.onek2 where unique2 = 11 and stringu1 < 'B' COLLATE "C";
GO
RESET enable_indexscan;
GO
-- check multi-index cases too
explain (costs off)
select unique1, unique2 from master_dbo.onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B' COLLATE "C";
GO
select unique1, unique2 from master_dbo.onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B' COLLATE "C";
GO
explain (costs off)
select unique1, unique2 from master_dbo.onek2
  where (unique2 = 11 and stringu1 < 'B' COLLATE "C") or unique1 = 0;
GO
select unique1, unique2 from master_dbo.onek2
  where (unique2 = 11 and stringu1 < 'B' COLLATE "C") or unique1 = 0;
GO

--
-- Test some corner cases that have been known to confuse the planner
--

-- ORDER BY on a constant doesn't really need any sorting
SELECT 1 AS x ORDER BY x;
GO

-- But ORDER BY on a set-valued expression does
create function sillysrf(int) returns setof int as
  'values (1),(10),(2),($1)' language sql immutable;
GO

select sillysrf(42);
GO
select sillysrf(-1) order by 1;
GO

drop function sillysrf(int);
GO

-- X = X isn't a no-op, it's effectively X IS NOT NULL assuming = is strict
-- (see bug #5084)
select * from (values (2),(null),(1)) v(k) where k = k order by k;
GO
select * from (values (2),(null),(1)) v(k) where k = k;
GO

-- Test partitioned tables with no partitions, which should be handled the
-- same as the non-inheritance case when expanding its RTE.
create table list_parted_tbl (a int,b int) partition by list (a);
GO
create table list_parted_tbl1 partition of list_parted_tbl
  for values in (1) partition by list(b);
GO
explain (costs off) select * from list_parted_tbl;
GO
drop table list_parted_tbl;
GO
