-- parallel_query_expected
-- psql
analyze master_dbo.tb_alter_recomp_1
go

-- tsql
select nspname, funcname, flag_validity&4, flag_values&4 from sys.babelfish_function_ext where funcname like 'p_alter_recomp%' order by funcname
go
SELECT set_config('babelfishpg_tsql.explain_costs', 'off', false);
go
--==== EXEC with RECOMPILE tests with plan_cache_mode=auto ======
go
select set_config('plan_cache_mode', 'auto', false)
go
select set_config('enable_indexscan', 'on', false)
go
SELECT current_setting('plan_cache_mode') as plan_mode_before
go
SELECT current_setting('enable_indexscan') as enable_indexscan_before
go

--- generating generic plan for p_alter_recomp_01/p_alter_recomp_12 -----
--- generating custom plan for p_alter_recomp_02/p_alter_recomp_11 -----
go
declare @i int = 6
while @i > 0
begin
execute p_alter_recomp_01 0  -- created without recompile
execute p_alter_recomp_02 0  -- created with recompile
execute p_alter_recomp_11 0  -- altered with recompile; for MVU test
execute p_alter_recomp_12 0  -- altered without recompile; for MVU test
set @i -= 1
end
go

go
set babelfish_showplan_all on
go
execute p_alter_recomp_01 0  -- created without recompile
go
execute p_alter_recomp_02 0  -- created with recompile
go
execute p_alter_recomp_11 0  -- altered with recompile; for MVU test
go
execute p_alter_recomp_12 0  -- altered without recompile; for MVU test
go
set babelfish_showplan_all off
go

--- using generic plan for p_alter_recomp_01 (Index Cond: c1 = $1) ----
--- using custom scan for p_alter_recomp_02 (Index Cond: c1 = 0) ----
go
set babelfish_showplan_all on
go
execute p_alter_recomp_01 0  -- created without recompile
go
execute p_alter_recomp_02 0  -- created with recompile
go
set babelfish_showplan_all off
go

-- invert RECOMPILE flags for both procedures
go
alter procedure p_alter_recomp_01 @p int
with recompile
as
select 'p_alter_recomp_01', c1 as col1, x as col2 from tb_alter_recomp_1 where c1 = @p
go

alter procedure p_alter_recomp_02 @p int 
as
select 'p_alter_recomp_02', c1 as col1, x as col2 from tb_alter_recomp_1 where c1 = @p
go

select nspname, funcname, flag_validity&4, flag_values&4 from sys.babelfish_function_ext where funcname like 'p_alter_recomp%' order by funcname
go

--- generating generic plan for p_alter_recomp_02 -----
declare @i int = 6
while @i > 0
begin
execute p_alter_recomp_01 0  -- altered with recompile
execute p_alter_recomp_02 0  -- altered without recompile
set @i -= 1
end
go

--- using custom plan for p_alter_recomp_01 (Index Cond: c1 = 0) ----
--- using generic scan for p_alter_recomp_02 (Index Cond: c1 = $1) ----
go
set babelfish_showplan_all on
go
execute p_alter_recomp_01 0  -- altered with recompile
go
execute p_alter_recomp_02 0  -- altered without recompile
go
set babelfish_showplan_all off
go

--==== end of tests ======
go
select set_config('plan_cache_mode', 'auto', false)
go
SELECT current_setting('plan_cache_mode') as plan_mode_after
go
SELECT current_setting('enable_indexscan') as enable_indexscan_after
go
