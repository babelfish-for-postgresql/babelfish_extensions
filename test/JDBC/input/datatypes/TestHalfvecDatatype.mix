-- parallel_query_expected
-- tsql
-- should throw error since vector is only allowed in sys
exec sp_execute_postgresql 'create extension vector';
go

exec sp_execute_postgresql 'create extension vector with schema sys';
go

create login vector_login with password='12345678'
go

Alter server role sysadmin add member vector_login
go

create database vector_db;
go

use vector_db
go

-- tsql user=vector_login password=12345678
use vector_db;
go

select set_config('babelfishpg_tsql.explain_costs', 'off', false);
go
select set_config('babelfishpg_tsql.explain_timing', 'off', false);
go
select set_config('babelfishpg_tsql.explain_summary', 'off', false);
go

SELECT CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[-1,-2,-3]' as halfvec);
go

SELECT CAST('[1.,2.,3.]' as halfvec);
go

SELECT CAST(' [ 1,  2 ,    3  ] ' as halfvec);
go

SELECT CAST('[1.23456]' as halfvec);
go

SELECT CAST('[hello,1]' as halfvec);
go

SELECT CAST('[NaN,1]' as halfvec);
go

SELECT CAST('[Infinity,1]' as halfvec);
go

SELECT CAST('[-Infinity,1]' as halfvec);
go

SELECT CAST('[65519,-65519]' as halfvec);
go

SELECT CAST('[65520,-65520]' as halfvec);
go

SELECT CAST('[1e-8,-1e-8]' as halfvec);
go

SELECT CAST('[4e38,1]' as halfvec);
go

SELECT CAST('[1e-46,1]' as halfvec);
go

SELECT CAST('[1,2,3' as halfvec);
go

SELECT CAST('[1,2,3]9' as halfvec);
go

SELECT CAST('1,2,3' as halfvec);
go

SELECT CAST('' as halfvec);
go

SELECT CAST('[' as halfvec);
go

SELECT CAST('[ ' as halfvec);
go

SELECT CAST('[,' as halfvec);
go

SELECT CAST('[]' as halfvec);
go

SELECT CAST('[ ]' as halfvec);
go

SELECT CAST('[,]' as halfvec);
go

SELECT CAST('[1,]' as halfvec);
go

SELECT CAST('[1a]' as halfvec);
go

SELECT CAST('[1,,3]' as halfvec);
go

SELECT CAST('[1, ,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec(3));
go

SELECT CAST('[1,2,3]' as halfvec(2));
go

SELECT CAST('[1,2,3]' as halfvec(3, 2));
go

SELECT CAST('[1,2,3]' as halfvec('a'));
go

SELECT CAST('[1,2,3]' as halfvec(0));
go

SELECT CAST('[1,2,3]' as halfvec(16001));
go

SELECT CAST('{"[1,2,3]"}' as halfvec(2)[]);
go

SELECT CAST('[1,2,3]' as halfvec) + CAST('[4,5,6]' as halfvec);
go

SELECT CAST('[65519]' as halfvec) + CAST('[65519]' as halfvec);
go

SELECT CAST('[1,2]' as halfvec) + CAST('[3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) - CAST('[4,5,6]' as halfvec);
go

SELECT CAST('[-65519]' as halfvec) - CAST('[65519]' as halfvec);
go

SELECT CAST('[1,2]' as halfvec) - CAST('[3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) * CAST('[4,5,6]' as halfvec);
go

SELECT CAST('[65519]' as halfvec) * CAST('[65519]' as halfvec);
go

SELECT CAST('[1e-7]' as halfvec) * CAST('[1e-7]' as halfvec);
go

SELECT CAST('[1,2]' as halfvec) * CAST('[3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) + CAST('[4,5]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) < CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) < CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) <= CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) <= CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) = CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) = CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) != CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) != CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) >= CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) >= CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) > CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) > CAST('[1,2]' as halfvec);
go

SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[0,0,0]' as halfvec));
go

SELECT halfvec_cmp(CAST('[0,0,0]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[1,2]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2]' as halfvec), CAST('[2,3,4]' as halfvec));
go

SELECT halfvec_cmp(CAST('[2,3]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT vector_dims(CAST('[1,2,3]' as halfvec));
go

SELECT ROUND(CAST(l2_norm(CAST('[1,1]' as halfvec)) as numeric), 5);
go

SELECT l2_norm(CAST('[3,4]' as halfvec));
go

SELECT l2_norm(CAST('[0,1]' as halfvec));
go

SELECT l2_norm(CAST('[0,0]' as halfvec));
go

SELECT l2_norm(CAST('[2]' as halfvec));
go

SELECT l2_distance(CAST('[0,0]' as halfvec), CAST('[3,4]' as halfvec));
go

SELECT l2_distance(CAST('[0,0]' as halfvec), CAST('[0,1]' as halfvec));
go

SELECT l2_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT l2_distance(CAST('[1,1,1,1,1,1,1,1,1]' as halfvec), CAST('[1,1,1,1,1,1,1,4,5]' as halfvec));
go

SELECT CAST('[0,0]' as halfvec) <-> CAST('[3,4]' as halfvec);
go

SELECT inner_product(CAST('[1,2]' as halfvec), CAST('[3,4]' as halfvec));
go

SELECT inner_product(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT inner_product(CAST('[65504]' as halfvec), CAST('[65504]' as halfvec));
go

SELECT inner_product(CAST('[1,1,1,1,1,1,1,1,1]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go

SELECT CAST('[1,2]' as halfvec) <#> CAST('[3,4]' as halfvec);
go

SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[2,4]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[0,0]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[1,1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,0]' as halfvec), CAST('[0,2]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[-1,-1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[1.1,1.1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[-1.1,-1.1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[-1,-2,-3,-4,-5,-6,-7,-8,-9]' as halfvec));
go

SELECT CAST('[1,2]' as halfvec) <=> CAST('[2,4]' as halfvec);
go

SELECT l1_distance(CAST('[0,0]' as halfvec), CAST('[3,4]' as halfvec));
go

SELECT l1_distance(CAST('[0,0]' as halfvec), CAST('[0,1]' as halfvec));
go

SELECT l1_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT l1_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go

SELECT l1_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[0,3,2,5,4,7,6,9,8]' as halfvec));
go

SELECT CAST('[0,0]' as halfvec) <+> CAST('[3,4]' as halfvec);
go

SELECT l2_normalize(CAST('[3,4]' as halfvec));
go

SELECT l2_normalize(CAST('[3,0]' as halfvec));
go

SELECT l2_normalize(CAST('[0,0.1]' as halfvec));
go

SELECT l2_normalize(CAST('[0,0]' as halfvec));
go

SELECT l2_normalize(CAST('[65504]' as halfvec));
go

SELECT binary_quantize(CAST('[1,0,-1]' as halfvec));
go

SELECT binary_quantize(CAST('[0,0.1,-0.2,-0.3,0.4,0.5,0.6,-0.7,0.8,-0.9,1]' as halfvec));
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 1, 3);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 2);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -1, 3);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 9);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 1, 0);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, -1);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -1, 2);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 2147483647, 10);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 2147483647);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -2147483644, 2147483647);
go

SELECT halfvec_avg(array_agg(CAST(n as halfvec))) FROM generate_series(1, 16002) n;
go

-- hnsw_halfvec
-- l2
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_l2_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec))) t2;
go

SELECT COUNT(*) FROM halfvec_table;
go

TRUNCATE TABLE halfvec_table;
go

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- inner product

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_ip_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- cosine

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_cosine_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec)) t2;
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- L1

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_l1_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <+> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <+> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- ivfflat
-- l2
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_l2_ops) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec))) t2;
go

SELECT COUNT(*) FROM halfvec_table;
go

TRUNCATE TABLE halfvec_table;
go

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- inner product

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_ip_ops) WITH (lists = 1) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- cosine

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_cosine_ops) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec)) t2;
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

select set_config('babelfishpg_tsql.explain_costs', 'on', false);
go
select set_config('babelfishpg_tsql.explain_timing', 'on', false);
go
select set_config('babelfishpg_tsql.explain_summary', 'on', false);
go

-- system metadata, all objects get their datatype info from one of:
-- typecodes or datatype_info data we have created. Testing sys.types for typecodes
-- and sp_sproc_columns_100 for datatype_info is enough
select count(*) from sys.types where name = 'halfvec';
go

create procedure halfvec_proc_1 @a halfvec, @b varchar(max) as select @a as a, @b as b;
go

exec sp_sproc_columns_100 @procedure_name= 'halfvec_proc_1'
go

drop procedure halfvec_proc_1;
go

create table t(a halfvec(3), b varchar(max))
go
select * from information_schema.columns where table_name = 't'
go
select count(*) from sys.columns where object_id = sys.object_id('t')
go
drop table t;
go

-- Testing with different typmod 
CREATE TABLE document_embeddings (
    id int PRIMARY KEY,
    embedding halfvec(4) NOT NULL
);
go
CREATE INDEX document_embeddings_embedding_idx ON document_embeddings USING hnsw (embedding vector_l2_ops);
go
INSERT INTO document_embeddings(id, embedding) VALUES(1, CAST('[21,-2,0,2.5]' as halfvec));
INSERT INTO document_embeddings(id, embedding) VALUES(2, CAST('[5, 10000, -9.75, 8]' as halfvec));
INSERT INTO document_embeddings(id, embedding) VALUES(3, CAST('[-0.02,23,3.14,00]' as halfvec));
WITH cte AS (
    SELECT CAST(2e2 AS real) a, 80 b, CAST('-65519' AS real) c, -1 d
)
INSERT INTO document_embeddings(id, embedding) SELECT 4, CAST(CONCAT('[',a, ',', b, ',', c, ',', d, ']') as halfvec) FROM cte; 
go
SELECT * FROM document_embeddings;
go
SELECT TOP 5 * FROM document_embeddings ORDER BY embedding <=> '[3,1,2,4]';
go
-- extending PG syntax to have generic vector expression support
SELECT count(embedding <-> '[3,1,2,0]') FROM document_embeddings;
SELECT count(embedding <=> '[3,1,2,0]') FROM document_embeddings;
SELECT count(embedding <#> '[3,1,2,0]') FROM document_embeddings; 
go

-- WHERE clause expressions
SELECT * FROM document_embeddings WHERE embedding <-> '[3,20, 1,-2.5]' < 5;
SELECT * FROM document_embeddings WHERE embedding <=> '[3,20, 1,-2.5]' < 5;
SELECT * FROM document_embeddings WHERE embedding <#> '[3,20, 1,-2.5]' < 5; 
go

SELECT AVG(embedding) FROM document_embeddings;
go

SELECT id, AVG(embedding) FROM document_embeddings GROUP BY id;
go

Drop table document_embeddings
go

use master 
go

-- tsql 
use master 
go

drop database vector_db;
go
-- Using Collation BBF_Unicode_CP1_CI_AI
create database vector_db collate BBF_Unicode_CP1_CI_AI;
go

use vector_db
go

-- tsql user=vector_login password=12345678
use vector_db;
go

select set_config('babelfishpg_tsql.explain_costs', 'off', false);
go
select set_config('babelfishpg_tsql.explain_timing', 'off', false);
go
select set_config('babelfishpg_tsql.explain_summary', 'off', false);
go

SELECT CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[-1,-2,-3]' as halfvec);
go

SELECT CAST('[1.,2.,3.]' as halfvec);
go

SELECT CAST(' [ 1,  2 ,    3  ] ' as halfvec);
go

SELECT CAST('[1.23456]' as halfvec);
go

SELECT CAST('[hello,1]' as halfvec);
go

SELECT CAST('[NaN,1]' as halfvec);
go

SELECT CAST('[Infinity,1]' as halfvec);
go

SELECT CAST('[-Infinity,1]' as halfvec);
go

SELECT CAST('[65519,-65519]' as halfvec);
go

SELECT CAST('[65520,-65520]' as halfvec);
go

SELECT CAST('[1e-8,-1e-8]' as halfvec);
go

SELECT CAST('[4e38,1]' as halfvec);
go

SELECT CAST('[1e-46,1]' as halfvec);
go

SELECT CAST('[1,2,3' as halfvec);
go

SELECT CAST('[1,2,3]9' as halfvec);
go

SELECT CAST('1,2,3' as halfvec);
go

SELECT CAST('' as halfvec);
go

SELECT CAST('[' as halfvec);
go

SELECT CAST('[ ' as halfvec);
go

SELECT CAST('[,' as halfvec);
go

SELECT CAST('[]' as halfvec);
go

SELECT CAST('[ ]' as halfvec);
go

SELECT CAST('[,]' as halfvec);
go

SELECT CAST('[1,]' as halfvec);
go

SELECT CAST('[1a]' as halfvec);
go

SELECT CAST('[1,,3]' as halfvec);
go

SELECT CAST('[1, ,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec(3));
go

SELECT CAST('[1,2,3]' as halfvec(2));
go

SELECT CAST('[1,2,3]' as halfvec(3, 2));
go

SELECT CAST('[1,2,3]' as halfvec('a'));
go

SELECT CAST('[1,2,3]' as halfvec(0));
go

SELECT CAST('[1,2,3]' as halfvec(16001));
go

SELECT CAST('{"[1,2,3]"}' as halfvec(2)[]);
go

SELECT CAST('[1,2,3]' as halfvec) + CAST('[4,5,6]' as halfvec);
go

SELECT CAST('[65519]' as halfvec) + CAST('[65519]' as halfvec);
go

SELECT CAST('[1,2]' as halfvec) + CAST('[3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) - CAST('[4,5,6]' as halfvec);
go

SELECT CAST('[-65519]' as halfvec) - CAST('[65519]' as halfvec);
go

SELECT CAST('[1,2]' as halfvec) - CAST('[3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) * CAST('[4,5,6]' as halfvec);
go

SELECT CAST('[65519]' as halfvec) * CAST('[65519]' as halfvec);
go

SELECT CAST('[1e-7]' as halfvec) * CAST('[1e-7]' as halfvec);
go

SELECT CAST('[1,2]' as halfvec) * CAST('[3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) + CAST('[4,5]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) < CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) < CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) <= CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) <= CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) = CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) = CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) != CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) != CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) >= CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) >= CAST('[1,2]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) > CAST('[1,2,3]' as halfvec);
go

SELECT CAST('[1,2,3]' as halfvec) > CAST('[1,2]' as halfvec);
go

SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[0,0,0]' as halfvec));
go

SELECT halfvec_cmp(CAST('[0,0,0]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2,3]' as halfvec), CAST('[1,2]' as halfvec));
go

SELECT halfvec_cmp(CAST('[1,2]' as halfvec), CAST('[2,3,4]' as halfvec));
go

SELECT halfvec_cmp(CAST('[2,3]' as halfvec), CAST('[1,2,3]' as halfvec));
go

SELECT vector_dims(CAST('[1,2,3]' as halfvec));
go

SELECT ROUND(CAST(l2_norm(CAST('[1,1]' as halfvec)) as numeric), 5);
go

SELECT l2_norm(CAST('[3,4]' as halfvec));
go

SELECT l2_norm(CAST('[0,1]' as halfvec));
go

SELECT l2_norm(CAST('[0,0]' as halfvec));
go

SELECT l2_norm(CAST('[2]' as halfvec));
go

SELECT l2_distance(CAST('[0,0]' as halfvec), CAST('[3,4]' as halfvec));
go

SELECT l2_distance(CAST('[0,0]' as halfvec), CAST('[0,1]' as halfvec));
go

SELECT l2_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT l2_distance(CAST('[1,1,1,1,1,1,1,1,1]' as halfvec), CAST('[1,1,1,1,1,1,1,4,5]' as halfvec));
go

SELECT CAST('[0,0]' as halfvec) <-> CAST('[3,4]' as halfvec);
go

SELECT inner_product(CAST('[1,2]' as halfvec), CAST('[3,4]' as halfvec));
go

SELECT inner_product(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT inner_product(CAST('[65504]' as halfvec), CAST('[65504]' as halfvec));
go

SELECT inner_product(CAST('[1,1,1,1,1,1,1,1,1]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go

SELECT CAST('[1,2]' as halfvec) <#> CAST('[3,4]' as halfvec);
go

SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[2,4]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[0,0]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[1,1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,0]' as halfvec), CAST('[0,2]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[-1,-1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[1.1,1.1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,1]' as halfvec), CAST('[-1.1,-1.1]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go

SELECT cosine_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[-1,-2,-3,-4,-5,-6,-7,-8,-9]' as halfvec));
go

SELECT CAST('[1,2]' as halfvec) <=> CAST('[2,4]' as halfvec);
go

SELECT l1_distance(CAST('[0,0]' as halfvec), CAST('[3,4]' as halfvec));
go

SELECT l1_distance(CAST('[0,0]' as halfvec), CAST('[0,1]' as halfvec));
go

SELECT l1_distance(CAST('[1,2]' as halfvec), CAST('[3]' as halfvec));
go

SELECT l1_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[1,2,3,4,5,6,7,8,9]' as halfvec));
go

SELECT l1_distance(CAST('[1,2,3,4,5,6,7,8,9]' as halfvec), CAST('[0,3,2,5,4,7,6,9,8]' as halfvec));
go

SELECT CAST('[0,0]' as halfvec) <+> CAST('[3,4]' as halfvec);
go

SELECT l2_normalize(CAST('[3,4]' as halfvec));
go

SELECT l2_normalize(CAST('[3,0]' as halfvec));
go

SELECT l2_normalize(CAST('[0,0.1]' as halfvec));
go

SELECT l2_normalize(CAST('[0,0]' as halfvec));
go

SELECT l2_normalize(CAST('[65504]' as halfvec));
go

SELECT binary_quantize(CAST('[1,0,-1]' as halfvec));
go

SELECT binary_quantize(CAST('[0,0.1,-0.2,-0.3,0.4,0.5,0.6,-0.7,0.8,-0.9,1]' as halfvec));
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 1, 3);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 2);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -1, 3);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 9);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 1, 0);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, -1);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -1, 2);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 2147483647, 10);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), 3, 2147483647);
go

SELECT subvector(CAST('[1,2,3,4,5]' as halfvec), -2147483644, 2147483647);
go

SELECT halfvec_avg(array_agg(CAST(n as halfvec))) FROM generate_series(1, 16002) n;
go

-- hnsw_halfvec
-- l2
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_l2_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec))) t2;
go

SELECT COUNT(*) FROM halfvec_table;
go

TRUNCATE TABLE halfvec_table;
go

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- inner product

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_ip_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- cosine

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_cosine_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec)) t2;
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- L1

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING hnsw (val halfvec_l1_ops);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <+> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <+> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- ivfflat
-- l2
CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_l2_ops) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <-> (SELECT CAST(NULL as halfvec))) t2;
go

SELECT COUNT(*) FROM halfvec_table;
go

TRUNCATE TABLE halfvec_table;
go

SELECT * FROM halfvec_table ORDER BY val <-> CAST('[3,3,3]' AS halfvec);
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- inner product

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_ip_ops) WITH (lists = 1) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <#> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <#> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

-- cosine

CREATE TABLE halfvec_table (val halfvec(3));
go

INSERT INTO halfvec_table (val) VALUES (CAST('[0,0,0]' AS halfvec)), (CAST('[1,2,3]' AS halfvec)), (CAST('[1,1,1]' AS halfvec)), (NULL);
go

CREATE INDEX idx ON halfvec_table USING ivfflat (val halfvec_cosine_ops) WITH (lists = 1);
go

INSERT INTO halfvec_table (val) VALUES (CAST('[1,2,4]' AS halfvec));
go

-- test explain output for index scan
SET BABELFISH_STATISTICS PROFILE ON; SELECT set_config('enable_seqscan', 'off', false);
go
SELECT * FROM halfvec_table ORDER BY val <=> CAST('[3,3,3]' AS halfvec);
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> CAST('[0,0,0]' AS halfvec)) t2;
go

SELECT COUNT(*) FROM (SELECT * FROM halfvec_table ORDER BY val <=> (SELECT CAST(NULL as halfvec))) t2;
go

SET BABELFISH_STATISTICS PROFILE OFF; SELECT set_config('enable_seqscan', 'on', false);
DROP TABLE halfvec_table;
go

select set_config('babelfishpg_tsql.explain_costs', 'on', false);
go
select set_config('babelfishpg_tsql.explain_timing', 'on', false);
go
select set_config('babelfishpg_tsql.explain_summary', 'on', false);
go

-- system metadata, all objects get their datatype info from one of:
-- typecodes or datatype_info data we have created. Testing sys.types for typecodes
-- and sp_sproc_columns_100 for datatype_info is enough
select count(*) from sys.types where name = 'halfvec';
go

create procedure halfvec_proc_1 @a halfvec, @b varchar(max) as select @a as a, @b as b;
go

exec sp_sproc_columns_100 @procedure_name= 'halfvec_proc_1'
go

drop procedure halfvec_proc_1;
go

create table t(a halfvec(3), b varchar(max))
go
select * from information_schema.columns where table_name = 't'
go
select count(*) from sys.columns where object_id = sys.object_id('t')
go
drop table t;
go

-- Testing with different typmod 
CREATE TABLE document_embeddings (
    id int PRIMARY KEY,
    embedding halfvec(4) NOT NULL
);
go
CREATE INDEX document_embeddings_embedding_idx ON document_embeddings USING hnsw (embedding vector_l2_ops);
go
INSERT INTO document_embeddings(id, embedding) VALUES(1, CAST('[21,-2,0,2.5]' as halfvec));
INSERT INTO document_embeddings(id, embedding) VALUES(2, CAST('[5, 10000, -9.75, 8]' as halfvec));
INSERT INTO document_embeddings(id, embedding) VALUES(3, CAST('[-0.02,23,3.14,00]' as halfvec));
WITH cte AS (
    SELECT CAST(2e2 AS real) a, 80 b, CAST('-65519' AS real) c, -1 d
)
INSERT INTO document_embeddings(id, embedding) SELECT 4, CAST(CONCAT('[',a, ',', b, ',', c, ',', d, ']') as halfvec) FROM cte; 
go
SELECT * FROM document_embeddings;
go
SELECT TOP 5 * FROM document_embeddings ORDER BY embedding <=> '[3,1,2,4]';
go
-- extending PG syntax to have generic vector expression support
SELECT count(embedding <-> '[3,1,2,0]') FROM document_embeddings;
SELECT count(embedding <=> '[3,1,2,0]') FROM document_embeddings;
SELECT count(embedding <#> '[3,1,2,0]') FROM document_embeddings; 
go

-- WHERE clause expressions
SELECT * FROM document_embeddings WHERE embedding <-> '[3,20, 1,-2.5]' < 5;
SELECT * FROM document_embeddings WHERE embedding <=> '[3,20, 1,-2.5]' < 5;
SELECT * FROM document_embeddings WHERE embedding <#> '[3,20, 1,-2.5]' < 5; 
go

SELECT AVG(embedding) FROM document_embeddings;
go

SELECT id, AVG(embedding) FROM document_embeddings GROUP BY id;
go

Drop table document_embeddings
go
-- psql
-- Need to terminate active session before cleaning up the login
SELECT pg_terminate_backend(pid) FROM pg_stat_get_activity(NULL) 
WHERE sys.suser_name(usesysid) = 'vector_login' AND backend_type = 'client backend' AND usesysid IS NOT NULL;
GO

-- tsql
use master
go

exec sp_execute_postgresql 'drop extension vector';
go

drop login vector_login
go

drop database vector_db;
go