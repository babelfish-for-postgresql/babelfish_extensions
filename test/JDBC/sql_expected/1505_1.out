# Executing test ErrorHandling1
--Pre
CREATE TABLE t1505(c1 int); 
INSERT INTO t1505 VALUES(1), (1); 
GO
~~ROW COUNT: 2~~



create procedure ErrorHandling1 as
begin
--Generate the error
CREATE UNIQUE INDEX x ON t1505(c1);
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('Compile time error' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
--Post
DROP TABLE t1505;
GO


--Pre
CREATE TABLE t1505(c1 int); 
INSERT INTO t1505 VALUES(1), (1); 
GO
~~ROW COUNT: 2~~

begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
--Generate the error
CREATE UNIQUE INDEX x ON t1505(c1);
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling1")~~


GO
--Post
DROP TABLE t1505;
GO


-- Checking xact_abort_flag for compile time error --
set xact_abort ON;
GO
--Pre
CREATE TABLE t1505(c1 int); 
INSERT INTO t1505 VALUES(1), (1); 
GO
~~ROW COUNT: 2~~

begin transaction
GO
# Executing test ErrorHandling1

create procedure ErrorHandling1 as
begin
--Generate the error
CREATE UNIQUE INDEX x ON t1505(c1);
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
end
GO

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling1")~~


GO
--Post
DROP TABLE t1505;
GO
set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Next portion is for runtime error --
--Pre
CREATE TABLE t1505(c1 int); 
INSERT INTO t1505 VALUES(1), (1); 
GO
~~ROW COUNT: 2~~



create procedure ErrorHandling1 as
begin
--Generate the error
CREATE UNIQUE INDEX x ON t1505(c1);
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 1505)~~

~~ERROR (Message: could not create unique index "xt15059dd4e461268c8034f5c8564e155c67a6")~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

--Post
DROP TABLE t1505;
GO


set xact_abort ON;
GO
# Executing test ErrorHandling10000000
--Pre
CREATE TABLE t1505(c1 int); 
INSERT INTO t1505 VALUES(1), (1); 
GO
~~ROW COUNT: 2~~



create procedure ErrorHandling1 as
begin
--Generate the error
CREATE UNIQUE INDEX x ON t1505(c1);
if @@error > 0 select cast('STATEMENT TERMINATING ERROR' as text);
select @@trancount;
end
GO

if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
GO

create procedure ErrorHandling2 as
begin
exec ErrorHandling1;
if @@error > 0 select cast('CURRENT BATCH TERMINATING ERROR' as text);
end
GO

begin transaction;
GO
exec ErrorHandling2;
GO
~~ERROR (Code: 1505)~~

~~ERROR (Message: could not create unique index "xt15059dd4e461268c8034f5c8564e155c67a6")~~

declare @err int = @@error; if (@err > 0 and @@trancount > 0) select cast('BATCH ONLY TERMINATING' as text) else if @err > 0 select cast('BATCH TERMINATING\ txn rolledback' as text);
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
text
BATCH TERMINATING\ txn rolledback
~~END~~

--Post
DROP TABLE t1505;
GO



set xact_abort OFF;
GO

# Executing test ErrorHandling10000000
-- Error classification is done --
--Pre
CREATE TABLE t1505(c1 int); 
INSERT INTO t1505 VALUES(1), (1); 
GO
~~ROW COUNT: 2~~



begin try
select 1
--Generate the error
CREATE UNIQUE INDEX x ON t1505(c1);
end try
begin catch
	select xact_state();
end catch
if @@trancount > 0 rollback transaction;
drop procedure ErrorHandling1;
drop procedure ErrorHandling2;
set xact_abort OFF;
set implicit_transactions OFF;
GO
~~START~~
int
1
~~END~~

~~START~~
smallint
0
~~END~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling1")~~

~~ERROR (Code: 3701)~~

~~ERROR (Message: could not find a procedure named "errorhandling2")~~

--Post
DROP TABLE t1505;
GO
